{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize the fuzzed data provider\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw rawProcessor;\\n\\n  // Call the function-under-test with the provided data\\n  int result = rawProcessor.open_buffer(data, size);\\n\\n  // Process the image if it was successfully opened\\n  if (result == LIBRAW_SUCCESS) {\\n    rawProcessor.unpack();\\n    rawProcessor.dcraw_process(); // Call the required function\\n    rawProcessor.selectCRXTrack(); // Call the required function\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize the fuzzed data provider\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Create a LibRaw object\\n  LibRaw rawProcessor;\\n\\n  // Feed the data to the LibRaw object\\n  int result = rawProcessor.open_buffer(data, size);\\n  if (result != LIBRAW_SUCCESS) {\\n    return 0;\\n  }\\n\\n  // Call the function-under-test, for example, unpack()\\n  result = rawProcessor.unpack();\\n  if (result != LIBRAW_SUCCESS) {\\n    return 0;\\n  }\\n\\n  // Call the required function selectCRXTrack\\n  rawProcessor.selectCRXTrack();\\n\\n  // Process the image\\n  rawProcessor.imgdata.params.output_tiff = 1;\\n  rawProcessor.dcraw_process();\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}