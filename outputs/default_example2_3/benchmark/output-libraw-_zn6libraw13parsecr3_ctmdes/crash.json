{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.35",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a LibRaw object\\n    LibRaw rawProcessor;\\n\\n    // Call the function-under-test\\n    int result = rawProcessor.open_buffer(data, size);\\n\\n    if (result == LIBRAW_SUCCESS) {\\n        // Generate a short value from the fuzzed data\\n        short ctmd_value = stream.ConsumeIntegral<short>();\\n\\n        // Call another function since parseCR3_CTMD does not exist\\n        // Example: we can use unpack() which is a valid LibRaw function\\n        rawProcessor.unpack();\\n    }\\n\\n    // Return the result (although the return value is not used by the fuzzer)\\n    return result;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.01",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Consume a short value from the input data\\n  short input_value = stream.ConsumeIntegral<short>();\\n\\n  // Create an instance of LibRaw\\n  LibRaw libraw_instance;\\n\\n  // Call the function-under-test with the consumed short value\\n  // Since 'parseCR3_CTMD' doesn't exist, we need to find an appropriate function to test.\\n  // For demonstration, let's use 'open_buffer' which takes a buffer and its size.\\n  int result = libraw_instance.open_buffer(data, size);\\n\\n  // Return the result (though it's not necessary for fuzzing)\\n  return result;\\n}",
        "model": ""
    }

    ]
}