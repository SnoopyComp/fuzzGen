{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw libraw_instance;\\n\\n  // Call the function-under-test\\n  int result = libraw_instance.open_buffer(data, size);\\n\\n  // Check if the buffer was successfully opened\\n  if (result == LIBRAW_SUCCESS) {\\n    // Process the image\\n    libraw_instance.unpack();\\n    libraw_instance.imgdata.params.output_tiff = 1;\\n    libraw_instance.dcraw_process();\\n    libraw_instance.dcraw_ppm_tiff_writer(\"/dev/null\");\\n  }\\n\\n  // Ensure the function parseCR3_CTMD is called with a non-null input\\n  short cr3_ctmd_input = provider.ConsumeIntegral<short>();\\n  libraw_instance.parseCR3_CTMD(cr3_ctmd_input);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>  // for FILE, fopen, fwrite, fclose, remove\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a temporary file to store the input data\\n  const char* temp_filename = \"/tmp/temp_image.cr3\";\\n  FILE* temp_file = fopen(temp_filename, \"wb\");\\n  if (temp_file == nullptr) {\\n    return 0;\\n  }\\n  fwrite(data, 1, size, temp_file);\\n  fclose(temp_file);\\n\\n  LibRaw libraw_processor;\\n  // Open the temporary file with LibRaw\\n  int ret = libraw_processor.open_file(temp_filename);\\n  if (ret != LIBRAW_SUCCESS) {\\n    // Clean up the temporary file if open_file fails\\n    remove(temp_filename);\\n    return 0;\\n  }\\n\\n  // Process the image\\n  ret = libraw_processor.unpack();\\n  if (ret != LIBRAW_SUCCESS) {\\n    // Clean up the temporary file if unpack fails\\n    remove(temp_filename);\\n    return 0;\\n  }\\n\\n  // Call the dcraw_process function to process the image\\n  ret = libraw_processor.dcraw_process();\\n  if (ret != LIBRAW_SUCCESS) {\\n    // Handle the error if dcraw_process fails\\n    remove(temp_filename);\\n    return 0;\\n  }\\n\\n  // Generate a short integer value from the fuzzed data\\n  short cr3_ctmd_value = stream.ConsumeIntegral<short>();\\n\\n  // Call the parseCR3_CTMD function with the generated short value\\n  ret = libraw_processor.parseCR3_CTMD(cr3_ctmd_value);\\n  if (ret != LIBRAW_SUCCESS) {\\n    // Handle the error if parseCR3_CTMD fails\\n    remove(temp_filename);\\n    return 0;\\n  }\\n\\n  // Clean up the temporary file after processing\\n  remove(temp_filename);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}