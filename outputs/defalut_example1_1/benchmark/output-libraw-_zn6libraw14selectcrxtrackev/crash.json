{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize the fuzzed data provider\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw rawProcessor;\\n\\n  // Create a temporary file to store the fuzzed input\\n  const char* tempFileName = \"/tmp/fuzzed_input.raw\";\\n  FILE* tempFile = fopen(tempFileName, \"wb\");\\n  if (tempFile == nullptr) {\\n    return 0;\\n  }\\n  fwrite(data, 1, size, tempFile);\\n  fclose(tempFile);\\n\\n  // Open the temporary file with LibRaw\\n  int result = rawProcessor.open_file(tempFileName);\\n\\n  // Call the unpack function\\n  if (result == LIBRAW_SUCCESS) {\\n    rawProcessor.unpack();\\n\\n    // Call the selectCRXTrack function\\n    rawProcessor.selectCRXTrack();\\n  }\\n\\n  // Clean up the temporary file\\n  remove(tempFileName);\\n\\n  return result;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw rawProcessor;\\n\\n    // Call the function-under-test with the input data\\n    int result = rawProcessor.open_buffer(data, size);\\n\\n    // Check the result of the function call (optional, for debugging purposes)\\n    if (result == LIBRAW_SUCCESS) {\\n        // Process the image data\\n        rawProcessor.unpack();\\n        rawProcessor.dcraw_process();\\n        \\n        // Call the required function selectCRXTrack\\n        rawProcessor.selectCRXTrack();\\n    } else {\\n        // Handle error (optional)\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}