{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.95",
        "coverage_diff": "0.0027776100477024334",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <vector>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Consume a string for the file name\\n    std::string filename = stream.ConsumeRandomLengthString(100);\\n\\n    // Consume a string for the mode\\n    std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n    // Ensure that the mode string is not empty and contains valid mode characters\\n    if (mode.empty() || mode.find_first_not_of(\"rwcah\") != std::string::npos) {\\n        mode = \"r\";\\n    }\\n\\n    // Create a temporary file with the consumed filename\\n    std::vector<uint8_t> fileData = stream.ConsumeRemainingBytes<uint8_t>();\\n    FILE* tempFile = fopen(filename.c_str(), \"wb\");\\n    if (tempFile != nullptr) {\\n        fwrite(fileData.data(), 1, fileData.size(), tempFile);\\n        fclose(tempFile);\\n    }\\n\\n    // Open the TIFF file\\n    TIFF* tiff = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // If the TIFF file was successfully opened, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Clean up the temporary file\\n    remove(filename.c_str());\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.85",
        "coverage_diff": "0.003562586800313991",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <string>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Generate a filename and mode string from the fuzzed data\\n    std::string filename = provider.ConsumeRandomLengthString(256);\\n    std::string mode = provider.ConsumeRandomLengthString(10);\\n\\n    // Ensure the strings are null-terminated\\n    filename.push_back('\\0');\\n    mode.push_back('\\0');\\n\\n    // Call TIFFOpen with the fuzzed filename and mode\\n    TIFF* tiff = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // If TIFFOpen returns a valid pointer, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}