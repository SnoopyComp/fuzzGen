{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "8.97",
        "coverage_diff": "0.00599802749431395",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <unistd.h>\\n#include <fcntl.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a temporary file\\n    char tmp_filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n    int fd = mkstemp(tmp_filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write fuzz data to the temporary file\\n    if (write(fd, data, size) == -1) {\\n        close(fd);\\n        unlink(tmp_filename);\\n        return 0;\\n    }\\n\\n    // Reset file offset to the beginning\\n    lseek(fd, 0, SEEK_SET);\\n\\n    // Generate fuzzed strings for mode and name\\n    std::string mode = stream.ConsumeRandomLengthString(10);\\n    std::string name = stream.ConsumeRandomLengthString(20);\\n\\n    // Ensure mode is a valid TIFF mode string\\n    if (mode.empty() || (mode.find_first_not_of(\"rwa+\") != std::string::npos)) {\\n        mode = \"r\";\\n    }\\n\\n    // Ensure name is not empty\\n    if (name.empty()) {\\n        name = \"fuzz_tiff\";\\n    }\\n\\n    // Call the function-under-test\\n    TIFF* tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n    // Clean up\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n    close(fd);\\n    unlink(tmp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.54",
        "coverage_diff": "0.0027373548296197895",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Consume file descriptor as an integer\\n  int fd = stream.ConsumeIntegral<int>();\\n\\n  // Consume mode strings\\n  std::string mode1 = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange<size_t>(1, 10));\\n  std::string mode2 = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange<size_t>(1, 10));\\n\\n  // Ensure the strings are null-terminated\\n  mode1.push_back('\\0');\\n  mode2.push_back('\\0');\\n\\n  // Call the function-under-test\\n  TIFF* tiff = TIFFFdOpen(fd, mode1.c_str(), mode2.c_str());\\n\\n  // If the TIFF object was created, close it to avoid resource leaks\\n  if (tiff != nullptr) {\\n    TIFFClose(tiff);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}