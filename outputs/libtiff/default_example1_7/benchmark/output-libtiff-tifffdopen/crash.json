{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.87",
        "coverage_diff": "0.003139907010446229",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <vector>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Generate a file descriptor using temporary file\\n  FILE* temp_file = tmpfile();\\n  if (temp_file == nullptr) {\\n    return 0;\\n  }\\n  int fd = fileno(temp_file);\\n\\n  // Consume strings for the mode and name\\n  std::string name = provider.ConsumeRandomLengthString(100);\\n  std::string mode = provider.ConsumeRandomLengthString(10);\\n\\n  // Ensure mode is not empty\\n  if (mode.empty()) {\\n    mode = \"r\";\\n  }\\n\\n  // Call the function-under-test\\n  TIFF* tif = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n  // Perform cleanup\\n  if (tif != nullptr) {\\n    TIFFClose(tif);\\n  }\\n  fclose(temp_file);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "9.03",
        "coverage_diff": "0.006964152728297405",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <string>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a temporary file to simulate file descriptor input\\n  FILE* temp_file = tmpfile();\\n  if (!temp_file) {\\n    return 0;\\n  }\\n\\n  // Write fuzz data to the temporary file\\n  fwrite(data, 1, size, temp_file);\\n  fflush(temp_file);\\n  fseek(temp_file, 0, SEEK_SET);\\n\\n  // Get the file descriptor\\n  int fd = fileno(temp_file);\\n\\n  // Consume strings for mode and name\\n  std::string name = stream.ConsumeRandomLengthString(20);\\n  std::string mode = stream.ConsumeRandomLengthString(5);\\n\\n  // Ensure mode is not empty and has valid characters for file mode\\n  if (mode.empty() || mode.find_first_not_of(\"rwb+\") != std::string::npos) {\\n    mode = \"r\";  // Default to read mode\\n  }\\n\\n  // Call the function-under-test\\n  TIFF* tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n  // Clean up\\n  if (tiff) {\\n    TIFFClose(tiff);\\n  }\\n  fclose(temp_file);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}