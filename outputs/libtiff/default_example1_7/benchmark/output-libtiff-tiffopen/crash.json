{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.97",
        "coverage_diff": "0.0034216935370247367",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Consume a random length string for the filename\\n  std::string filename = stream.ConsumeRandomLengthString(100);\\n\\n  // Consume a random length string for the mode\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Ensure the mode is non-empty and valid\\n  if (mode.empty()) {\\n    mode = \"r\"; // default to read mode\\n  }\\n\\n  // Call the function-under-test\\n  TIFF* tif = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n  // If TIFFOpen returns a valid pointer, close it\\n  if (tif != nullptr) {\\n    TIFFClose(tif);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.90",
        "coverage_diff": "0.003441821146066059",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstring>\\n#include <vector>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate a random filename and mode string from the fuzzed data\\n    std::string filename = stream.ConsumeRandomLengthString(100);\\n    std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n    // Ensure the strings are null-terminated\\n    filename.push_back('\\0');\\n    mode.push_back('\\0');\\n\\n    // Call the function-under-test\\n    TIFF* tif = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // If TIFFOpen succeeded, close the TIFF file\\n    if (tif != nullptr) {\\n        TIFFClose(tif);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}