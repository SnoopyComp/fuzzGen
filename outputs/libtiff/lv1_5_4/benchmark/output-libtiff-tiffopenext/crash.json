{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Generate a filename and mode string\\n    std::string filename = fuzzed_data.ConsumeRandomLengthString(100);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure filename and mode are not empty\\n    if (filename.empty() || mode.empty()) {\\n        return 0;\\n    }\\n\\n    // Create default TIFFOpenOptions\\n    TIFFOpenOptions* options = TIFFOpenOptionsAlloc();\\n\\n    // Call the function-under-test\\n    TIFF* tiff = TIFFOpenExt(filename.c_str(), mode.c_str(), options);\\n\\n    // If TIFF* is not null, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Free the TIFFOpenOptions\\n    TIFFOpenOptionsFree(options);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <string>\\n#include <vector>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a string for the file name\\n    std::string filename = fuzzed_data.ConsumeRandomLengthString(100);\\n\\n    // Consume a string for the mode\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure the mode string is not empty and has a valid mode character\\n    if (mode.empty() || (mode.find_first_of(\"rwa+\") == std::string::npos)) {\\n        return 0;\\n    }\\n\\n    // Create default TIFFOpenOptions\\n    TIFFOpenOptions* options = TIFFOpenOptionsAlloc();\\n\\n    // Call the function-under-test\\n    TIFF* tiff = TIFFOpenExt(filename.c_str(), mode.c_str(), options);\\n\\n    // If TIFFOpenExt succeeded, close the TIFF file\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Free the TIFFOpenOptions\\n    TIFFOpenOptionsFree(options);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}