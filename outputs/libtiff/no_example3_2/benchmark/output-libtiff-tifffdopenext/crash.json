{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.59",
        "coverage_diff": "0.0044884568162148015",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <unistd.h>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume an integer for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume strings for the mode and name\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(100);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Create a temporary file to use as a TIFF input\\n    char tmp_filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n    int tmp_fd = mkstemp(tmp_filename);\\n    if (tmp_fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write the fuzzed data to the temporary file\\n    if (write(tmp_fd, data, size) == -1) {\\n        close(tmp_fd);\\n        unlink(tmp_filename);\\n        return 0;\\n    }\\n\\n    // Rewind the file descriptor to the beginning\\n    lseek(tmp_fd, 0, SEEK_SET);\\n\\n    // Call the function-under-test\\n    TIFFOpenOptions *opts = TIFFOpenOptionsAlloc();\\n    TIFF *tiff = TIFFFdOpenExt(tmp_fd, tmp_filename, mode.c_str(), opts);\\n    TIFFOpenOptionsFree(opts);\\n\\n    // If the TIFF object is created successfully, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Clean up the temporary file\\n    close(tmp_fd);\\n    unlink(tmp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.91",
        "coverage_diff": "0.003401565927983415",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n#include <string>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n\\n// Replace the non-existent header with the correct one\\n#include \"/src/libtiff/libtiff/tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume an integer for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume strings for the mode and name\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(100);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Create a TIFFOpenOptions object\\n    TIFFOpenOptions* options = TIFFOpenOptionsAlloc();\\n    if (options == nullptr) {\\n        return 0;\\n    }\\n\\n    // Call the function-under-test\\n    TIFF* tif = TIFFFdOpenExt(fd, name.c_str(), mode.c_str(), options);\\n\\n    // If the function returns a valid TIFF pointer, close it\\n    if (tif) {\\n        TIFFClose(tif);\\n    }\\n\\n    // Free the TIFFOpenOptions object\\n    TIFFOpenOptionsFree(options);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}