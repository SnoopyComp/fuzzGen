{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "6.07",
        "coverage_diff": "0.004146287462512328",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <sstream>\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a part of the input for the TIFF stream\\n    std::vector<uint8_t> tiff_data = fuzzed_data.ConsumeBytes<uint8_t>(fuzzed_data.remaining_bytes() / 2);\\n    std::istringstream s(std::string(tiff_data.begin(), tiff_data.end()));\\n    TIFF *tif = TIFFStreamOpen(\"MemTIFF\", &s);\\n    if (!tif) {\\n        return 0;\\n    }\\n\\n    // Consume a uint64_t value for the directory offset\\n    uint64_t directory_offset = fuzzed_data.ConsumeIntegral<uint64_t>();\\n\\n    // Call the function-under-test\\n    TIFFSetSubDirectory(tif, directory_offset);\\n\\n    // Close the TIFF file\\n    TIFFClose(tif);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "9.26",
        "coverage_diff": "0.006783004246925507",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <sstream>\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" void handle_error(const char *unused, const char *unused2, va_list unused3) { return; }\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n#ifndef STANDALONE\\n    TIFFSetErrorHandler(handle_error);\\n    TIFFSetWarningHandler(handle_error);\\n#endif\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a memory stream from the input data\\n    std::istringstream s(std::string(data, data + size));\\n\\n    // Open a TIFF file from the memory stream\\n    TIFF *tif = TIFFStreamOpen(\"MemTIFF\", &s);\\n    if (!tif) {\\n        return 0;\\n    }\\n\\n    // Consume a uint64_t value from the fuzzed data\\n    uint64_t subdir_offset = fuzzed_data.ConsumeIntegral<uint64_t>();\\n\\n    // Call the function-under-test\\n    TIFFSetSubDirectory(tif, subdir_offset);\\n\\n    // Close the TIFF file\\n    TIFFClose(tif);\\n\\n    return 0;\\n}\\n\\n#ifdef STANDALONE\\n\\ntemplate <class T> static void CPL_IGNORE_RET_VAL(T) {}\\n\\nstatic void Usage(int, char *argv[]) {\\n    fprintf(stderr, \"%s [--help] [-repeat N] filename.\\\n\", argv[0]);\\n    exit(1);\\n}\\n\\nint main(int argc, char *argv[]) {\\n    int nRet = 0;\\n    void *buf = NULL;\\n    int nLen = 0;\\n    int nLoops = 1;\\n    const char *pszFilename = NULL;\\n\\n    for (int i = 1; i < argc; i++) {\\n        if (i + 1 < argc && strcmp(argv[i], \"-repeat\") == 0) {\\n            nLoops = atoi(argv[i + 1]);\\n            i++;\\n        } else if (strcmp(argv[i], \"-dummy\") == 0) {\\n            uint8_t dummy = ' ';\\n            return LLVMFuzzerTestOneInput(&dummy, 1);\\n        } else if (strcmp(argv[i], \"--help\") == 0) {\\n            Usage(argc, argv);\\n        } else if (argv[i][0] == '-') {\\n            fprintf(stderr, \"Unrecognized option: %s\", argv[i]);\\n            Usage(argc, argv);\\n        } else {\\n            pszFilename = argv[i];\\n        }\\n    }\\n    if (pszFilename == nullptr) {\\n        fprintf(stderr, \"No filename specified\\\n\");\\n        Usage(argc, argv);\\n    }\\n    FILE *f = fopen(pszFilename, \"rb\");\\n    if (!f) {\\n        fprintf(stderr, \"%s does not exist.\\\n\", pszFilename);\\n        exit(1);\\n    }\\n    fseek(f, 0, SEEK_END);\\n    nLen = (int)ftell(f);\\n    fseek(f, 0, SEEK_SET);\\n    buf = malloc(nLen);\\n    if (!buf) {\\n        fprintf(stderr, \"malloc failed.\\\n\");\\n        fclose(f);\\n        exit(1);\\n    }\\n    CPL_IGNORE_RET_VAL(fread(buf, nLen, 1, f));\\n    fclose(f);\\n    for (int i = 0; i < nLoops; i++) {\\n        nRet = LLVMFuzzerTestOneInput(static_cast<const uint8_t *>(buf), nLen);\\n        if (nRet != 0)\\n            break;\\n    }\\n    free(buf);\\n    return nRet;\\n}\\n\\n#endif",
        "model": ""
    }

    ]
}