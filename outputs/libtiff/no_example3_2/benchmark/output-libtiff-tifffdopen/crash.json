{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstring>\\n#include <string>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume two strings for the mode and name\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(100);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure the strings are null-terminated\\n    const char *name_cstr = name.c_str();\\n    const char *mode_cstr = mode.c_str();\\n\\n    // Open a temporary file to get a valid file descriptor\\n    int fd = open(\"/dev/null\", O_RDWR);\\n    if (fd == -1) {\\n        return 0; // If we can't open a file descriptor, return early\\n    }\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(fd, name_cstr, mode_cstr);\\n\\n    // If the function returns a non-null pointer, close the TIFF to avoid resource leaks\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Close the file descriptor\\n    close(fd);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <unistd.h>\\n#include <fcntl.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the provided data and size\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume an integral value for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegralInRange<int>(0, 1024); // Ensure fd is within a valid range\\n\\n    // Consume strings for the mode and name\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(100);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure the strings are null-terminated\\n    const char *name_cstr = name.c_str();\\n    const char *mode_cstr = mode.c_str();\\n\\n    // Create a temporary file to use as a valid file descriptor\\n    char temp_filename[] = \"/tmp/tiff_fuzz_XXXXXX\";\\n    fd = mkstemp(temp_filename);\\n    if (fd == -1) {\\n        return 0; // If we can't create a temp file, just return\\n    }\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(fd, name_cstr, mode_cstr);\\n\\n    // If the function returns a valid TIFF pointer, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Close and remove the temporary file\\n    close(fd);\\n    unlink(temp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}