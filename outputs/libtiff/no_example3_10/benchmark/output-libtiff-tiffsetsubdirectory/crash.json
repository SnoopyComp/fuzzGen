{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <sstream>\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <cstdarg>\\n\\nextern \"C\" void handle_error(const char *unused, const char *unused2, va_list unused3) {\\n    return;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    TIFFSetErrorHandler(handle_error);\\n    TIFFSetWarningHandler(handle_error);\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a TIFF structure from the fuzzed data\\n    std::string input_data(reinterpret_cast<const char*>(data), size);\\n    std::istringstream s(input_data);\\n    TIFF *tif = TIFFStreamOpen(\"MemTIFF\", &s);\\n    if (!tif) {\\n        return 0;\\n    }\\n\\n    // Generate a fuzzed uint64_t value for the subdirectory offset\\n    uint64_t subdir_offset = fuzzed_data.ConsumeIntegral<uint64_t>();\\n\\n    // Call the function-under-test\\n    int result = TIFFSetSubDirectory(tif, subdir_offset);\\n\\n    // Close the TIFF structure\\n    TIFFClose(tif);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "9.11",
        "coverage_diff": "0.0038041181088098544",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <vector>\\n#include <sstream>\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <stdarg.h>\\n\\n// Error handler function\\nextern \"C\" void handle_error(const char *module, const char *fmt, va_list ap) { \\n    // Suppress error messages\\n    (void)module;\\n    (void)fmt;\\n    (void)ap;\\n    return; \\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    TIFFSetErrorHandler(handle_error);\\n    TIFFSetWarningHandler(handle_error);\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume data for the TIFFStreamOpen\\n    std::vector<uint8_t> tiff_data = fuzzed_data.ConsumeBytes<uint8_t>(fuzzed_data.remaining_bytes());\\n    std::istringstream s(std::string(tiff_data.begin(), tiff_data.end()));\\n    \\n    TIFF *tif = TIFFStreamOpen(\"MemTIFF\", &s);\\n    if (!tif) {\\n        return 0;\\n    }\\n\\n    // Consume a uint64_t value for the subdirectory\\n    uint64_t subdir = fuzzed_data.ConsumeIntegral<uint64_t>();\\n\\n    // Call the function under test\\n    TIFFSetSubDirectory(tif, subdir);\\n\\n    // Close the TIFF file\\n    TIFFClose(tif);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}