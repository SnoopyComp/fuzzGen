{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.77",
        "coverage_diff": "0.003139907010446229",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdio>\\n#include <cstring>\\n#include <unistd.h>\\n#include <fcntl.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a temporary file\\n    char tmp_filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n    int fd = mkstemp(tmp_filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write fuzz data to the temporary file\\n    if (write(fd, data, size) != static_cast<ssize_t>(size)) {\\n        close(fd);\\n        unlink(tmp_filename);\\n        return 0;\\n    }\\n\\n    // Use FuzzedDataProvider to generate mode strings\\n    std::string mode1 = stream.ConsumeBytesAsString(10);\\n    std::string mode2 = stream.ConsumeBytesAsString(10);\\n\\n    // Ensure null-terminated strings for mode\\n    mode1.push_back('\\0');\\n    mode2.push_back('\\0');\\n\\n    // Rewind the file descriptor to the beginning\\n    lseek(fd, 0, SEEK_SET);\\n\\n    // Call the function-under-test\\n    TIFF *tif = TIFFFdOpen(fd, tmp_filename, mode1.c_str());\\n\\n    // Clean up\\n    if (tif != nullptr) {\\n        TIFFClose(tif);\\n    }\\n    close(fd);\\n    unlink(tmp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.47",
        "coverage_diff": "0.004206670289636294",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <unistd.h>\\n#include <fcntl.h>\\n#include <cstring>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a temporary file to write the fuzzed data to\\n    char temp_filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n    int fd = mkstemp(temp_filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write the fuzzed data to the temporary file\\n    if (write(fd, data, size) != size) {\\n        close(fd);\\n        unlink(temp_filename);\\n        return 0;\\n    }\\n\\n    // Rewind the file descriptor to the beginning of the file\\n    lseek(fd, 0, SEEK_SET);\\n\\n    // Generate fuzzed strings for mode and name\\n    std::string name = stream.ConsumeRandomLengthString(100);\\n    std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n    // Ensure null-terminated strings\\n    const char* name_cstr = name.c_str();\\n    const char* mode_cstr = mode.c_str();\\n\\n    // Call the function-under-test\\n    TIFF* tiff = TIFFFdOpen(fd, name_cstr, mode_cstr);\\n\\n    // Clean up\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n    close(fd);\\n    unlink(temp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}