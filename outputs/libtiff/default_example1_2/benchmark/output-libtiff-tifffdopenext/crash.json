{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <unistd.h>\\n#include <fcntl.h>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a temporary file to use as the file descriptor\\n  char temp_filename[] = \"/tmp/tiff_fuzz_XXXXXX\";\\n  int fd = mkstemp(temp_filename);\\n  if (fd == -1) {\\n    return 0;\\n  }\\n\\n  // Write the fuzz data to the temporary file\\n  if (write(fd, data, size) != static_cast<ssize_t>(size)) {\\n    close(fd);\\n    unlink(temp_filename);\\n    return 0;\\n  }\\n\\n  // Reset the file offset to the beginning\\n  lseek(fd, 0, SEEK_SET);\\n\\n  // Consume strings for the mode and name\\n  std::string name = stream.ConsumeRandomLengthString(100);\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Call the function-under-test with TIFFOpenOptions set to nullptr\\n  TIFF* tiff = TIFFFdOpenExt(fd, name.c_str(), mode.c_str(), nullptr);\\n\\n  // Clean up\\n  if (tiff != nullptr) {\\n    TIFFClose(tiff);\\n  }\\n  close(fd);\\n  unlink(temp_filename);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a temporary file\\n    char filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n    int fd = mkstemp(filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write the fuzz data to the temporary file\\n    if (write(fd, data, size) != static_cast<ssize_t>(size)) {\\n        close(fd);\\n        unlink(filename);\\n        return 0;\\n    }\\n\\n    // Seek back to the beginning of the file\\n    lseek(fd, 0, SEEK_SET);\\n\\n    // Consume strings for mode and name\\n    std::string mode = stream.ConsumeRandomLengthString(10);\\n    std::string name = stream.ConsumeRandomLengthString(10);\\n\\n    // Ensure they are null-terminated\\n    mode.push_back('\\0');\\n    name.push_back('\\0');\\n\\n    // Create TIFFOpenOptions\\n    TIFFOpenOptions* options = TIFFOpenOptionsAlloc();\\n    if (options == nullptr) {\\n        close(fd);\\n        unlink(filename);\\n        return 0;\\n    }\\n\\n    // Use TIFFFdOpenExt instead of TIFFFdOpen\\n    TIFF* tiff = TIFFFdOpenExt(fd, filename, mode.c_str(), options);\\n\\n    // Clean up\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n    TIFFOpenOptionsFree(options);\\n    close(fd);\\n    unlink(filename);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}