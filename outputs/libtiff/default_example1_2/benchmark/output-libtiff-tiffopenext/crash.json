{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.98",
        "coverage_diff": "0.0040053941992230745",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Generate inputs for TIFFOpenExt\\n  std::string filename = stream.ConsumeRandomLengthString(100);\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Create TIFFOpenOptions object\\n  TIFFOpenOptions* options = TIFFOpenOptionsAlloc();\\n\\n  // Call TIFFOpenExt\\n  TIFF* tif = TIFFOpenExt(filename.c_str(), mode.c_str(), options);\\n\\n  // If the TIFF object was successfully created, close it\\n  if (tif != nullptr) {\\n    TIFFClose(tif);\\n  }\\n\\n  // Free the TIFFOpenOptions object\\n  TIFFOpenOptionsFree(options);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n\\n// Custom memory I/O functions\\nstatic tsize_t readProc(thandle_t fd, tdata_t buf, tsize_t size) {\\n    return 0;\\n}\\n\\nstatic tsize_t writeProc(thandle_t fd, tdata_t buf, tsize_t size) {\\n    return 0;\\n}\\n\\nstatic toff_t seekProc(thandle_t fd, toff_t off, int whence) {\\n    return 0;\\n}\\n\\nstatic int closeProc(thandle_t fd) {\\n    return 0;\\n}\\n\\nstatic toff_t sizeProc(thandle_t fd) {\\n    return 0;\\n}\\n\\nstatic int mapProc(thandle_t fd, tdata_t* pbase, toff_t* psize) {\\n    return 0;\\n}\\n\\nstatic void unmapProc(thandle_t fd, tdata_t base, toff_t size) {\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Generate filename and mode strings\\n  std::string filename = stream.ConsumeRandomLengthString(100);\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Create a dummy file descriptor\\n  thandle_t fd = 0;\\n\\n  // Call TIFFClientOpen with generated parameters and custom I/O functions\\n  TIFF* tiff = TIFFClientOpen(filename.c_str(), mode.c_str(), fd, readProc, writeProc, seekProc, closeProc, sizeProc, mapProc, unmapProc);\\n\\n  // If TIFF object is successfully created, close it\\n  if (tiff != nullptr) {\\n    TIFFClose(tiff);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}