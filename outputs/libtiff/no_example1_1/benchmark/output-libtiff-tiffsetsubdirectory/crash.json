{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "8.89",
        "coverage_diff": "0.003985266590181752",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <sstream>\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume bytes to create a TIFF stream\\n    std::vector<uint8_t> tiffBytes = fuzzed_data.ConsumeBytes<uint8_t>(fuzzed_data.remaining_bytes());\\n    std::istringstream tiffStream(std::string(tiffBytes.begin(), tiffBytes.end()));\\n\\n    // Open TIFF from stream\\n    TIFF* tif = TIFFStreamOpen(\"MemTIFF\", &tiffStream);\\n    if (!tif) {\\n        return 0;\\n    }\\n\\n    // Consume a uint64_t value for the subdirectory offset\\n    uint64_t subdirOffset = fuzzed_data.ConsumeIntegral<uint64_t>();\\n\\n    // Call the function-under-test\\n    TIFFSetSubDirectory(tif, subdirOffset);\\n\\n    // Close the TIFF to avoid memory leaks\\n    TIFFClose(tif);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "9.26",
        "coverage_diff": "0.006823259465008152",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <sstream>\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" void handle_error(const char *unused, const char *unused2, va_list unused3) {\\n    return;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    TIFFSetErrorHandler(handle_error);\\n    TIFFSetWarningHandler(handle_error);\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    std::istringstream s(std::string(data, data + size));\\n    TIFF *tif = TIFFStreamOpen(\"MemTIFF\", &s);\\n    if (!tif) {\\n        return 0;\\n    }\\n\\n    // Generate a random uint64_t value for the second parameter\\n    uint64_t subdir_offset = fuzzed_data.ConsumeIntegral<uint64_t>();\\n\\n    // Call the function-under-test\\n    int result = TIFFSetSubDirectory(tif, subdir_offset);\\n\\n    // Clean up\\n    TIFFClose(tif);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}