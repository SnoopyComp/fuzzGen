{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.58",
        "coverage_diff": "0.0026165891753718576",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the given data and size\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume an integer for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume strings for the mode and name\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(100);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure the strings are null-terminated\\n    const char *name_cstr = name.c_str();\\n    const char *mode_cstr = mode.c_str();\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(fd, name_cstr, mode_cstr);\\n\\n    // If tiff is not null, close it to avoid resource leaks\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.83",
        "coverage_diff": "0.002999013747156975",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume an integer for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume a string for the mode\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n    const char *mode_cstr = mode.c_str();\\n\\n    // Consume a string for the name\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(100);\\n    const char *name_cstr = name.c_str();\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(fd, name_cstr, mode_cstr);\\n\\n    // If the TIFF object was created, close it to avoid resource leaks\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}