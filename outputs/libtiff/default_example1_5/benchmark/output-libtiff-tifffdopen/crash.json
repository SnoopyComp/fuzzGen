{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.80",
        "coverage_diff": "0.003119779401404907",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Generate a file descriptor by creating a temporary file\\n  FILE* temp_file = tmpfile();\\n  if (temp_file == nullptr) {\\n    return 0;\\n  }\\n  int fd = fileno(temp_file);\\n\\n  // Consume parts of the input to create non-null strings for the mode and name\\n  std::string file_name = stream.ConsumeRandomLengthString(20);\\n  std::string mode = stream.ConsumeRandomLengthString(5);\\n\\n  // Ensure that the strings are null-terminated\\n  file_name += '\\0';\\n  mode += '\\0';\\n\\n  // Call the function-under-test\\n  TIFF* tif = TIFFFdOpen(fd, file_name.c_str(), mode.c_str());\\n\\n  // Clean up\\n  if (tif != nullptr) {\\n    TIFFClose(tif);\\n  }\\n  fclose(temp_file);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n#include <vector>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a temporary file to simulate file descriptor input\\n    FILE *tempFile = tmpfile();\\n    if (tempFile == nullptr) {\\n        return 0;\\n    }\\n\\n    // Write fuzz data to the temporary file\\n    std::vector<uint8_t> fileData = stream.ConsumeBytes<uint8_t>(stream.remaining_bytes());\\n    fwrite(fileData.data(), 1, fileData.size(), tempFile);\\n    fflush(tempFile);\\n    rewind(tempFile); // Rewind the file to the beginning\\n\\n    // Get the file descriptor\\n    int fd = fileno(tempFile);\\n    if (fd == -1) {\\n        fclose(tempFile);\\n        return 0;\\n    }\\n\\n    // Use a fixed name and mode that are valid for TIFF operations\\n    const char *name = \"fuzzed_input.tiff\";\\n    const char *mode = \"r\"; // Read mode\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(fd, name, mode);\\n\\n    // Clean up\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n    fclose(tempFile);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}