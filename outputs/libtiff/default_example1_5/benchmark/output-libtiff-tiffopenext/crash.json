{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.05",
        "coverage_diff": "0.004085904635388362",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Consume a random length string from the data for the filename\\n    std::string filename = stream.ConsumeRandomLengthString(100);\\n    // Ensure the filename is not empty\\n    if (filename.empty()) {\\n        return 0;\\n    }\\n\\n    // Consume a random length string from the data for the mode\\n    std::string mode = stream.ConsumeRandomLengthString(10);\\n    // Ensure the mode is not empty\\n    if (mode.empty()) {\\n        return 0;\\n    }\\n\\n    // Create TIFFOpenOptions object\\n    TIFFOpenOptions* options = TIFFOpenOptionsAlloc();\\n\\n    // Call the function-under-test\\n    TIFF* tiff = TIFFOpenExt(filename.c_str(), mode.c_str(), options);\\n\\n    // If the TIFF object was successfully created, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Free the TIFFOpenOptions object\\n    TIFFOpenOptionsFree(options);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n#include <vector>\\n#include <cstring> // for memcpy\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Consume a random length string from the fuzzed data for the filename\\n  std::string filename = stream.ConsumeRandomLengthString(256);\\n\\n  // Consume a random length string from the fuzzed data for the mode\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Create TIFFOpenOptions object\\n  TIFFOpenOptions options;\\n  memset(&options, 0, sizeof(options)); // Initialize options to zero\\n\\n  // Open the TIFF file using the fuzzed filename and mode\\n  TIFF *tiff = TIFFOpenExt(filename.c_str(), mode.c_str(), &options);\\n\\n  // If the TIFF object was successfully created, close it\\n  if (tiff != nullptr) {\\n    TIFFClose(tiff);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}