{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstdio>\\n#include <vector>\\n#include <string>\\n#include <unistd.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a temporary file to simulate file descriptor input\\n    char temp_filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n    int fd = mkstemp(temp_filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write fuzz data to the temporary file\\n    std::vector<uint8_t> file_data = fuzzed_data.ConsumeBytes<uint8_t>(size);\\n    if (write(fd, file_data.data(), file_data.size()) == -1) {\\n        close(fd);\\n        return 0;\\n    }\\n\\n    // Reset file descriptor to the beginning of the file\\n    lseek(fd, 0, SEEK_SET);\\n\\n    // Generate other parameters for TIFFFdOpen\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure mode is a valid TIFF mode\\n    if (mode.empty()) {\\n        mode = \"r\"; // Default to read mode\\n    } else {\\n        mode[0] = mode[0] % 2 == 0 ? 'r' : 'w'; // Simplify to 'r' or 'w'\\n    }\\n\\n    // Ensure name is not empty\\n    if (name.empty()) {\\n        name = \"fuzz_tiff\"; // Default name\\n    }\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n    if (tiff) {\\n        // Generate a random uint64_t for the subdirectory offset\\n        uint64_t subdir_offset = fuzzed_data.ConsumeIntegral<uint64_t>();\\n\\n        // Call the function-under-test\\n        TIFFSetSubDirectory(tiff, subdir_offset);\\n\\n        // Close the TIFF file\\n        TIFFClose(tiff);\\n    }\\n\\n    close(fd);\\n    unlink(temp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstdio>\\n#include <vector>\\n#include <unistd.h> // For close, unlink, lseek, write\\n\\nextern \"C\" void handle_error(const char *unused, const char *unused2, va_list unused3) { return; }\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n#ifndef STANDALONE\\n  TIFFSetErrorHandler(handle_error);\\n  TIFFSetWarningHandler(handle_error);\\n#endif\\n\\n  if (size < 8) {\\n    // Not enough data to consume an integral and do meaningful work\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  // Create a temporary file to simulate file operations\\n  char temp_filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n  int fd = mkstemp(temp_filename);\\n  if (fd == -1) {\\n    return 0;\\n  }\\n\\n  // Write fuzz data to the temporary file\\n  std::vector<uint8_t> file_data = fuzzed_data.ConsumeBytes<uint8_t>(size);\\n  if (write(fd, file_data.data(), file_data.size()) == -1) {\\n    close(fd);\\n    unlink(temp_filename);\\n    return 0;\\n  }\\n\\n  // Reset file descriptor to the beginning of the file\\n  lseek(fd, 0, SEEK_SET);\\n\\n  // Open the TIFF file from the file descriptor\\n  TIFF *tiff = TIFFFdOpen(fd, \"fuzz_tiff\", \"r\");\\n  if (!tiff) {\\n    close(fd);\\n    unlink(temp_filename);\\n    return 0;\\n  }\\n\\n  // Consume a uint64_t value for the subdirectory offset\\n  uint64_t subdir_offset = fuzzed_data.ConsumeIntegral<uint64_t>();\\n\\n  // Call the function-under-test\\n  int result = TIFFSetSubDirectory(tiff, subdir_offset);\\n\\n  // Perform any necessary cleanup\\n  TIFFClose(tiff);\\n  close(fd);\\n  unlink(temp_filename);\\n\\n  return result;\\n}\\n\\n#ifdef STANDALONE\\n\\ntemplate <class T> static void CPL_IGNORE_RET_VAL(T) {}\\n\\nstatic void Usage(int, char *argv[]) {\\n  fprintf(stderr, \"%s [--help] [-repeat N] filename.\\\n\", argv[0]);\\n  exit(1);\\n}\\n\\nint main(int argc, char *argv[]) {\\n  int nRet = 0;\\n  void *buf = NULL;\\n  int nLen = 0;\\n  int nLoops = 1;\\n  const char *pszFilename = NULL;\\n\\n  for (int i = 1; i < argc; i++) {\\n    if (i + 1 < argc && strcmp(argv[i], \"-repeat\") == 0) {\\n      nLoops = atoi(argv[i + 1]);\\n      i++;\\n    } else if (strcmp(argv[i], \"-dummy\") == 0) {\\n      uint8_t dummy = ' ';\\n      return LLVMFuzzerTestOneInput(&dummy, 1);\\n    } else if (strcmp(argv[i], \"--help\") == 0) {\\n      Usage(argc, argv);\\n    } else if (argv[i][0] == '-') {\\n      fprintf(stderr, \"Unrecognized option: %s\", argv[i]);\\n      Usage(argc, argv);\\n    } else {\\n      pszFilename = argv[i];\\n    }\\n  }\\n  if (pszFilename == nullptr) {\\n    fprintf(stderr, \"No filename specified\\\n\");\\n    Usage(argc, argv);\\n  }\\n  FILE *f = fopen(pszFilename, \"rb\");\\n  if (!f) {\\n    fprintf(stderr, \"%s does not exist.\\\n\", pszFilename);\\n    exit(1);\\n  }\\n  fseek(f, 0, SEEK_END);\\n  nLen = (int)ftell(f);\\n  fseek(f, 0, SEEK_SET);\\n  buf = malloc(nLen);\\n  if (!buf) {\\n    fprintf(stderr, \"malloc failed.\\\n\");\\n    fclose(f);\\n    exit(1);\\n  }\\n  CPL_IGNORE_RET_VAL(fread(buf, nLen, 1, f));\\n  fclose(f);\\n  for (int i = 0; i < nLoops; i++) {\\n    nRet = LLVMFuzzerTestOneInput(static_cast<const uint8_t *>(buf), nLen);\\n    if (nRet != 0)\\n      break;\\n  }\\n  free(buf);\\n  return nRet;\\n}\\n\\n#endif",
        "model": ""
    }

    ]
}