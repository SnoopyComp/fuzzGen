{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "9.30",
        "coverage_diff": "0.007024535555421371",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <sstream>\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" void handle_error(const char *unused, const char *unused2, va_list unused3) {\\n    return;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    TIFFSetErrorHandler(handle_error);\\n    TIFFSetWarningHandler(handle_error);\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a TIFF structure from the fuzzed data\\n    std::istringstream s(std::string(data, data + size));\\n    TIFF *tif = TIFFStreamOpen(\"MemTIFF\", &s);\\n    if (!tif) {\\n        return 0;\\n    }\\n\\n    // Consume a uint64_t value from the fuzzed data\\n    uint64_t subdir = fuzzed_data.ConsumeIntegral<uint64_t>();\\n\\n    // Call the function under test\\n    TIFFSetSubDirectory(tif, subdir);\\n\\n    // Close the TIFF structure\\n    TIFFClose(tif);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "8.95",
        "coverage_diff": "0.0043676911619668695",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstring>\\n#include <vector>\\n#include <sstream>\\n#include <tiffio.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume bytes to create a TIFF object\\n    std::vector<uint8_t> tiff_data = fuzzed_data.ConsumeBytes<uint8_t>(fuzzed_data.remaining_bytes());\\n    if (tiff_data.empty()) {\\n        return 0;\\n    }\\n\\n    // Custom read function for TIFFClientOpen\\n    auto read_func = [](thandle_t handle, void* buf, tsize_t size) -> tsize_t {\\n        std::istringstream* stream = static_cast<std::istringstream*>(handle);\\n        stream->read(static_cast<char*>(buf), size);\\n        return stream->gcount();\\n    };\\n\\n    // Custom seek function for TIFFClientOpen\\n    auto seek_func = [](thandle_t handle, toff_t off, int whence) -> toff_t {\\n        std::istringstream* stream = static_cast<std::istringstream*>(handle);\\n        stream->clear(); // Clear any error flags\\n        std::ios_base::seekdir dir;\\n        switch (whence) {\\n            case SEEK_SET:\\n                dir = std::ios_base::beg;\\n                break;\\n            case SEEK_CUR:\\n                dir = std::ios_base::cur;\\n                break;\\n            case SEEK_END:\\n                dir = std::ios_base::end;\\n                break;\\n            default:\\n                return -1;\\n        }\\n        stream->seekg(off, dir);\\n        return stream->tellg();\\n    };\\n\\n    // Custom close function for TIFFClientOpen\\n    auto close_func = [](thandle_t handle) -> int {\\n        // No action needed for closing the stream\\n        return 0;\\n    };\\n\\n    // Custom size function for TIFFClientOpen\\n    auto size_func = [](thandle_t handle) -> toff_t {\\n        std::istringstream* stream = static_cast<std::istringstream*>(handle);\\n        auto current_pos = stream->tellg();\\n        stream->seekg(0, std::ios::end);\\n        auto size = stream->tellg();\\n        stream->seekg(current_pos);\\n        return size;\\n    };\\n\\n    // Create a memory stream from the tiff_data\\n    std::istringstream tiff_stream(std::string(tiff_data.begin(), tiff_data.end()));\\n\\n    // Open the TIFF file with custom I/O functions\\n    TIFF* tif = TIFFClientOpen(\"MemTIFF\", \"r\", &tiff_stream, read_func, read_func, seek_func, close_func, size_func, nullptr, nullptr);\\n    if (!tif) {\\n        return 0;\\n    }\\n\\n    // Consume a uint64_t value for the subdirectory offset\\n    uint64_t subdir_offset = fuzzed_data.ConsumeIntegral<uint64_t>();\\n\\n    // Call the function-under-test\\n    int result = TIFFSetSubDirectory(tif, subdir_offset);\\n\\n    // Clean up\\n    TIFFClose(tif);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}