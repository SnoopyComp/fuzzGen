{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.02",
        "coverage_diff": "0.004045649417305718",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Generate a random filename and mode using fuzzed data\\n    std::string filename = fuzzed_data.ConsumeRandomLengthString(100);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure the strings are null-terminated\\n    filename += '\\0';\\n    mode += '\\0';\\n\\n    // Call the function-under-test\\n    TIFF *tif = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // If TIFFOpen succeeded, close the TIFF file\\n    if (tif != nullptr) {\\n        TIFFClose(tif);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.87",
        "coverage_diff": "0.003099651792363585",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the fuzzing input\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a string for the file name (max length 256 to avoid excessive length)\\n    std::string filename = fuzzed_data.ConsumeBytesAsString(fuzzed_data.ConsumeIntegralInRange<size_t>(1, 256));\\n\\n    // Consume a string for the mode (max length 10 to avoid excessive length)\\n    std::string mode = fuzzed_data.ConsumeBytesAsString(fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10));\\n\\n    // Ensure the strings are null-terminated\\n    const char *filename_cstr = filename.c_str();\\n    const char *mode_cstr = mode.c_str();\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFOpen(filename_cstr, mode_cstr);\\n\\n    // If TIFFOpen returns a non-null pointer, close it to avoid resource leaks\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}