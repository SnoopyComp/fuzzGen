{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.61",
        "coverage_diff": "0.0028782480929090432",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <unistd.h>\\n\\n// Ensure that we include the header where TIFFOpenOptions is fully defined\\n#include <tiffio.hxx>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the provided data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume data to create parameters for TIFFFdOpenExt\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(256);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(8);\\n\\n    // Initialize TIFFOpenOptions object\\n    TIFFOpenOptions *options = TIFFOpenOptionsAlloc();\\n    if (options) {\\n        // Call the function-under-test\\n        TIFF *tiff = TIFFFdOpenExt(fd, name.c_str(), mode.c_str(), options);\\n\\n        // If tiff is not NULL, close it\\n        if (tiff) {\\n            TIFFClose(tiff);\\n        }\\n\\n        // Free the TIFFOpenOptions object\\n        TIFFOpenOptionsFree(options);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.64",
        "coverage_diff": "0.0028983757019503654",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <string>\\n#include <tiffio.hxx>  // Include the TIFF C++ interface\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume integral values for file descriptor and open mode\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n    std::string mode = fuzzed_data.ConsumeBytesAsString(fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10));\\n\\n    // Consume strings for file name and mode\\n    std::string filename = fuzzed_data.ConsumeRandomLengthString(100);\\n\\n    // Create TIFFOpenOptions object\\n    TIFFOpenOptions *options = TIFFOpenOptionsAlloc();\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpenExt(fd, filename.c_str(), mode.c_str(), options);\\n\\n    // If the TIFF object is successfully created, close it\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Free the TIFFOpenOptions object\\n    TIFFOpenOptionsFree(options);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}