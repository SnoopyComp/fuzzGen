{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "8.95",
        "coverage_diff": "0.00599802749431395",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <unistd.h>\\n#include <fcntl.h>\\n#include <vector>\\n#include <string.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a temporary file to use as the file descriptor\\n    char temp_filename[] = \"/tmp/tiff_fuzz_XXXXXX\";\\n    int fd = mkstemp(temp_filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write the fuzzed data to the temporary file\\n    std::vector<uint8_t> file_data = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n    if (write(fd, file_data.data(), file_data.size()) == -1) {\\n        close(fd);\\n        unlink(temp_filename);\\n        return 0;\\n    }\\n\\n    // Seek back to the beginning of the file\\n    lseek(fd, 0, SEEK_SET);\\n\\n    // Consume strings for the mode and name arguments, ensuring they are valid\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(20);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure the strings are null-terminated and valid\\n    if (name.empty()) {\\n        name = \"default_name\";\\n    }\\n    if (mode.empty()) {\\n        mode = \"r\";\\n    } else {\\n        // Ensure mode contains valid characters only\\n        const char *valid_modes = \"rwa+\";\\n        mode.erase(std::remove_if(mode.begin(), mode.end(), \\n            [valid_modes](char c) { return strchr(valid_modes, c) == nullptr; }), mode.end());\\n        if (mode.empty()) {\\n            mode = \"r\";\\n        }\\n    }\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n    // Clean up\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n    close(fd);\\n    unlink(temp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "8.97",
        "coverage_diff": "0.006018155103355272",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <unistd.h>\\n#include <fcntl.h>\\n#include <vector>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a temporary file to use as the file descriptor\\n    char tmp_filename[] = \"/tmp/fuzz-tiff-XXXXXX\";\\n    int fd = mkstemp(tmp_filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write some data to the temporary file\\n    std::vector<uint8_t> file_data = fuzzed_data.ConsumeBytes<uint8_t>(fuzzed_data.remaining_bytes());\\n    write(fd, file_data.data(), file_data.size());\\n\\n    // Reset the file offset to the beginning\\n    lseek(fd, 0, SEEK_SET);\\n\\n    // Consume strings for the mode and name parameters\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(20);\\n    if (name.empty()) {\\n        name = \"default.tiff\";\\n    }\\n\\n    // Constrain mode to valid TIFF modes\\n    const char *valid_modes[] = {\"r\", \"w\", \"a\", \"r+\", \"w+\", \"a+\"};\\n    std::string mode = valid_modes[fuzzed_data.ConsumeIntegralInRange<int>(0, 5)];\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n    // Clean up\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n    close(fd);\\n    unlink(tmp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}