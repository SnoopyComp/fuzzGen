{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.20",
        "coverage_diff": "0.004246925507718938",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <vector>\\n#include <cstdio> // For temporary file creation\\n#include <unistd.h> // For write and close functions\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a string for the mode\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure the mode string is not empty and has a valid mode character\\n    if (mode.empty() || (mode.find_first_of(\"rwa+\") == std::string::npos)) {\\n        return 0;\\n    }\\n\\n    // Create a temporary file for the filename\\n    char temp_filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n    int fd = mkstemp(temp_filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write fuzzed data to the temporary file\\n    std::vector<uint8_t> file_data = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n    if (!file_data.empty()) {\\n        write(fd, file_data.data(), file_data.size());\\n    }\\n    close(fd);\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFOpen(temp_filename, mode.c_str());\\n\\n    // If TIFFOpen succeeded, close the TIFF file\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Remove the temporary file\\n    std::remove(temp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.08",
        "coverage_diff": "0.0034820763641487027",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <fstream>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a string for the file name\\n    std::string filename = \"/tmp/\" + fuzzed_data.ConsumeRandomLengthString(100);\\n\\n    // Consume a string for the mode\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure the mode string is not empty and has a valid mode character\\n    if (mode.empty() || (mode.find_first_of(\"rwa+\") == std::string::npos)) {\\n        return 0;\\n    }\\n\\n    // Create a temporary file to ensure the filename exists\\n    std::ofstream temp_file(filename);\\n    temp_file.close();\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // If TIFFOpen succeeded, close the TIFF file\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Remove the temporary file\\n    std::remove(filename.c_str());\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}