{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "8.96",
        "coverage_diff": "0.006038282712396595",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdio>\\n#include <vector>\\n#include <string>\\n#include <unistd.h>     // For mkstemp, write, close, lseek, and unlink\\n#include <fcntl.h>      // For file control options\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a temporary file to simulate file descriptor input\\n    char temp_filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n    int fd = mkstemp(temp_filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write fuzz data to the temporary file\\n    std::vector<uint8_t> file_data = fuzzed_data.ConsumeBytes<uint8_t>(size);\\n    if (write(fd, file_data.data(), file_data.size()) == -1) {\\n        close(fd);\\n        unlink(temp_filename);\\n        return 0;\\n    }\\n\\n    // Reset file descriptor to the beginning of the file\\n    lseek(fd, 0, SEEK_SET);\\n\\n    // Generate other parameters for TIFFFdOpen\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(20);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(5);\\n\\n    // Ensure mode is not empty and has valid characters for file mode\\n    if (mode.empty() || mode.find_first_not_of(\"rwb+\") != std::string::npos) {\\n        mode = \"r\";  // Default to read mode\\n    }\\n\\n    // Call the function-under-test\\n    TIFF* tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n    // Perform any necessary cleanup\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n\\n    close(fd);\\n    unlink(temp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.73",
        "coverage_diff": "0.004448201598132158",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdio>\\n#include <vector>\\n#include <string>\\n#include <unistd.h> // for close, unlink, lseek, write, mkstemp\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a temporary file to simulate file descriptor operations\\n    char temp_filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n    int fd = mkstemp(temp_filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Consume a string for the file name\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(100);\\n\\n    // Consume a string for the mode\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure the mode string is not empty and has a valid mode character\\n    if (mode.empty() || (mode.find_first_of(\"rwa+\") == std::string::npos)) {\\n        close(fd);\\n        return 0;\\n    }\\n\\n    // Write fuzz data to the temporary file\\n    std::vector<uint8_t> file_data = fuzzed_data.ConsumeBytes<uint8_t>(size);\\n    if (write(fd, file_data.data(), file_data.size()) == -1) {\\n        close(fd);\\n        return 0;\\n    }\\n\\n    // Reset file descriptor to the beginning of the file\\n    lseek(fd, 0, SEEK_SET);\\n\\n    // Call the function-under-test\\n    TIFF* tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n    // If TIFF* is not null, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Clean up\\n    close(fd);\\n    unlink(temp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}