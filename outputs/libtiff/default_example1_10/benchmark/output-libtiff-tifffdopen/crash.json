{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.19",
        "coverage_diff": "0.004448201598132158",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <unistd.h>\\n#include <fcntl.h>\\n#include <vector>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Consume an integer for the file descriptor\\n    int fd = stream.ConsumeIntegral<int>();\\n\\n    // Consume strings for the mode and name\\n    std::string name = stream.ConsumeRandomLengthString(100);\\n    std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n    // Create a temporary file\\n    int tmp_fd = open(\"/tmp/fuzz_tiff_file\", O_RDWR | O_CREAT | O_TRUNC, 0666);\\n    if (tmp_fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write the fuzz data to the temporary file\\n    write(tmp_fd, data, size);\\n\\n    // Seek back to the beginning of the file\\n    lseek(tmp_fd, 0, SEEK_SET);\\n\\n    // Call the function-under-test\\n    TIFF* tiff = TIFFFdOpen(tmp_fd, name.c_str(), mode.c_str());\\n\\n    // If the TIFF object was successfully created, close it\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Close and remove the temporary file\\n    close(tmp_fd);\\n    unlink(\"/tmp/fuzz_tiff_file\");\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.80",
        "coverage_diff": "0.003139907010446229",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n#include <unistd.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Create a temporary file\\n  char tmpfile[] = \"/tmp/fuzz-XXXXXX\";\\n  int fd = mkstemp(tmpfile);\\n  if (fd == -1) {\\n    return 0;\\n  }\\n\\n  // Write fuzz data to the temporary file\\n  if (write(fd, data, size) != static_cast<ssize_t>(size)) {\\n    close(fd);\\n    unlink(tmpfile);\\n    return 0;\\n  }\\n\\n  // Reset file offset to the beginning\\n  lseek(fd, 0, SEEK_SET);\\n\\n  // Generate mode strings\\n  std::string mode1 = provider.ConsumeRandomLengthString(10);\\n  std::string mode2 = provider.ConsumeRandomLengthString(10);\\n\\n  // Call the function under test\\n  TIFF *tiff = TIFFFdOpen(fd, tmpfile, mode1.c_str());\\n\\n  // Clean up\\n  if (tiff) {\\n    TIFFClose(tiff);\\n  }\\n  close(fd);\\n  unlink(tmpfile);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}