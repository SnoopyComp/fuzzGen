{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.85",
        "coverage_diff": "0.003401565927983415",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume an integer for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume a string for the mode\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Consume a string for the name\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(20);\\n\\n    // Allocate and initialize TIFFOpenOptions\\n    TIFFOpenOptions *options = TIFFOpenOptionsAlloc();\\n    if (options == nullptr) {\\n        return 0;\\n    }\\n\\n    // Call the function-under-test\\n    TIFF *tif = TIFFFdOpenExt(fd, name.c_str(), mode.c_str(), options);\\n\\n    // If TIFF object is created, close it\\n    if (tif != nullptr) {\\n        TIFFClose(tif);\\n    }\\n\\n    TIFFOpenOptionsFree(options);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.62",
        "coverage_diff": "0.004528712034297446",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume an integer for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume a string for the name\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(100);\\n    const char *name_cstr = name.c_str();\\n\\n    // Consume a string for the mode\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n    const char *mode_cstr = mode.c_str();\\n\\n    // Create a temporary file to use with TIFFOpen\\n    FILE *tmpfile = std::tmpfile();\\n    if (!tmpfile) {\\n        return 0; // If we can't create a temp file, just return\\n    }\\n\\n    // Get the file descriptor of the temporary file\\n    int tmp_fd = fileno(tmpfile);\\n\\n    // Write the fuzzed data to the temporary file\\n    fwrite(data, 1, size, tmpfile);\\n    fflush(tmpfile);\\n    fseek(tmpfile, 0, SEEK_SET);\\n\\n    // Create TIFFOpenOptions\\n    TIFFOpenOptions *opts = TIFFOpenOptionsAlloc();\\n    if (!opts) {\\n        fclose(tmpfile);\\n        return 0;\\n    }\\n\\n    // Call the function-under-test\\n    TIFF *tif = TIFFFdOpenExt(tmp_fd, name_cstr, mode_cstr, opts);\\n\\n    // If the function returns a valid TIFF pointer, close it\\n    if (tif != nullptr) {\\n        TIFFClose(tif);\\n    }\\n\\n    // Clean up TIFFOpenOptions\\n    TIFFOpenOptionsFree(opts);\\n\\n    // Close and delete the temporary file\\n    fclose(tmpfile);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}