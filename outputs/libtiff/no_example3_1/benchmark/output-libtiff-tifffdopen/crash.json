{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.02",
        "coverage_diff": "0.0037034800636032445",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <unistd.h>\\n#include <fcntl.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the fuzzed data provider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume an integer for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume strings for the filename and mode\\n    std::string filename = fuzzed_data.ConsumeRandomLengthString(256);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure the filename and mode are not empty\\n    if (filename.empty()) {\\n        filename = \"default.tiff\";\\n    }\\n    if (mode.empty()) {\\n        mode = \"r\";\\n    }\\n\\n    // Open a temporary file to get a valid file descriptor\\n    int temp_fd = open(\"/tmp/fuzz_temp.tiff\", O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);\\n    if (temp_fd == -1) {\\n        return 0;\\n    }\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(temp_fd, filename.c_str(), mode.c_str());\\n\\n    // Close the TIFF file if it was successfully opened\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Close the temporary file descriptor\\n    close(temp_fd);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.16",
        "coverage_diff": "0.003139907010446229",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <unistd.h>\\n#include <fcntl.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume data for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume data for the file name\\n    std::string file_name = fuzzed_data.ConsumeBytesAsString(fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100));\\n\\n    // Consume data for the mode\\n    std::string mode = fuzzed_data.ConsumeBytesAsString(fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10));\\n\\n    // Ensure file descriptor is valid by opening a temporary file\\n    int temp_fd = open(\"/dev/null\", O_RDWR);\\n    if (temp_fd == -1) {\\n        return 0;\\n    }\\n\\n    // Duplicate the temporary file descriptor to the fuzzed file descriptor\\n    if (dup2(temp_fd, fd) == -1) {\\n        close(temp_fd);\\n        return 0;\\n    }\\n\\n    // Call the function under test\\n    TIFF *tif = TIFFFdOpen(fd, file_name.c_str(), mode.c_str());\\n\\n    // Clean up\\n    if (tif) {\\n        TIFFClose(tif);\\n    }\\n    close(fd);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}