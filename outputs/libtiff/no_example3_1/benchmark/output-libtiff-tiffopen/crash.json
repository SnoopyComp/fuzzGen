{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.04",
        "coverage_diff": "0.0040657770263470405",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstring>\\n#include <string>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the fuzzed data provider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a string for the filename\\n    std::string filename = fuzzed_data.ConsumeRandomLengthString(100);\\n    if (filename.empty()) {\\n        filename = \"default.tiff\"; // Ensure filename is not empty\\n    }\\n\\n    // Consume a string for the mode\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n    if (mode.empty()) {\\n        mode = \"r\"; // Ensure mode is not empty\\n    }\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // If tiff is not null, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.93",
        "coverage_diff": "0.0038242457178511765",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdio>\\n#include <cstring>\\n#include <tiffio.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a random length string for the filename\\n    std::string filename = fuzzed_data.ConsumeRandomLengthString(256);\\n    \\n    // Ensure filename is not empty\\n    if (filename.empty()) {\\n        filename = \"default.tiff\";\\n    }\\n\\n    // Consume a random length string for the mode\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n    \\n    // Ensure mode is not empty and set a default mode if necessary\\n    if (mode.empty()) {\\n        mode = \"r\";\\n    }\\n\\n    // Open the TIFF file with the fuzzed filename and mode\\n    TIFF *tiff = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // If the TIFF file was successfully opened, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}