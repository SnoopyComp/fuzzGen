{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.81",
        "coverage_diff": "0.003200289837570195",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume an integer for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume a string for the mode (e.g., \"r\", \"w\", etc.)\\n    std::string mode = fuzzed_data.ConsumeBytesAsString(2); // Mode strings are typically short\\n\\n    // Consume a string for the name\\n    std::string name = fuzzed_data.ConsumeRemainingBytesAsString();\\n\\n    // Ensure that the mode string is null-terminated\\n    if (mode.size() < 1) {\\n        mode = \"r\"; // Default to read mode if mode string is empty\\n    }\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n    // If the function returns a valid TIFF pointer, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.53",
        "coverage_diff": "0.002053016122214842",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the fuzzed data provider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume an integer for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume strings for the file name and mode\\n    std::string file_name = fuzzed_data.ConsumeRandomLengthString(100);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure that strings are not empty\\n    if (file_name.empty()) {\\n        file_name = \"default.tiff\";\\n    }\\n    if (mode.empty()) {\\n        mode = \"r\";\\n    }\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(fd, file_name.c_str(), mode.c_str());\\n\\n    // If the TIFF object is created, close it to avoid resource leaks\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}