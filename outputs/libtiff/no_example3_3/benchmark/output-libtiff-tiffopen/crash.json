{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.89",
        "coverage_diff": "0.0036632248455206007",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <tiffio.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a string for the filename argument\\n    std::string filename = fuzzed_data.ConsumeRandomLengthString(100);\\n\\n    // Consume a string for the mode argument\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure the strings are null-terminated\\n    filename += '\\0';\\n    mode += '\\0';\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // If the TIFF pointer is valid, close the TIFF file\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.00",
        "coverage_diff": "0.0038846285449751425",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a string for the file name\\n    std::string filename = fuzzed_data.ConsumeRandomLengthString(100);\\n\\n    // Consume a string for the mode\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure the strings are null-terminated\\n    filename.push_back('\\0');\\n    mode.push_back('\\0');\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // If TIFFOpen succeeded, close the TIFF file\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}