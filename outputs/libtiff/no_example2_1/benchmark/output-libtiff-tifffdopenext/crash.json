{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.64",
        "coverage_diff": "0.003099651792363585",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <tiffio.hxx>  // Include the header that defines TIFFOpenOptions\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the provided data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume an integer for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume a string for the mode\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Consume a string for the name\\n    std::string name = fuzzed_data.ConsumeRandomLengthString(256);\\n\\n    // Allocate and initialize TIFFOpenOptions\\n    TIFFOpenOptions *options = TIFFOpenOptionsAlloc();\\n    if (!options) {\\n        return 0;\\n    }\\n    // Initialize TIFFOpenOptions with some default values\\n    TIFFOpenOptionsSetMaxSingleMemAlloc(options, fuzzed_data.ConsumeIntegral<uint32_t>());\\n\\n    // Call the function-under-test\\n    TIFF *tif = TIFFFdOpenExt(fd, name.c_str(), mode.c_str(), options);\\n\\n    // If the TIFF object was successfully created, close it\\n    if (tif) {\\n        TIFFClose(tif);\\n    }\\n\\n    // Free the allocated memory for TIFFOpenOptions\\n    TIFFOpenOptionsFree(options);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.56",
        "coverage_diff": "0.0028782480929090432",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n\\n// Include the required header for TIFFOpenOptions\\n#include \"/work/include/tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume an integer for the file descriptor\\n    int fd = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume a string for the mode\\n    std::string mode = fuzzed_data.ConsumeBytesAsString(fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10));\\n\\n    // Consume a string for the name\\n    std::string name = fuzzed_data.ConsumeBytesAsString(fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100));\\n\\n    // Create a TIFFOpenOptions object\\n    TIFFOpenOptions *options = TIFFOpenOptionsAlloc();\\n\\n    // Create a TIFF object using the TIFFFdOpenExt function\\n    TIFF *tiff = TIFFFdOpenExt(fd, name.c_str(), mode.c_str(), options);\\n\\n    // If the TIFF object was created, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Free the TIFFOpenOptions object\\n    TIFFOpenOptionsFree(options);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}