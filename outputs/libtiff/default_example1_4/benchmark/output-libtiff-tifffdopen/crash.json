{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "8.96",
        "coverage_diff": "0.006018155103355272",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <unistd.h>\\n#include <fcntl.h>\\n#include <vector>\\n#include <string>\\n#include <cstring>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 4) {\\n    // Not enough data to be a valid TIFF file\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create temporary file\\n  char temp_filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n  int fd = mkstemp(temp_filename);\\n  if (fd == -1) {\\n    return 0;\\n  }\\n\\n  // Write fuzz data to the temporary file\\n  std::vector<uint8_t> file_data = stream.ConsumeBytes<uint8_t>(size);\\n  if (write(fd, file_data.data(), file_data.size()) != static_cast<ssize_t>(file_data.size())) {\\n    close(fd);\\n    unlink(temp_filename);\\n    return 0;\\n  }\\n\\n  // Rewind the file descriptor\\n  if (lseek(fd, 0, SEEK_SET) == -1) {\\n    close(fd);\\n    unlink(temp_filename);\\n    return 0;\\n  }\\n\\n  // Consume strings for mode and name\\n  std::string mode = \"r\";  // Use a fixed mode that makes sense for reading TIFF files\\n  std::string name = stream.ConsumeRandomLengthString(10);\\n  if (name.empty()) {\\n    name = \"fuzz_tiff\";\\n  }\\n\\n  // Call the function under test\\n  TIFF *tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n  // Clean up\\n  if (tiff) {\\n    TIFFClose(tiff);\\n  }\\n  close(fd);\\n  unlink(temp_filename);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "3.58",
        "coverage_diff": "0.004226797898677616",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a temporary file to use with TIFFFdOpen\\n  FILE* tmp_file = tmpfile();\\n  if (tmp_file == nullptr) {\\n    return 0;\\n  }\\n\\n  // Write the fuzzed data to the temporary file\\n  fwrite(data, 1, size, tmp_file);\\n  fflush(tmp_file);\\n  fseek(tmp_file, 0, SEEK_SET);\\n\\n  // Get the file descriptor\\n  int fd = fileno(tmp_file);\\n\\n  // Consume strings for mode and name\\n  std::string name = stream.ConsumeRandomLengthString(100);\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Ensure mode string is not empty and contains valid TIFF mode characters\\n  if (mode.empty()) {\\n    mode = \"r\";\\n  }\\n\\n  TIFF* tif = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n  if (tif != nullptr) {\\n    TIFFClose(tif);\\n  }\\n\\n  fclose(tmp_file);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}