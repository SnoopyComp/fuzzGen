{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.80",
        "coverage_diff": "0.003341183100859449",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Generate file name and mode\\n  std::string fileName = stream.ConsumeRandomLengthString(20);\\n  std::string mode = stream.PickValueInArray({\"r\", \"w\", \"a\"});\\n\\n  // Create TIFFOpenOptions object\\n  TIFFOpenOptions* options = TIFFOpenOptionsAlloc();\\n  if (options == nullptr) {\\n    return 0;\\n  }\\n\\n  // Set some options if needed\\n  // Example: TIFFOpenOptionsSetMaxMemoryUsage(options, stream.ConsumeIntegral<uint64_t>());\\n\\n  // Call TIFFOpenExt\\n  TIFF* tiff = TIFFOpenExt(fileName.c_str(), mode.c_str(), options);\\n\\n  // Cleanup\\n  if (tiff != nullptr) {\\n    TIFFClose(tiff);\\n  }\\n  TIFFOpenOptionsFree(options);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.02",
        "coverage_diff": "0.0041865426805949724",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Generate random strings for the filename and mode\\n  std::string filename = stream.ConsumeRandomLengthString(100);\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Create a TIFFOpenOptions object\\n  TIFFOpenOptions* options = TIFFOpenOptionsAlloc();\\n  if (options == nullptr) {\\n    return 0;\\n  }\\n\\n  // Call the function-under-test\\n  TIFF* tiff = TIFFOpenExt(filename.c_str(), mode.c_str(), options);\\n\\n  // Clean up\\n  if (tiff != nullptr) {\\n    TIFFClose(tiff);\\n  }\\n  TIFFOpenOptionsFree(options);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}