{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <vector>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a temporary file\\n  char tmp_filename[] = \"/tmp/fuzz-tiff-XXXXXX\";\\n  int fd = mkstemp(tmp_filename);\\n  if (fd == -1) {\\n    return 0;\\n  }\\n\\n  // Write fuzz data to the temporary file\\n  std::vector<uint8_t> file_data = stream.ConsumeBytes<uint8_t>(size);\\n  if (write(fd, file_data.data(), file_data.size()) == -1) {\\n    close(fd);\\n    unlink(tmp_filename);\\n    return 0;\\n  }\\n\\n  // Reset file descriptor offset to the beginning\\n  lseek(fd, 0, SEEK_SET);\\n\\n  // Generate other parameters\\n  const std::string mode = stream.ConsumeRandomLengthString(10);\\n  const std::string name = stream.ConsumeRandomLengthString(10);\\n\\n  // Call the function-under-test\\n  TIFF *tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n  // Clean up\\n  if (tiff) {\\n    TIFFClose(tiff);\\n  }\\n  close(fd);\\n  unlink(tmp_filename);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <unistd.h>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a temporary file to use as a file descriptor\\n    char temp_filename[] = \"/tmp/tiff_fuzz_XXXXXX\";\\n    int fd = mkstemp(temp_filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write fuzz data to the temporary file\\n    write(fd, data, size);\\n    lseek(fd, 0, SEEK_SET);  // Reset file descriptor to the beginning\\n\\n    // Generate input parameters for TIFFFdOpenExt\\n    std::string mode = stream.ConsumeRandomLengthString(3); // Mode string (e.g., \"r\", \"w\", \"a\")\\n    std::string name = stream.ConsumeRandomLengthString(10); // Arbitrary name\\n\\n    // Generate TIFFOpenOptions (using default options for simplicity)\\n    TIFFOpenOptions *options = nullptr;\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n    // Clean up\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n    close(fd);\\n    unlink(temp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}