{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate a filename and mode string\\n    std::string filename = stream.ConsumeRandomLengthString(20);\\n    std::string mode = stream.ConsumeRandomLengthString(5);\\n\\n    // Create a TIFFOpenOptions object\\n    TIFFOpenOptions* options = TIFFOpenOptionsAlloc();\\n\\n    // Call TIFFOpenExt with the generated parameters\\n    TIFF* tiff = TIFFOpenExt(filename.c_str(), mode.c_str(), options);\\n\\n    // If tiff is not null, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Free the TIFFOpenOptions object\\n    TIFFOpenOptionsFree(options);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate the filename and mode strings\\n    std::string filename = stream.ConsumeRandomLengthString(100);\\n    std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n    // Ensure filename and mode are not empty\\n    if (filename.empty()) {\\n        filename = \"default.tiff\";\\n    }\\n    if (mode.empty()) {\\n        mode = \"r\";\\n    }\\n\\n    // Call the function-under-test\\n    TIFF* tif = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // If the function returns a valid pointer, close the TIFF to free resources\\n    if (tif != nullptr) {\\n        TIFFClose(tif);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}