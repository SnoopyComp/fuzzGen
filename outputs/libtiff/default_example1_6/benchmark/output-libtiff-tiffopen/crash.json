{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.84",
        "coverage_diff": "0.003381438318942093",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n#include <tiffio.h>\\n#include <cstdio> // For std::tmpnam\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Consume a random length string for the mode\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Ensure the mode string is not empty and contains valid mode characters\\n  if (mode.empty()) {\\n    mode = \"r\";\\n  }\\n\\n  // Create a temporary file name\\n  char filename[L_tmpnam];\\n  std::tmpnam(filename);\\n\\n  // Write the data to the temporary file\\n  FILE* file = std::fopen(filename, \"wb\");\\n  if (file != nullptr) {\\n    std::fwrite(data, 1, size, file);\\n    std::fclose(file);\\n  } else {\\n    return 0; // If we can't open a file, exit early\\n  }\\n\\n  // Call TIFFOpen with the fuzzed inputs\\n  TIFF* tiff = TIFFOpen(filename, mode.c_str());\\n\\n  // If the TIFF file was successfully opened, close it\\n  if (tiff != nullptr) {\\n    TIFFClose(tiff);\\n  }\\n\\n  // Clean up the temporary file\\n  std::remove(filename);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.98",
        "coverage_diff": "0.003985266590181752",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Generate a random filename and mode string.\\n  std::string filename = stream.ConsumeRandomLengthString(10);\\n  std::string mode = stream.ConsumeRandomLengthString(5);\\n\\n  // Ensure the mode string is not empty and contains valid characters.\\n  if (mode.empty()) {\\n    mode = \"r\";\\n  }\\n\\n  // Ensure the filename is not empty\\n  if (filename.empty()) {\\n    filename = \"default.tiff\";\\n  }\\n\\n  // Call TIFFOpen with the generated filename and mode.\\n  TIFF* tif = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n  // If TIFFOpen succeeded, close the TIFF file.\\n  if (tif != nullptr) {\\n    TIFFClose(tif);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}