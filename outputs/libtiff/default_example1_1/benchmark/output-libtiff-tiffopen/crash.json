{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.87",
        "coverage_diff": "0.003180162228528873",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  // Generate a random filename and mode for TIFFOpen\\n  std::string filename = fuzzed_data.ConsumeRandomLengthString(100);\\n  std::string mode = fuzzed_data.PickValueInArray({\"r\", \"w\", \"a\", \"r+\"});\\n\\n  // Call TIFFOpen with the generated filename and mode\\n  TIFF* tiff = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n  // If TIFFOpen returns a valid pointer, close it\\n  if (tiff != nullptr) {\\n    TIFFClose(tiff);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.81",
        "coverage_diff": "0.003180162228528873",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate a random filename and mode for TIFFOpen\\n    std::string filename = stream.ConsumeRandomLengthString(20);\\n    std::string mode = stream.PickValueInArray({\"r\", \"w\", \"a\", \"r+\", \"w+\", \"a+\"});\\n\\n    // Ensure the strings are null-terminated\\n    filename.push_back('\\0');\\n    mode.push_back('\\0');\\n\\n    // Call TIFFOpen with the generated filename and mode\\n    TIFF *tif = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // If the file was successfully opened, close it\\n    if (tif != nullptr) {\\n        TIFFClose(tif);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}