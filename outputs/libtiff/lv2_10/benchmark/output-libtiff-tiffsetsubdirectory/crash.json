{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "9.33",
        "coverage_diff": "0.009258700159008112",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <sstream>\\n#include <cstdio>\\n#include <vector>\\n#include <cstdarg>\\n#include <cstring>\\n\\nextern \"C\" void handle_error(const char *unused, const char *unused2, va_list unused3) { return; }\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n#ifndef STANDALONE\\n  TIFFSetErrorHandler(handle_error);\\n  TIFFSetWarningHandler(handle_error);\\n#endif\\n  if (size < 8) {\\n    // Not enough data to consume an integral and do meaningful work\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  std::vector<uint8_t> buffer(data, data + size);\\n  std::istringstream s(std::string(reinterpret_cast<const char*>(data), size));\\n  FILE* tmpFile = tmpfile();\\n  if (!tmpFile) {\\n    return 0;\\n  }\\n\\n  fwrite(buffer.data(), 1, buffer.size(), tmpFile);\\n  rewind(tmpFile);\\n\\n  TIFF *tif = TIFFFdOpen(fileno(tmpFile), \"MemTIFF\", \"r\");\\n  if (!tif) {\\n    fclose(tmpFile);\\n    return 0;\\n  }\\n\\n  uint64_t subdir_offset = stream.ConsumeIntegral<uint64_t>();\\n  int result = TIFFSetSubDirectory(tif, subdir_offset);\\n\\n  TIFFClose(tif);\\n  fclose(tmpFile);\\n  return result;\\n}\\n\\n#ifdef STANDALONE\\n\\ntemplate <class T> static void CPL_IGNORE_RET_VAL(T) {}\\n\\nstatic void Usage(int, char *argv[]) {\\n  fprintf(stderr, \"%s [--help] [-repeat N] filename.\\\n\", argv[0]);\\n  exit(1);\\n}\\n\\nint main(int argc, char *argv[]) {\\n  int nRet = 0;\\n  void *buf = NULL;\\n  int nLen = 0;\\n  int nLoops = 1;\\n  const char *pszFilename = NULL;\\n\\n  for (int i = 1; i < argc; i++) {\\n    if (i + 1 < argc && strcmp(argv[i], \"-repeat\") == 0) {\\n      nLoops = atoi(argv[i + 1]);\\n      i++;\\n    } else if (strcmp(argv[i], \"-dummy\") == 0) {\\n      uint8_t dummy = ' ';\\n      return LLVMFuzzerTestOneInput(&dummy, 1);\\n    } else if (strcmp(argv[i], \"--help\") == 0) {\\n      Usage(argc, argv);\\n    } else if (argv[i][0] == '-') {\\n      fprintf(stderr, \"Unrecognized option: %s\", argv[i]);\\n      Usage(argc, argv);\\n    } else {\\n      pszFilename = argv[i];\\n    }\\n  }\\n  if (pszFilename == nullptr) {\\n    fprintf(stderr, \"No filename specified\\\n\");\\n    Usage(argc, argv);\\n  }\\n  FILE *f = fopen(pszFilename, \"rb\");\\n  if (!f) {\\n    fprintf(stderr, \"%s does not exist.\\\n\", pszFilename);\\n    exit(1);\\n  }\\n  fseek(f, 0, SEEK_END);\\n  nLen = (int)ftell(f);\\n  fseek(f, 0, SEEK_SET);\\n  buf = malloc(nLen);\\n  if (!buf) {\\n    fprintf(stderr, \"malloc failed.\\\n\");\\n    fclose(f);\\n    exit(1);\\n  }\\n  CPL_IGNORE_RET_VAL(fread(buf, nLen, 1, f));\\n  fclose(f);\\n  for (int i = 0; i < nLoops; i++) {\\n    nRet = LLVMFuzzerTestOneInput(static_cast<const uint8_t *>(buf), nLen);\\n    if (nRet != 0)\\n      break;\\n  }\\n  free(buf);\\n  return nRet;\\n}\\n\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "9.35",
        "coverage_diff": "0.00923857254996679",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <sstream>\\n#include <cstdio>\\n#include <vector>\\n\\nextern \"C\" void handle_error(const char *unused, const char *unused2, va_list unused3) { return; }\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n#ifndef STANDALONE\\n  TIFFSetErrorHandler(handle_error);\\n  TIFFSetWarningHandler(handle_error);\\n#endif\\n  if (size < 8) {\\n    // Not enough data to consume an integral and do meaningful work\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  std::vector<uint8_t> buffer(data, data + size);\\n  std::istringstream s(std::string(reinterpret_cast<const char*>(data), size));\\n  FILE* tmpFile = tmpfile();\\n  if (!tmpFile) {\\n    return 0;\\n  }\\n\\n  fwrite(buffer.data(), 1, buffer.size(), tmpFile);\\n  rewind(tmpFile);\\n\\n  TIFF *tif = TIFFFdOpen(fileno(tmpFile), \"MemTIFF\", \"r\");\\n  if (!tif) {\\n    fclose(tmpFile);\\n    return 0;\\n  }\\n\\n  uint64_t subdir_offset = stream.ConsumeIntegral<uint64_t>();\\n  TIFFSetSubDirectory(tif, subdir_offset);\\n\\n  TIFFClose(tif);\\n  fclose(tmpFile);\\n  return 0;\\n}\\n\\n#ifdef STANDALONE\\n\\ntemplate <class T> static void CPL_IGNORE_RET_VAL(T) {}\\n\\nstatic void Usage(int, char *argv[]) {\\n  fprintf(stderr, \"%s [--help] [-repeat N] filename.\\\n\", argv[0]);\\n  exit(1);\\n}\\n\\nint main(int argc, char *argv[]) {\\n  int nRet = 0;\\n  void *buf = NULL;\\n  int nLen = 0;\\n  int nLoops = 1;\\n  const char *pszFilename = NULL;\\n\\n  for (int i = 1; i < argc; i++) {\\n    if (i + 1 < argc && strcmp(argv[i], \"-repeat\") == 0) {\\n      nLoops = atoi(argv[i + 1]);\\n      i++;\\n    } else if (strcmp(argv[i], \"-dummy\") == 0) {\\n      uint8_t dummy = ' ';\\n      return LLVMFuzzerTestOneInput(&dummy, 1);\\n    } else if (strcmp(argv[i], \"--help\") == 0) {\\n      Usage(argc, argv);\\n    } else if (argv[i][0] == '-') {\\n      fprintf(stderr, \"Unrecognized option: %s\", argv[i]);\\n      Usage(argc, argv);\\n    } else {\\n      pszFilename = argv[i];\\n    }\\n  }\\n  if (pszFilename == nullptr) {\\n    fprintf(stderr, \"No filename specified\\\n\");\\n    Usage(argc, argv);\\n  }\\n  FILE *f = fopen(pszFilename, \"rb\");\\n  if (!f) {\\n    fprintf(stderr, \"%s does not exist.\\\n\", pszFilename);\\n    exit(1);\\n  }\\n  fseek(f, 0, SEEK_END);\\n  nLen = (int)ftell(f);\\n  fseek(f, 0, SEEK_SET);\\n  buf = malloc(nLen);\\n  if (!buf) {\\n    fprintf(stderr, \"malloc failed.\\\n\");\\n    fclose(f);\\n    exit(1);\\n  }\\n  CPL_IGNORE_RET_VAL(fread(buf, nLen, 1, f));\\n  fclose(f);\\n  for (int i = 0; i < nLoops; i++) {\\n    nRet = LLVMFuzzerTestOneInput(static_cast<const uint8_t *>(buf), nLen);\\n    if (nRet != 0)\\n      break;\\n  }\\n  free(buf);\\n  return nRet;\\n}\\n\\n#endif",
        "model": ""
    }

    ]
}