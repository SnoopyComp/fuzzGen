{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.00",
        "coverage_diff": "0.004085904635388362",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <vector>\\n#include <string>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Generate a filename string\\n    std::string filename = fuzzed_data.ConsumeRandomLengthString(256);\\n    if (filename.empty()) {\\n        filename = \"default.tif\";\\n    }\\n\\n    // Generate a mode string\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n    if (mode.empty()) {\\n        mode = \"r\";\\n    }\\n\\n    // Create TIFFOpenOptions object\\n    TIFFOpenOptions *options = TIFFOpenOptionsAlloc();\\n    if (options == nullptr) {\\n        return 0; // Allocation failed, exit early\\n    }\\n    // Populate options with some fuzzed data if necessary\\n    // For simplicity, we'll leave it as default\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFOpenExt(filename.c_str(), mode.c_str(), options);\\n\\n    // If TIFFOpenExt returns a valid TIFF pointer, close it\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Free the TIFFOpenOptions object\\n    TIFFOpenOptionsFree(options);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <string>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <tiffio.hxx>  // Ensure we have the full definition of TIFFOpenOptions\\n#include <tiffio.h>    // Include the header where TIFFOpenOptions is defined\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Generate a filename string\\n    std::string filename = fuzzed_data.ConsumeRandomLengthString(256);\\n    if (filename.empty()) {\\n        filename = \"default.tiff\";\\n    }\\n\\n    // Generate a mode string\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n    if (mode.empty()) {\\n        mode = \"r\";\\n    }\\n\\n    // Generate TIFFOpenOptions\\n    TIFFOpenOptions options;\\n    options.maxSingleMemAlloc = fuzzed_data.ConsumeIntegralInRange<uint64_t>(1, 1000000);\\n    options.maxMemAlloc = fuzzed_data.ConsumeIntegralInRange<uint64_t>(1, 1000000);\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFOpenExt(filename.c_str(), mode.c_str(), &options);\\n\\n    // Clean up if TIFF object was created\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}