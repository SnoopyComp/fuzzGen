{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.84",
        "coverage_diff": "0.005031902260330495",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstdio>\\n#include <string>\\n#include <vector>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Generate a filename and mode string\\n    std::string filename = fuzzed_data.ConsumeRandomLengthString(100);\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure filename and mode are not empty\\n    if (filename.empty() || mode.empty()) {\\n        return 0;\\n    }\\n\\n    // Create a temporary file to simulate file operations\\n    FILE *temp_file = fopen(filename.c_str(), \"wb+\");\\n    if (!temp_file) {\\n        return 0;\\n    }\\n\\n    // Write fuzz data to the temporary file\\n    fwrite(data, 1, size, temp_file);\\n    fflush(temp_file);\\n    fclose(temp_file);\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // Perform any necessary cleanup\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Remove the temporary file\\n    remove(filename.c_str());\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "8.96",
        "coverage_diff": "0.006239558802809814",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <vector>\\n#include <cstdio>\\n#include <unistd.h> // Include for write, close, and unlink\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Generate a filename and mode string\\n    std::string filename = \"/tmp/fuzz_tiff_XXXXXX\";\\n    int fd = mkstemp(&filename[0]);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write fuzz data to the temporary file\\n    std::vector<uint8_t> file_data = fuzzed_data.ConsumeBytes<uint8_t>(size);\\n    if (write(fd, file_data.data(), file_data.size()) == -1) {\\n        close(fd);\\n        unlink(filename.c_str());\\n        return 0;\\n    }\\n\\n    // Close the file descriptor to ensure TIFFOpen can open it properly\\n    close(fd);\\n\\n    // Generate a mode string\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(10);\\n\\n    // Ensure mode is not empty and has valid characters for file mode\\n    if (mode.empty() || mode.find_first_not_of(\"rwa+\") != std::string::npos) {\\n        mode = \"r\";  // Default to read mode\\n    }\\n\\n    // Call the function-under-test\\n    TIFF* tiff = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n    // Perform any necessary cleanup\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Remove the temporary file\\n    unlink(filename.c_str());\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}