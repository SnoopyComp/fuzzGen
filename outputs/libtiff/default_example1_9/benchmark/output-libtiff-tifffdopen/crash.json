{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.42",
        "coverage_diff": "0.004528712034297446",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n#include <unistd.h>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a temporary file\\n  char tmp_filename[] = \"/tmp/tiff_fuzz_XXXXXX\";\\n  int fd = mkstemp(tmp_filename);\\n  if (fd == -1) {\\n    return 0;\\n  }\\n\\n  // Write the fuzzed data to the temporary file\\n  if (write(fd, data, size) != static_cast<ssize_t>(size)) {\\n    close(fd);\\n    unlink(tmp_filename);\\n    return 0;\\n  }\\n\\n  // Reset the file descriptor to the beginning of the file\\n  lseek(fd, 0, SEEK_SET);\\n\\n  // Consume strings for the mode and name\\n  std::string name = stream.ConsumeRandomLengthString(10);\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Call the function under test\\n  TIFF *tif = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n  // Clean up\\n  if (tif) {\\n    TIFFClose(tif);\\n  }\\n  close(fd);\\n  unlink(tmp_filename);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.78",
        "coverage_diff": "0.003139907010446229",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n#include <unistd.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a temporary file to write the fuzz data\\n  char filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n  int fd = mkstemp(filename);\\n  if (fd == -1) {\\n    return 0;\\n  }\\n\\n  // Write the fuzz data to the temporary file\\n  if (write(fd, data, size) != static_cast<ssize_t>(size)) {\\n    close(fd);\\n    unlink(filename);\\n    return 0;\\n  }\\n\\n  // Reset the file offset to the beginning\\n  lseek(fd, 0, SEEK_SET);\\n\\n  // Consume strings for mode and name\\n  std::string mode = stream.ConsumeBytesAsString(3); // Mode can be \"r\", \"w\", \"a\" etc.\\n  std::string name = stream.ConsumeBytesAsString(20); // Name can be any string\\n\\n  // Call the function-under-test\\n  TIFF *tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n  // Clean up\\n  if (tiff != nullptr) {\\n    TIFFClose(tiff);\\n  }\\n  close(fd);\\n  unlink(filename);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}