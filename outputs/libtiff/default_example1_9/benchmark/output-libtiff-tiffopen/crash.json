{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.96",
        "coverage_diff": "0.0030795241833222633",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Generate a filename and mode string from the fuzzed data\\n  std::string filename = stream.ConsumeRandomLengthString(100);\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Ensure filename and mode are not empty\\n  if (filename.empty()) {\\n    filename = \"default.tiff\";\\n  }\\n  if (mode.empty()) {\\n    mode = \"r\";\\n  }\\n\\n  // Call the function-under-test\\n  TIFF *tiff = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n  // If the TIFF object was successfully created, close it\\n  if (tiff != nullptr) {\\n    TIFFClose(tiff);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.94",
        "coverage_diff": "0.003904756154016464",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  // Consume a string for the filename\\n  std::string filename = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange<size_t>(1, 100));\\n  \\n  // Consume a string for the mode\\n  std::string mode = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange<size_t>(1, 10));\\n  \\n  // Ensure the strings are null-terminated\\n  filename.push_back('\\0');\\n  mode.push_back('\\0');\\n  \\n  // Call the function-under-test\\n  TIFF *tiff = TIFFOpen(filename.c_str(), mode.c_str());\\n  \\n  // If the TIFF object was successfully created, close it\\n  if (tiff != nullptr) {\\n    TIFFClose(tiff);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}