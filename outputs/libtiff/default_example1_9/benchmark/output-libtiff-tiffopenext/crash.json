{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.56",
        "coverage_diff": "0.0015296982871404706",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Consume a string for the file name (max 256 characters)\\n  std::string filename = stream.ConsumeRandomLengthString(256);\\n\\n  // Consume a string for the mode (max 10 characters, typical modes are \"r\", \"w\", etc.)\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Create a TIFF object using TIFFClientOpen since TIFFOpenExt is not standard\\n  TIFF* tif = TIFFClientOpen(\\n    filename.c_str(), mode.c_str(),\\n    nullptr, // No custom I/O functions\\n    [](thandle_t, tdata_t, tsize_t) -> tsize_t { return 0; }, // Dummy read function\\n    [](thandle_t, tdata_t, tsize_t) -> tsize_t { return 0; }, // Dummy write function\\n    [](thandle_t, toff_t, int) -> toff_t { return 0; }, // Dummy seek function\\n    [](thandle_t) -> int { return 0; }, // Dummy close function\\n    [](thandle_t) -> toff_t { return 0; }, // Dummy size function\\n    [](thandle_t, tdata_t*, toff_t*) -> int { return 0; }, // Dummy map function\\n    [](thandle_t, tdata_t, toff_t) -> void {} // Dummy unmap function\\n  );\\n\\n  // If the TIFF object was successfully created, close it\\n  if (tif != nullptr) {\\n    TIFFClose(tif);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstring>\\n#include <tiffio.hxx>  // Include the header that defines TIFFOpenOptions\\n\\n// Define the TIFFOpenOptions structure as it is not fully defined in the header\\nstruct TIFFOpenOptions {\\n    // Add fields as per the actual definition in the TIFF library\\n    // This is a placeholder and should be replaced with the actual fields\\n    int placeholder;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate inputs for TIFFOpenExt\\n    std::string filename = stream.ConsumeRandomLengthString(100);\\n    std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n    // Ensure that filename and mode are null-terminated and valid\\n    if (filename.empty()) {\\n        filename = \"default.tiff\";\\n    }\\n    if (mode.empty()) {\\n        mode = \"r\";\\n    }\\n\\n    // Create a TIFFOpenOptions structure\\n    TIFFOpenOptions options;\\n    std::memset(&options, 0, sizeof(options));\\n\\n    // Call the function-under-test\\n    TIFF* tiff = TIFFOpenExt(filename.c_str(), mode.c_str(), &options);\\n\\n    // Clean up if TIFF object was created\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}