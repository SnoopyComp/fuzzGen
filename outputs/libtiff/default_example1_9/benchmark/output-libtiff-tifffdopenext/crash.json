{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.61",
        "coverage_diff": "0.003401565927983415",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <unistd.h>\\n#include <vector>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Consume integral values for file descriptor and options\\n  int fd = stream.ConsumeIntegral<int>();\\n\\n  // Consume strings for name and mode\\n  std::string name = stream.ConsumeRandomLengthString(100);\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Create a dummy TIFFOpenOptions object\\n  TIFFOpenOptions *options = TIFFOpenOptionsAlloc();\\n\\n  // Call the function-under-test\\n  TIFF *tiff = TIFFFdOpenExt(fd, name.c_str(), mode.c_str(), options);\\n\\n  // If the TIFF object is successfully created, close it\\n  if (tiff != nullptr) {\\n    TIFFClose(tiff);\\n  }\\n\\n  // Free the TIFFOpenOptions object\\n  TIFFOpenOptionsFree(options);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.87",
        "coverage_diff": "0.003321055491818127",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <string>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Generate file descriptor using a temporary file\\n  FILE* tmpFile = tmpfile();\\n  if (!tmpFile) {\\n    return 0;\\n  }\\n  int fd = fileno(tmpFile);\\n\\n  // Consume strings for the 'name' and 'mode' parameters\\n  std::string name = stream.ConsumeRandomLengthString(100);\\n  std::string mode = stream.ConsumeRandomLengthString(10);\\n\\n  // Create TIFFOpenOptions object\\n  TIFFOpenOptions* options = TIFFOpenOptionsAlloc();\\n\\n  // Call TIFFFdOpenExt with fuzzed parameters\\n  TIFF* tiff = TIFFFdOpenExt(fd, name.c_str(), mode.c_str(), options);\\n\\n  // Clean up\\n  if (tiff) {\\n    TIFFClose(tiff);\\n  }\\n  TIFFOpenOptionsFree(options);\\n  fclose(tmpFile);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}