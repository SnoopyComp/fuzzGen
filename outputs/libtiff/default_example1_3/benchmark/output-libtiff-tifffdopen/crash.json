{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n#include <string>\\n\\n// Custom read function for TIFFClientOpen\\ntsize_t tiffRead(thandle_t fd, tdata_t buf, tsize_t size) {\\n    FuzzedDataProvider* stream = static_cast<FuzzedDataProvider*>(fd);\\n    return stream->ConsumeData(buf, size);\\n}\\n\\n// Custom seek function for TIFFClientOpen\\ntoff_t tiffSeek(thandle_t fd, toff_t off, int whence) {\\n    FuzzedDataProvider* stream = static_cast<FuzzedDataProvider*>(fd);\\n    switch (whence) {\\n        case SEEK_SET:\\n            stream->Rewind();\\n            stream->ConsumeBytes(off);\\n            break;\\n        case SEEK_CUR:\\n            stream->ConsumeBytes(off);\\n            break;\\n        case SEEK_END:\\n            // Not directly supported by FuzzedDataProvider, so we ignore this case\\n            break;\\n        default:\\n            break;\\n    }\\n    return stream->RemainingBytes();\\n}\\n\\n// Custom close function for TIFFClientOpen\\nint tiffClose(thandle_t fd) {\\n    return 0; // Nothing to do\\n}\\n\\n// Custom size function for TIFFClientOpen\\ntoff_t tiffSize(thandle_t fd) {\\n    FuzzedDataProvider* stream = static_cast<FuzzedDataProvider*>(fd);\\n    return stream->RemainingBytes();\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate valid strings for mode and name\\n    const std::string name = \"fuzzed_image.tif\";\\n    const std::string mode = \"r\"; // Read mode is valid for TIFF files\\n\\n    // Call the function-under-test using TIFFClientOpen\\n    TIFF *tif = TIFFClientOpen(name.c_str(), mode.c_str(), &stream,\\n                               tiffRead, tiffRead, tiffSeek, tiffClose, tiffSize,\\n                               nullptr, nullptr);\\n\\n    // Perform some basic TIFF operations to ensure the function is exercised\\n    if (tif != nullptr) {\\n        uint32_t width, height;\\n        uint16_t samplesPerPixel, bitsPerSample;\\n\\n        TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &width);\\n        TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &height);\\n        TIFFGetField(tif, TIFFTAG_SAMPLESPERPIXEL, &samplesPerPixel);\\n        TIFFGetField(tif, TIFFTAG_BITSPERSAMPLE, &bitsPerSample);\\n\\n        TIFFClose(tif);\\n    }\\n\\n    // Additional call to TIFFFdOpen as required by the error message\\n    int fd = open(name.c_str(), O_RDONLY);\\n    if (fd != -1) {\\n        TIFF *tif_fd = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n        if (tif_fd != nullptr) {\\n            uint32_t width, height;\\n            uint16_t samplesPerPixel, bitsPerSample;\\n\\n            TIFFGetField(tif_fd, TIFFTAG_IMAGEWIDTH, &width);\\n            TIFFGetField(tif_fd, TIFFTAG_IMAGELENGTH, &height);\\n            TIFFGetField(tif_fd, TIFFTAG_SAMPLESPERPIXEL, &samplesPerPixel);\\n            TIFFGetField(tif_fd, TIFFTAG_BITSPERSAMPLE, &bitsPerSample);\\n\\n            TIFFClose(tif_fd);\\n        }\\n        close(fd);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.82",
        "coverage_diff": "0.003139907010446229",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <vector>\\n#include <unistd.h>\\n#include <fcntl.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate a temporary file name\\n    std::string temp_filename = \"/tmp/fuzz_tiff_XXXXXX\";\\n    int fd = mkstemp(&temp_filename[0]);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write the fuzz data to the temporary file\\n    if (write(fd, data, size) != static_cast<ssize_t>(size)) {\\n        close(fd);\\n        unlink(temp_filename.c_str());\\n        return 0;\\n    }\\n\\n    // Rewind the file descriptor to the beginning\\n    lseek(fd, 0, SEEK_SET);\\n\\n    // Consume strings for mode and name\\n    std::string mode = stream.ConsumeRandomLengthString(10);\\n    std::string name = stream.ConsumeRandomLengthString(20);\\n\\n    // Ensure mode and name are null-terminated\\n    mode.push_back('\\0');\\n    name.push_back('\\0');\\n\\n    // Call the function-under-test\\n    TIFF *tiff = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n\\n    // If the TIFF pointer is valid, close it\\n    if (tiff != nullptr) {\\n        TIFFClose(tiff);\\n    }\\n\\n    // Clean up\\n    close(fd);\\n    unlink(temp_filename.c_str());\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}