{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.82",
        "coverage_diff": "0.003321055491818127",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <unistd.h>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a temporary file\\n  char tmp_filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n  int fd = mkstemp(tmp_filename);\\n  if (fd == -1) {\\n    return 0;\\n  }\\n\\n  // Write the fuzzing data to the temporary file\\n  if (write(fd, data, size) == -1) {\\n    close(fd);\\n    unlink(tmp_filename);\\n    return 0;\\n  }\\n\\n  // Rewind the file descriptor to the beginning\\n  lseek(fd, 0, SEEK_SET);\\n\\n  // Generate parameters for TIFFOpen\\n  std::string mode = stream.ConsumeRandomLengthString(4); // Mode can be up to 4 characters long\\n\\n  // Create a TIFFOpenOptions object\\n  TIFFOpenOptions *options = TIFFOpenOptionsAlloc();\\n\\n  // Call the function-under-test\\n  TIFF *tiff = TIFFFdOpenExt(fd, tmp_filename, mode.c_str(), options);\\n\\n  // Clean up\\n  if (tiff) {\\n    TIFFClose(tiff);\\n  }\\n  TIFFOpenOptionsFree(options);\\n  close(fd);\\n  unlink(tmp_filename);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "8.94",
        "coverage_diff": "0.005977899885272629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <vector>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a temporary file to pass to TIFFFdOpenExt\\n    char temp_filename[] = \"/tmp/fuzz_tiff_XXXXXX\";\\n    int fd = mkstemp(temp_filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write the fuzz data to the temporary file\\n    std::vector<uint8_t> file_data = stream.ConsumeRemainingBytes<uint8_t>();\\n    if (write(fd, file_data.data(), file_data.size()) != static_cast<ssize_t>(file_data.size())) {\\n        close(fd);\\n        unlink(temp_filename);\\n        return 0;\\n    }\\n\\n    // Rewind the file descriptor to the beginning\\n    lseek(fd, 0, SEEK_SET);\\n\\n    // Consume parameters for TIFFFdOpenExt\\n    std::string name_str = stream.ConsumeRandomLengthString(100);\\n    std::string mode_str = stream.ConsumeRandomLengthString(10);\\n\\n    // Ensure mode_str contains valid TIFF mode characters\\n    if (mode_str.empty() || mode_str.find_first_not_of(\"rwa+\") != std::string::npos) {\\n        mode_str = \"r\"; // Default to read mode if invalid\\n    }\\n\\n    const char* name = name_str.c_str();\\n    const char* mode = mode_str.c_str();\\n    TIFFOpenOptions* options = nullptr; // For simplicity, passing nullptr for options\\n\\n    // Call the function-under-test\\n    TIFF* tiff = TIFFFdOpenExt(fd, name, mode, options);\\n\\n    // Clean up\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n    close(fd);\\n    unlink(temp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}