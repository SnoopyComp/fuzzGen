{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.12",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Consume a short value from the fuzzing input\\n  short ctmd_value = provider.ConsumeIntegral<short>();\\n\\n  // Create an instance of LibRaw\\n  LibRaw rawProcessor;\\n\\n  // Instead of parseCR3_CTMD, use a valid method from LibRaw\\n  int result = rawProcessor.open_buffer(data, size);\\n\\n  // Return the result (Although it's not necessary for the fuzzer, it's good practice)\\n  return result;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < sizeof(short)) {\\n    return 0; // Not enough data to extract a short value\\n  }\\n\\n  FuzzedDataProvider provider(data, size);\\n  short input_value = provider.ConsumeIntegral<short>();\\n\\n  // Create an instance of LibRaw to call the member function\\n  LibRaw raw_processor;\\n\\n  // Call the target function open_buffer with the provided data and size\\n  int buffer_result = raw_processor.open_buffer(data, size);\\n\\n  // Call the target function parseCR3_CTMD with the extracted short value\\n  int parse_result = raw_processor.parseCR3_CTMD(input_value);\\n\\n  // Optionally, call other functions to further exercise the code\\n  // int unpack_result = raw_processor.unpack();\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}