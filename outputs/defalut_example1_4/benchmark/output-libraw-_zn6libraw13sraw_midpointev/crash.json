{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.78",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize the FuzzedDataProvider with the input data\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  // Create a LibRaw object\\n  LibRaw raw_processor;\\n\\n  // Buffer to hold the input data\\n  char* buffer = new char[size];\\n  std::memcpy(buffer, data, size);\\n\\n  // Open the buffer as if it were a file\\n  int open_result = raw_processor.open_buffer(buffer, size);\\n  if (open_result != LIBRAW_SUCCESS) {\\n    delete[] buffer;\\n    return 0; // If the buffer cannot be opened, return early\\n  }\\n\\n  // Unpack the data\\n  int unpack_result = raw_processor.unpack();\\n  if (unpack_result != LIBRAW_SUCCESS) {\\n    raw_processor.recycle();\\n    delete[] buffer;\\n    return 0; // If unpacking fails, return early\\n  }\\n\\n  // Call the sraw_midpoint function\\n  int result = raw_processor.sraw_midpoint();\\n\\n  // Clean up\\n  raw_processor.recycle();\\n  delete[] buffer;\\n\\n  // Return the result (though it's not typically used in fuzzing)\\n  return result;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.83",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw raw_processor;\\n\\n  // Load the input data into the LibRaw instance\\n  int load_result = raw_processor.open_buffer(data, size);\\n  if (load_result != LIBRAW_SUCCESS) {\\n    // If loading fails, return 0 to indicate no further processing\\n    return 0;\\n  }\\n\\n  // Call the sraw_midpoint method\\n  int result = raw_processor.sraw_midpoint();\\n\\n  // Return the result to ensure the function is called\\n  return result;\\n}",
        "model": ""
    }

    ]
}