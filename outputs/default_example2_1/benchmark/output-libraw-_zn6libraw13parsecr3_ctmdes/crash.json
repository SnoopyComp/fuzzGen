{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw libraw_instance;\\n\\n  // Call the function-under-test\\n  int result = libraw_instance.open_buffer(data, size);\\n\\n  // Ensure the buffer is not empty before calling parse_tiff_ifd\\n  if (size >= sizeof(short)) {\\n    // Extract a short value from the data\\n    short tiff_ifd_value = stream.ConsumeIntegral<short>();\\n\\n    // Call the required parse_tiff_ifd function\\n    int parse_result = libraw_instance.parse_tiff_ifd(tiff_ifd_value);\\n  }\\n\\n  // Ensure the buffer is not empty before calling parseCR3_CTMD\\n  if (size >= sizeof(short)) {\\n    // Extract a short value from the data\\n    short cr3_ctmd_value = stream.ConsumeIntegral<short>();\\n\\n    // Call the required parseCR3_CTMD function\\n    int parse_cr3_result = libraw_instance.parseCR3_CTMD(cr3_ctmd_value);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size == 0) {\\n    return 0; // No data to process\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  // Extract a short value from the fuzzed data\\n  short cr3_ctmd_value = fuzzed_data.ConsumeIntegral<short>();\\n\\n  LibRaw raw_processor;\\n  int result = raw_processor.open_buffer(data, size);\\n\\n  // Process the image if it was successfully opened\\n  if (result == LIBRAW_SUCCESS) {\\n    raw_processor.unpack();\\n    // Replace parseCR3_CTMD with a valid function call, e.g., raw2image\\n    raw_processor.raw2image();\\n    raw_processor.recycle();\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}