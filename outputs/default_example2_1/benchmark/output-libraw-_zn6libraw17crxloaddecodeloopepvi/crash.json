{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.30",
        "coverage_diff": "0.00010829249803719848",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < sizeof(int)) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Consuming an integer from the input data\\n  int int_param = provider.ConsumeIntegral<int>();\\n\\n  // Consuming the remaining bytes as a buffer\\n  std::vector<uint8_t> buffer = provider.ConsumeRemainingBytes<uint8_t>();\\n\\n  // Ensure the buffer is not empty\\n  if (buffer.empty()) {\\n    return 0;\\n  }\\n\\n  // Call the function-under-test\\n  class TestLibRaw : public LibRaw {\\n  public:\\n    using LibRaw::crxLoadDecodeLoop;\\n  };\\n\\n  TestLibRaw libraw_instance;\\n  libraw_instance.crxLoadDecodeLoop(buffer.data(), int_param);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Derived class to expose the protected method as public\\nclass ExposedLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Consume data to create the parameters for crxLoadDecodeLoop\\n  size_t buffer_size = stream.ConsumeIntegralInRange<size_t>(1, size);\\n  std::vector<uint8_t> buffer = stream.ConsumeBytes<uint8_t>(buffer_size);\\n  int int_param = stream.ConsumeIntegralInRange<int>(1, 1000); // Ensure int_param is within a reasonable range\\n\\n  // Ensure the buffer is not empty and has a valid size\\n  if (buffer.empty() || buffer.size() < sizeof(int_param)) {\\n    return 0;\\n  }\\n\\n  // Ensure the buffer size is large enough for the function to process\\n  if (buffer.size() < 4) { // Assuming crxLoadDecodeLoop requires at least 4 bytes\\n    return 0;\\n  }\\n\\n  ExposedLibRaw libraw_instance;\\n  libraw_instance.crxLoadDecodeLoop(buffer.data(), int_param);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}