{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.92",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path to the LibRaw header\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create an instance of LibRaw\\n    LibRaw rawProcessor;\\n\\n    // Use FuzzedDataProvider to feed the input data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Feed the input data to the LibRaw processor\\n    int result = rawProcessor.open_buffer(fuzzedDataProvider.ConsumeRemainingBytes<uint8_t>().data(), size);\\n\\n    // Call the sraw_midpoint function to satisfy the requirement\\n    int midpointResult = rawProcessor.sraw_midpoint();\\n\\n    // Return 0 to indicate that the fuzzer executed successfully\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.78",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Corrected path for LibRaw header\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the given data and size\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Check if the size of the data is sufficient to simulate a valid image file\\n    if (size < 4) {\\n        return 0; // Not enough data to be meaningful\\n    }\\n\\n    // Use the data to simulate loading an image file\\n    int result = libraw_instance.open_buffer(data, size);\\n    if (result != LIBRAW_SUCCESS) {\\n        return 0; // Failed to open the buffer, return without further processing\\n    }\\n\\n    // Call the sraw_midpoint method\\n    result = libraw_instance.sraw_midpoint();\\n\\n    // Return 0 to indicate successful execution\\n    return 0;\\n}",
        "model": ""
    }

    ]
}