{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.31",
        "coverage_diff": "0.00016243874705579772",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane; // Expose the protected method for fuzzing\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Consume a uint32_t value from the fuzzed data\\n    uint32_t param2 = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\\n\\n    // Consume the remaining bytes as a vector for the void* parameter\\n    std::vector<uint8_t> param1_bytes = fuzzed_data_provider.ConsumeRemainingBytes<uint8_t>();\\n\\n    // Ensure that param1 is not NULL and has enough size for meaningful data\\n    if (param1_bytes.size() < sizeof(uint32_t)) {\\n        return 0; // Exit early if there's not enough data for param1\\n    }\\n\\n    // Align param1 to a 4-byte boundary to avoid misaligned access\\n    void* param1 = static_cast<void*>(param1_bytes.data());\\n\\n    // Call the function-under-test\\n    LibRawFuzzer libraw_instance;\\n\\n    // Ensure the pointer is properly aligned to avoid undefined behavior\\n    if (reinterpret_cast<uintptr_t>(param1) % alignof(uint32_t) != 0) {\\n        return 0; // Exit early if the pointer is not properly aligned\\n    }\\n\\n    // Ensure the pointer is within the valid range of the allocated memory\\n    if (param1_bytes.size() < param2) {\\n        return 0; // Exit early if param2 is larger than the available data\\n    }\\n\\n    int result = libraw_instance.crxDecodePlane(param1, param2);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <vector>\\n#include <stdexcept>\\n#include <iostream> // For logging\\n\\nnamespace LibRaw {\\n    int crxDecodePlane(void *, uint32_t);\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Consume a part of the input data to create a buffer for the void* parameter\\n    std::vector<uint8_t> buffer = fuzzed_data_provider.ConsumeBytes<uint8_t>(fuzzed_data_provider.remaining_bytes() / 2);\\n\\n    // Ensure the buffer is not empty to avoid passing a null pointer\\n    if (buffer.empty()) {\\n        return 0;\\n    }\\n\\n    // Consume an integral value for the uint32_t parameter\\n    uint32_t uint_param = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, 100000); // Adjust range as needed\\n\\n    try {\\n        // Call the function-under-test\\n        int result = LibRaw::crxDecodePlane(static_cast<void*>(buffer.data()), uint_param);\\n        // Log the result to help with debugging\\n        std::cout << \"crxDecodePlane result: \" << result << std::endl;\\n    } catch (const std::exception& e) {\\n        // Handle any exceptions thrown by the function\\n        std::cerr << \"Exception caught: \" << e.what() << std::endl;\\n    } catch (...) {\\n        // Catch any other types of exceptions\\n        std::cerr << \"Unknown exception caught\" << std::endl;\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}