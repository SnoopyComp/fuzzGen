{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.83",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct path for LibRaw header\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create an instance of FuzzedDataProvider to handle the fuzzing input\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of the LibRaw class\\n    LibRaw raw_processor;\\n\\n    // Load the data into the LibRaw instance\\n    int load_result = raw_processor.open_buffer(data, size);\\n    if (load_result != LIBRAW_SUCCESS) {\\n        // If loading fails, return 0 to indicate no further processing\\n        return 0;\\n    }\\n\\n    // Unpack the raw data\\n    int unpack_result = raw_processor.unpack();\\n    if (unpack_result != LIBRAW_SUCCESS) {\\n        // If unpacking fails, return 0 to indicate no further processing\\n        return 0;\\n    }\\n\\n    // Call the sraw_midpoint function on the raw_processor instance\\n    int result = raw_processor.sraw_midpoint();\\n\\n    // Return 0 to indicate successful execution\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.92",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"libraw.h\"  // Assuming this is the header file where LibRaw is declared\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Prepare a buffer for image data\\n    if (size > 0) {\\n        // Load the image data into LibRaw\\n        int load_result = libraw_instance.open_buffer(data, size);\\n        if (load_result == LIBRAW_SUCCESS) {\\n            // Process the image data\\n            int unpack_result = libraw_instance.unpack();\\n            if (unpack_result == LIBRAW_SUCCESS) {\\n                // Call the function-under-test\\n                int result = libraw_instance.sraw_midpoint();\\n            }\\n        }\\n    }\\n\\n    // Return 0 as required by the fuzzer\\n    return 0;\\n}",
        "model": ""
    }

    ]
}