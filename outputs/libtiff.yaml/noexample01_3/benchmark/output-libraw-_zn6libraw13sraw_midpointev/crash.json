{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.15",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Corrected path based on instructions\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create an instance of FuzzedDataProvider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw raw_processor;\\n\\n    // Check if the size is sufficient to simulate a raw image input\\n    if (size < 100) {\\n        return 0; // Not enough data to process\\n    }\\n\\n    // Simulate loading a raw image from the provided data\\n    int load_result = raw_processor.open_buffer(data, size);\\n    if (load_result != LIBRAW_SUCCESS) {\\n        return 0; // Failed to load the image\\n    }\\n\\n    // Call the sraw_midpoint function\\n    int result = raw_processor.sraw_midpoint();\\n\\n    // Return 0 to indicate successful execution\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.87",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path to the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the fuzzed data provider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of the LibRaw class\\n    LibRaw rawProcessor;\\n\\n    // Feed the fuzzed data to the LibRaw instance\\n    int result = rawProcessor.open_buffer((void*)data, size);\\n\\n    // If the buffer was successfully opened, process the image\\n    if (result == LIBRAW_SUCCESS) {\\n        rawProcessor.unpack();\\n        rawProcessor.sraw_midpoint();\\n    }\\n\\n    // Return 0 to indicate the function executed successfully\\n    return 0;\\n}",
        "model": ""
    }

    ]
}