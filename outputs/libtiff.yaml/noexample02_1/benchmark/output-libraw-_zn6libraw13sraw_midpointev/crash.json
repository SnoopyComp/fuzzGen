{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.88",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct path for the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create an instance of FuzzedDataProvider to process the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw rawProcessor;\\n\\n    // Check if there is enough data to process\\n    if (size < 10) {\\n        return 0;  // Not enough data to be meaningful\\n    }\\n\\n    // Use the data to simulate a raw image file\\n    int result = rawProcessor.open_buffer(data, size);\\n    if (result != LIBRAW_SUCCESS) {\\n        return 0;  // Failed to open buffer, nothing to process\\n    }\\n\\n    // Process the image\\n    result = rawProcessor.unpack();\\n    if (result != LIBRAW_SUCCESS) {\\n        return 0;  // Failed to unpack, nothing to process\\n    }\\n\\n    // Call the function-under-test\\n    result = rawProcessor.sraw_midpoint();\\n\\n    // Return 0 to indicate successful execution\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.99",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct path for the LibRaw header file\\n#include <vector>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw raw_processor;\\n\\n    // Create a vector to hold the input data\\n    std::vector<uint8_t> image_data(data, data + size);\\n\\n    // Load the image data into the LibRaw processor\\n    int load_result = raw_processor.open_buffer(image_data.data(), image_data.size());\\n    if (load_result != LIBRAW_SUCCESS) {\\n        // If the image data could not be loaded, return 0 to indicate no further processing\\n        return 0;\\n    }\\n\\n    // Unpack the raw image data\\n    int unpack_result = raw_processor.unpack();\\n    if (unpack_result != LIBRAW_SUCCESS) {\\n        // If the image data could not be unpacked, return 0 to indicate no further processing\\n        return 0;\\n    }\\n\\n    // Call the function-under-test\\n    int result = raw_processor.sraw_midpoint();\\n\\n    // Return 0 to indicate successful execution\\n    return 0;\\n}",
        "model": ""
    }

    ]
}