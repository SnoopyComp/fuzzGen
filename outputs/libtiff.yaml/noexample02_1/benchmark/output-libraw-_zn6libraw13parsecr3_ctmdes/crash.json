{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct header file for LibRaw\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the provided data and size\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Use the open_buffer method to process the input data\\n    int result = libraw_instance.open_buffer(data, size);\\n\\n    // Call the unpack method if the buffer was successfully opened\\n    if (result == LIBRAW_SUCCESS) {\\n        result = libraw_instance.unpack();\\n    }\\n\\n    // Generate a short value from the fuzzed data for the parseCR3_CTMD function\\n    short cr3_ctmd_value = fuzzed_data.ConsumeIntegral<short>();\\n\\n    // Call the parseCR3_CTMD function\\n    int parse_result = libraw_instance.parseCR3_CTMD(cr3_ctmd_value);\\n\\n    // Return the result of the parseCR3_CTMD function call\\n    return parse_result;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct header file for LibRaw\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Load the raw data into the LibRaw instance\\n    int result = libraw_instance.open_buffer(data, size);\\n\\n    // If the buffer was successfully loaded, process the image\\n    if (result == LIBRAW_SUCCESS) {\\n        result = libraw_instance.unpack();\\n    }\\n\\n    // Call the required function dcraw_process if unpack was successful\\n    if (result == LIBRAW_SUCCESS) {\\n        result = libraw_instance.dcraw_process();\\n    }\\n\\n    // Generate a short value using FuzzedDataProvider\\n    short fuzzed_short = fuzzed_data.ConsumeIntegral<short>();\\n\\n    // Call the required function parseCR3_CTMD with the fuzzed short value\\n    result = libraw_instance.parseCR3_CTMD(fuzzed_short);\\n\\n    // Return the result (or 0 for the fuzzer)\\n    return 0;\\n}",
        "model": ""
    }

    ]
}