{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a uint32_t value for the second parameter\\n    uint32_t param2 = fuzzed_data.ConsumeIntegral<uint32_t>();\\n\\n    // Consume the remaining bytes for the first parameter\\n    std::vector<uint8_t> bytes = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n    void *param1 = bytes.data();\\n\\n    // Ensure param1 is not NULL by checking the size of bytes\\n    if (bytes.size() == 0) {\\n        return 0;\\n    }\\n\\n    // Call the function-under-test\\n    LibRawFuzzer libraw_instance;\\n    int result = libraw_instance.crxDecodePlane(param1, param2);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"  // Corrected path for the LibRaw header file\\n\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;  // Expose the protected member function for testing\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Ensure there is enough data to consume\\n    if (size < 4) {\\n        return 0;  // Not enough data to proceed\\n    }\\n\\n    // Consume bytes for the first parameter\\n    size_t bytes_size = fuzzed_data.ConsumeIntegralInRange<size_t>(1, size - 4);  // Ensure there is space for the second parameter\\n    std::vector<uint8_t> bytes = fuzzed_data.ConsumeBytes<uint8_t>(bytes_size);\\n    void *data_ptr = bytes.data();\\n\\n    // Consume an integral value for the second parameter\\n    uint32_t param2 = fuzzed_data.ConsumeIntegral<uint32_t>();\\n\\n    // Create an instance of the derived class to call the protected member function\\n    LibRawFuzzer libraw_instance;\\n\\n    // Call the function-under-test\\n    int result = libraw_instance.crxDecodePlane(data_ptr, param2);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}