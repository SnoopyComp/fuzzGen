{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.14",
        "coverage_diff": "0.0017597530931044753",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct header file for LibRaw\\n#include <unistd.h>  // For write and close functions\\n#include <cstdio>    // For remove function\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a temporary file to hold the input data\\n    char temp_filename[] = \"/tmp/libraw_fuzz_XXXXXX\";\\n    int fd = mkstemp(temp_filename);\\n    if (fd == -1) {\\n        return 0;  // Return early if file creation fails\\n    }\\n\\n    // Write the fuzzed data to the temporary file\\n    write(fd, data, size);\\n    close(fd);\\n\\n    // Create an instance of the LibRaw class\\n    LibRaw libraw_instance;\\n\\n    // Open the temporary file with the LibRaw instance\\n    if (libraw_instance.open_file(temp_filename) != LIBRAW_SUCCESS) {\\n        // Clean up the temporary file\\n        remove(temp_filename);\\n        return 0;  // Return early if file opening fails\\n    }\\n\\n    // Call the function-under-test\\n    int result = libraw_instance.sraw_midpoint();\\n\\n    // Clean up the temporary file\\n    remove(temp_filename);\\n\\n    // Return 0 to indicate successful execution\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.30",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path to the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the fuzzed data provider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Open the buffer with the provided fuzzed data\\n    int open_result = libraw_instance.open_buffer(data, size);\\n    \\n    // If the buffer was opened successfully, call the function-under-test\\n    if (open_result == LIBRAW_SUCCESS) {\\n        int result = libraw_instance.sraw_midpoint();\\n    }\\n\\n    // Return 0 to indicate no crash\\n    return 0;\\n}",
        "model": ""
    }

    ]
}