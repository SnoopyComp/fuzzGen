{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.85",
        "coverage_diff": "0.0019492649646695726",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Include the LibRaw header file from the correct path\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Initialize the LibRaw object\\n    LibRaw rawProcessor;\\n\\n    // Create a temporary file to store the input data\\n    std::string temp_filename = \"/tmp/libraw_fuzz_input.raw\";\\n    FILE *temp_file = fopen(temp_filename.c_str(), \"wb\");\\n    if (!temp_file) {\\n        return 0; // If file cannot be created, return 0\\n    }\\n\\n    // Write the input data to the temporary file\\n    fwrite(data, 1, size, temp_file);\\n    fclose(temp_file);\\n\\n    // Open the temporary file with LibRaw\\n    if (rawProcessor.open_file(temp_filename.c_str()) != LIBRAW_SUCCESS) {\\n        // If the file cannot be opened, return 0\\n        return 0;\\n    }\\n\\n    // Unpack the raw image data\\n    if (rawProcessor.unpack() != LIBRAW_SUCCESS) {\\n        // If unpacking fails, return 0\\n        return 0;\\n    }\\n\\n    // Call the sraw_midpoint method\\n    int result = rawProcessor.sraw_midpoint();\\n\\n    // Clean up the temporary file\\n    remove(temp_filename.c_str());\\n\\n    // Return the result (though the return value is not typically used in fuzzing)\\n    return result;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.91",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <stddef.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Corrected path for the header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw raw_processor;\\n\\n    // Feed the input data to LibRaw\\n    int open_ret = raw_processor.open_buffer(data, size);\\n    if (open_ret != LIBRAW_SUCCESS) {\\n        // If the buffer cannot be opened, return 0\\n        return 0;\\n    }\\n\\n    // Call the function-under-test\\n    int result = raw_processor.sraw_midpoint();\\n\\n    // Return 0 as required by the fuzzer\\n    return 0;\\n}",
        "model": ""
    }

    ]
}