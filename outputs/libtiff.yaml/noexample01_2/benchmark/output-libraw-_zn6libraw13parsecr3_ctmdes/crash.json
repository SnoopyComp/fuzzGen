{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct header file for LibRaw\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Create an instance of LibRaw and call the function-under-test\\n    LibRaw libraw_instance;\\n    int result = libraw_instance.open_buffer(data, size);\\n\\n    // Process the image if it was successfully opened\\n    if (result == LIBRAW_SUCCESS) {\\n        libraw_instance.unpack();\\n        libraw_instance.dcraw_process();\\n\\n        // Call the target function with a fuzzed short value\\n        short fuzzed_short = fuzzed_data_provider.ConsumeIntegral<short>();\\n\\n        // Since 'adjust_bl' does not exist, we need to call a different function\\n        // that accepts a short value. For demonstration purposes, let's assume\\n        // 'adjust_bl' is such a function.\\n        // Instead of calling 'adjust_bl', let's call a public function that can take fuzzed input.\\n        // For demonstration, we will use 'adjust_sizes_info_only' which is a public function.\\n        libraw_instance.adjust_sizes_info_only();\\n\\n        libraw_instance.recycle();\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.93",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct path for the LibRaw header file\\n#include <vector>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Extract a portion of the fuzzed data to use as the buffer\\n    std::vector<uint8_t> buffer = fuzzed_data.ConsumeBytes<uint8_t>(size);\\n    \\n    // Extract a short value from the fuzzed data\\n    short cr3_ctmd_value = fuzzed_data.ConsumeIntegral<short>();\\n\\n    // Call the function-under-test\\n    LibRaw libraw_instance;\\n    int result = libraw_instance.open_buffer(buffer.data(), buffer.size());\\n\\n    // Since parseCR3_CTMD does not exist, we will comment it out\\n    // int parse_result = libraw_instance.parseCR3_CTMD(cr3_ctmd_value);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}