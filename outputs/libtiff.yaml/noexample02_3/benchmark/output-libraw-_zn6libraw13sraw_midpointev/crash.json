{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.98",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct path for the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the given data and size\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Load the data into LibRaw\\n    int ret = libraw_instance.open_buffer(data, size);\\n    if (ret != LIBRAW_SUCCESS) {\\n        // If the buffer cannot be opened, return an error code\\n        return 0;\\n    }\\n\\n    // Unpack the data\\n    ret = libraw_instance.unpack();\\n    if (ret != LIBRAW_SUCCESS) {\\n        // If unpacking fails, return an error code\\n        return 0;\\n    }\\n\\n    // Call the sraw_midpoint method\\n    int result = libraw_instance.sraw_midpoint();\\n\\n    // Return the result (though it's not used by the fuzzer, it's part of the function signature)\\n    return result;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.01",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path to the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Initialize the instance with some data to avoid undefined behavior\\n    if (libraw_instance.open_buffer(data, size) != LIBRAW_SUCCESS) {\\n        return 0; // Exit if the buffer cannot be opened\\n    }\\n\\n    // Call the sraw_midpoint method\\n    int result = libraw_instance.sraw_midpoint();\\n\\n    // Return the result (although it's not necessary for the fuzzer)\\n    return 0;\\n}",
        "model": ""
    }

    ]
}