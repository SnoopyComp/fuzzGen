{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.33",
        "coverage_diff": "0.00010829249803719848",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\" // Corrected path to the LibRaw header file\\n\\n// Subclass LibRaw to expose the protected method\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    void callCrxLoadDecodeLoop(void *ptr, int int_param) {\\n        crxLoadDecodeLoop(ptr, int_param);\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(int)) {\\n        return 0; // Not enough data to proceed\\n    }\\n\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Consume data for the void* parameter\\n    std::vector<uint8_t> buffer = fuzzed_data_provider.ConsumeBytes<uint8_t>(fuzzed_data_provider.remaining_bytes() - sizeof(int));\\n    void *ptr = buffer.data();\\n\\n    // Consume data for the int parameter\\n    int int_param = fuzzed_data_provider.ConsumeIntegral<int>();\\n\\n    // Ensure ptr is not null and has some data\\n    if (buffer.empty()) {\\n        return 0;\\n    }\\n\\n    // Create an instance of the subclass and call the function-under-test\\n    LibRawFuzzer libraw_fuzzer;\\n    libraw_fuzzer.callCrxLoadDecodeLoop(ptr, int_param);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path for the LibRaw header file\\n\\n// Derived class to expose the protected member function\\nclass LibRawDerived : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Ensure there is enough data to consume\\n    if (size < 2) {\\n        return 0; // Not enough data to proceed\\n    }\\n\\n    // Consume a portion of the data to create a non-null void pointer\\n    size_t buffer_size = fuzzed_data.ConsumeIntegralInRange<size_t>(1, size - 1);\\n    std::vector<uint8_t> buffer = fuzzed_data.ConsumeBytes<uint8_t>(buffer_size);\\n    void *ptr = buffer.data();\\n\\n    // Consume an integer value from the remaining data\\n    int int_param = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Create an instance of the derived class to call the protected member function\\n    LibRawDerived libraw_instance;\\n\\n    // Call the function-under-test using the instance\\n    if (ptr != nullptr && buffer_size > 0) {\\n        // Ensure the pointer is within a valid range\\n        if (reinterpret_cast<uintptr_t>(ptr) % alignof(void*) == 0) {\\n            libraw_instance.crxLoadDecodeLoop(ptr, int_param);\\n        }\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}