{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "3.63",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    // Consume a short value for the function parameter\\n    short short_param = fuzzedDataProvider.ConsumeIntegral<short>();\\n\\n    // Create an instance of LibRaw\\n    LibRaw libRawInstance;\\n\\n    // Since 'parseCR3_CTMD' is not a member of 'LibRaw', we need to call a valid function.\\n    // Let's assume we want to use 'open_buffer' function which is a valid function in LibRaw.\\n    // Ensure there is enough data to pass to 'open_buffer'\\n    if (size > sizeof(short)) {\\n        // Call the function-under-test with the remaining data\\n        int result = libRawInstance.open_buffer(data + sizeof(short), size - sizeof(short));\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.96",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to consume a short value\\n    if (fuzzedDataProvider.remaining_bytes() < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    // Consume a short value from the fuzzed data\\n    short fuzzedShort = fuzzedDataProvider.ConsumeIntegral<short>();\\n\\n    // Create an instance of LibRaw\\n    LibRaw libRawInstance;\\n\\n    // Call the function-under-test with the fuzzed short value\\n    // As 'parseCR3_CTMD' does not exist, let's use a valid function from LibRaw\\n    // For instance, we can use 'open_buffer' which takes a buffer and its size as arguments\\n    int result = libRawInstance.open_buffer(data, size);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}