{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.86",
        "coverage_diff": "0.0019492649646695726",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Include the appropriate header where LibRaw class is defined\\n\\n// Ensure the function signature matches the expected fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Construct FuzzedDataProvider from provided data and size\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n    \\n    // Initialize the LibRaw object\\n    LibRaw raw_processor;\\n\\n    // Feed non-null input to the function-under-test\\n    if (size > 0) {\\n        // Generate a dummy file name\\n        std::string dummy_file_name = \"/tmp/dummy.raw\";\\n        \\n        // Write the fuzzed data to a temporary file\\n        FILE *file = fopen(dummy_file_name.c_str(), \"wb\");\\n        if (file != nullptr) {\\n            fwrite(data, 1, size, file);\\n            fclose(file);\\n            \\n            // Open the file with LibRaw\\n            if (raw_processor.open_file(dummy_file_name.c_str()) == LIBRAW_SUCCESS) {\\n                // Process the file\\n                raw_processor.unpack();\\n                raw_processor.sraw_midpoint();\\n                \\n                // Close the file\\n                raw_processor.recycle();\\n            }\\n            \\n            // Remove the temporary file\\n            remove(dummy_file_name.c_str());\\n        }\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.96",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create a FuzzedDataProvider object to consume the provided data\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of LibRaw class.\\n    LibRaw libraw_instance;\\n\\n    // Use the input data to open the buffer\\n    int open_result = libraw_instance.open_buffer(data, size);\\n    if (open_result != LIBRAW_SUCCESS) {\\n        // If opening the buffer fails, return 0 to indicate no further processing is needed\\n        return 0;\\n    }\\n\\n    // Call the sraw_midpoint member function.\\n    int result = libraw_instance.sraw_midpoint();\\n\\n    // Optionally use the result in some manner if necessary.\\n    (void)result;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}