{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "22.81",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <vector>\\n#include <cstring> // For memset\\n\\n// Derived class to expose the protected crxDecodePlane method\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(uint32_t)) {\\n        return 0;\\n    }\\n\\n    // Consume a vector of bytes to use as the void* parameter\\n    std::vector<uint8_t> buffer = fuzzedDataProvider.ConsumeBytes<uint8_t>(fuzzedDataProvider.remaining_bytes());\\n    void* buffer_ptr = buffer.data();\\n\\n    // Consume a uint32_t value for the second parameter\\n    uint32_t uint32_param = fuzzedDataProvider.ConsumeIntegral<uint32_t>();\\n\\n    // Ensure the buffer is not empty and properly allocated\\n    if (!buffer.empty() && uint32_param > 0) {\\n        // Allocate a buffer for the crxDecodePlane function\\n        std::vector<uint8_t> decodeBuffer(uint32_param);\\n        void* decodeBuffer_ptr = decodeBuffer.data();\\n\\n        // Initialize the decode buffer to avoid uninitialized memory issues\\n        std::memset(decodeBuffer_ptr, 0, uint32_param);\\n\\n        // Call the function-under-test\\n        LibRawFuzzer libRawInstance;\\n        try {\\n            libRawInstance.crxDecodePlane(decodeBuffer_ptr, uint32_param);\\n        } catch (...) {\\n            // Catch any exceptions to prevent the fuzzer from crashing\\n        }\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.31",
        "coverage_diff": "0.00016243874705579772",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <vector>\\n#include <cstring> // For memset\\n\\n// Derived class to expose the protected crxDecodePlane method\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(uint32_t)) {\\n        return 0;\\n    }\\n\\n    // Consume a uint32_t value for the planeNumber parameter\\n    uint32_t planeNumber = fuzzedDataProvider.ConsumeIntegral<uint32_t>();\\n\\n    // Consume a vector of bytes to use as the void* parameter\\n    std::vector<uint8_t> buffer = fuzzedDataProvider.ConsumeBytes<uint8_t>(fuzzedDataProvider.remaining_bytes());\\n    void* buffer_ptr = buffer.data();\\n\\n    // Ensure the buffer is not empty and properly allocated\\n    if (!buffer.empty() && planeNumber > 0) {\\n        // Allocate a buffer for the crxDecodePlane function\\n        std::vector<uint8_t> decodeBuffer(buffer.size());\\n        void* decodeBuffer_ptr = decodeBuffer.data();\\n\\n        // Initialize the decode buffer to avoid uninitialized memory issues\\n        std::memset(decodeBuffer_ptr, 0, buffer.size());\\n\\n        // Call the function-under-test\\n        LibRawFuzzer libRawInstance;\\n        try {\\n            // Ensure the buffer_ptr is not null and has enough data for decoding\\n            if (buffer_ptr != nullptr && size > 0) {\\n                libRawInstance.crxDecodePlane(decodeBuffer_ptr, planeNumber);\\n            }\\n        } catch (...) {\\n            // Catch any exceptions to prevent the fuzzer from crashing\\n        }\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}