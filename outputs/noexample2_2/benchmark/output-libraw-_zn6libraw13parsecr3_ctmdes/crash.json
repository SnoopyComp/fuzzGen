{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct path to the header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Call the function-under-test with the fuzzed input\\n    int result = libraw_instance.open_buffer(data, size);\\n\\n    // Generate a short value from the fuzzed data for parse_tiff_ifd\\n    if (size >= sizeof(short)) {\\n        short fuzzed_short = fuzzed_data_provider.ConsumeIntegral<short>();\\n        int parse_result = libraw_instance.parse_tiff_ifd(fuzzed_short);\\n    }\\n\\n    // Ensure to call the required function parseCR3_CTMD\\n    if (size >= sizeof(short)) {\\n        short fuzzed_short_for_cr3 = fuzzed_data_provider.ConsumeIntegral<short>();\\n        int cr3_result = libraw_instance.parseCR3_CTMD(fuzzed_short_for_cr3);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.84",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Fuzzing harness for the function-under-test.\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the fuzz data provider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Extract a short value from the fuzzed data\\n    short param = fuzzed_data.ConsumeIntegral<short>();\\n\\n    // Create a LibRaw instance\\n    LibRaw libraw_instance;\\n\\n    // Call a valid function from LibRaw with the fuzzed parameter\\n    // Since 'parseCR3_CTMD' does not exist, we will use 'open_buffer' instead\\n    int result = libraw_instance.open_buffer(data, size);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}