{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path to the LibRaw header\\n\\n// Derived class to expose the protected member function\\nclass ExposedLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(uint32_t)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consuming an uint32_t value\\n    uint32_t value = fuzzed_data.ConsumeIntegral<uint32_t>();\\n\\n    // Ensure the buffer has enough data to avoid null pointer issues\\n    if (fuzzed_data.remaining_bytes() == 0) {\\n        return 0;\\n    }\\n\\n    // Allocating memory to void * pointer\\n    std::vector<uint8_t> buffer = fuzzed_data.ConsumeBytes<uint8_t>(fuzzed_data.remaining_bytes());\\n    void* ptr = buffer.data();\\n\\n    // Create an instance of ExposedLibRaw\\n    ExposedLibRaw libraw;\\n\\n    // Call the function-under-test\\n    int result = libraw.crxDecodePlane(ptr, value);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"libraw.h\"  // Assuming the function is declared in this header\\n\\n// Derive a class from LibRaw to access the protected member function\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;  // Make the protected function accessible\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Define and initialize parameters needed for the function-under-test\\n    uint32_t param1 = fuzzed_data.ConsumeIntegral<uint32_t>();\\n    \\n    // Consume remaining bytes as the void* parameter\\n    std::vector<uint8_t> bytes = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n    void* param0 = bytes.empty() ? nullptr : bytes.data();  // Ensure param0 is not null if bytes is empty\\n    \\n    // Create an instance of the derived class\\n    LibRawFuzzer libraw_instance;\\n\\n    // Check if param0 is not null and size is sufficient\\n    if (param0 != nullptr && bytes.size() >= sizeof(uint32_t)) {\\n        // Call the function-under-test\\n        libraw_instance.crxDecodePlane(param0, param1);\\n    }\\n\\n    // Return 0 to indicate normal execution\\n    return 0;\\n}",
        "model": ""
    }

    ]
}