{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.24",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Include the appropriate header for LibRaw\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the LibRaw object\\n    LibRaw rawProcessor;\\n\\n    // Feed the input data to the LibRaw object\\n    int openResult = rawProcessor.open_buffer(data, size);\\n    if (openResult != LIBRAW_SUCCESS) {\\n        return 0; // If opening the buffer fails, return early\\n    }\\n\\n    // Call the function-under-test\\n    int result = rawProcessor.sraw_midpoint();\\n\\n    // To prevent unused variable warning\\n    (void)result;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.58",
        "coverage_diff": "0.004115114925413542",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include <unistd.h>\\n#include <fcntl.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create an instance of LibRaw\\n    LibRaw rawProcessor;\\n\\n    // Feed the input data to the function-under-test\\n    if (size > 0) {\\n        // Use FuzzedDataProvider to handle the input data\\n        FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n        // Assuming we need to feed the data as a file to LibRaw\\n        // Create a temporary file to write the input data\\n        char tmpFileName[] = \"/tmp/libraw_fuzz_XXXXXX\";\\n        int fd = mkstemp(tmpFileName);\\n        if (fd == -1) {\\n            return 0; // If temporary file creation fails, return 0\\n        }\\n\\n        // Write the fuzzed data to the temporary file\\n        write(fd, data, size);\\n        close(fd);\\n\\n        // Process the file with LibRaw\\n        int result = rawProcessor.open_file(tmpFileName);\\n\\n        // Clean up the temporary file\\n        remove(tmpFileName);\\n\\n        // Call other methods to ensure deeper coverage\\n        if (result == LIBRAW_SUCCESS) {\\n            rawProcessor.unpack();\\n            rawProcessor.dcraw_process();\\n            libraw_processed_image_t *image = rawProcessor.dcraw_make_mem_image();\\n            if (image) {\\n                LibRaw::dcraw_clear_mem(image);\\n            }\\n\\n            // Call the sraw_midpoint method to ensure it is tested\\n            rawProcessor.sraw_midpoint();\\n        }\\n\\n        // Return 0 to indicate the fuzzer executed successfully\\n        return 0;\\n    }\\n\\n    // Return 0 if no data is provided\\n    return 0;\\n}",
        "model": ""
    }

    ]
}