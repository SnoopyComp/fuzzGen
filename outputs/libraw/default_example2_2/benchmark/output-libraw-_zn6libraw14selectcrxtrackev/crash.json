{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.92",
        "coverage_diff": "2.707312450929962e-05",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize the fuzzed data provider\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw rawProcessor;\\n\\n  // Call the function-under-test with the provided data\\n  rawProcessor.open_buffer(data, size);\\n\\n  // Since `selectCRXTrack` does not exist, we need to call another function\\n  // that is relevant to the usage of LibRaw. For example, we can call:\\n  rawProcessor.unpack();\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize the fuzzed data provider\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw libraw_instance;\\n\\n  // Call the function-under-test with the provided data\\n  int result = libraw_instance.open_buffer(data, size);\\n\\n  // Ensure the function `unpack` is called to process the data\\n  if (result == LIBRAW_SUCCESS) {\\n    libraw_instance.unpack();\\n    // Call the function `selectCRXTrack` as required\\n    libraw_instance.selectCRXTrack();\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}