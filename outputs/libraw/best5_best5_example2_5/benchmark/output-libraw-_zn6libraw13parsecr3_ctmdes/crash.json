{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.83",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    // Consume a short value from the fuzzed data\\n    short short_param = fuzzedDataProvider.ConsumeIntegral<short>();\\n\\n    // Call the function-under-test\\n    LibRaw libRawInstance;\\n    int result = libRawInstance.open_buffer(data, size);\\n\\n    // Check if the buffer was successfully opened\\n    if (result != LIBRAW_SUCCESS) {\\n        return 0;\\n    }\\n\\n    // Call the target function unpack\\n    int unpackResult = libRawInstance.unpack();\\n\\n    // Since parseCR3_CTMD is not a member of LibRaw, we will call another function that exists\\n    // For demonstration, let's call 'dcraw_process' which is a valid function in LibRaw\\n    int processResult = libRawInstance.dcraw_process();\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Derived class to expose the protected parse_tiff_ifd and parseCR3 methods\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    // Expose the protected methods by creating public wrappers\\n    int parse_tiff_ifd_wrapper(int param) {\\n        return this->parse_tiff_ifd(param);\\n    }\\n    int parseCR3_wrapper(int param) {\\n        return this->parseCR3(param);\\n    }\\n};\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    // Consume a short value from the fuzzed data\\n    short short_param = fuzzedDataProvider.ConsumeIntegral<short>();\\n\\n    // Call the functions-under-test\\n    LibRawFuzzer libRawInstance;\\n    int result_tiff_ifd = libRawInstance.parse_tiff_ifd_wrapper(short_param);\\n    int result_cr3 = libRawInstance.parseCR3_wrapper(short_param);\\n\\n    // Return 0 to indicate successful execution of the fuzz target\\n    return 0;\\n}",
        "model": ""
    }

    ]
}