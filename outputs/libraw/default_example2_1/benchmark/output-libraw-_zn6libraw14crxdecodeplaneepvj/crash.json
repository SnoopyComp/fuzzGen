{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.29",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Create a subclass of LibRaw to expose the protected method\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Consume a uint32_t value for the second parameter\\n  uint32_t param2 = provider.ConsumeIntegral<uint32_t>();\\n\\n  // Consume the remaining bytes for the first parameter\\n  std::vector<uint8_t> param1 = provider.ConsumeRemainingBytes<uint8_t>();\\n\\n  // Ensure the pointer is not null and the size is reasonable\\n  if (param1.empty() || param1.size() < sizeof(uint32_t)) {\\n    return 0;\\n  }\\n\\n  // Create an instance of LibRawFuzzer\\n  LibRawFuzzer rawProcessor;\\n\\n  // Ensure that the size of param1 is sufficient for the function call\\n  // This is a hypothetical check, adjust as necessary based on the actual requirements of crxDecodePlane\\n  if (param1.size() < param2) {\\n    return 0;\\n  }\\n\\n  // Call the function under test\\n  rawProcessor.crxDecodePlane(param1.data(), param2);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.12",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Derived class to expose the protected method\\nclass LibRawDerived : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Consume a uint32_t value for the second parameter\\n  uint32_t param2 = stream.ConsumeIntegral<uint32_t>();\\n\\n  // Consume the remaining bytes for the first parameter\\n  std::vector<uint8_t> buffer = stream.ConsumeRemainingBytes<uint8_t>();\\n\\n  // Ensure the buffer is not empty and param2 is within a reasonable range\\n  if (buffer.empty() || param2 > buffer.size()) {\\n    return 0;\\n  }\\n\\n  // Call the function-under-test using the derived class\\n  LibRawDerived libraw;\\n  libraw.crxDecodePlane(buffer.data(), param2);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}