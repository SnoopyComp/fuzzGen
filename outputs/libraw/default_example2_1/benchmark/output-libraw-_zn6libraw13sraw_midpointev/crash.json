{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.06",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Initialize LibRaw object\\n  LibRaw rawProcessor;\\n\\n  // Feed the LibRaw processor with data\\n  int result = rawProcessor.open_buffer(data, size);\\n  if (result != LIBRAW_SUCCESS) {\\n    // Handle error case (if any specific handling is required)\\n    return 0;\\n  }\\n\\n  // Call the function under test\\n  result = rawProcessor.sraw_midpoint();\\n\\n  // Use the result in some way to avoid compiler optimizations removing the call\\n  if (result < 0) {\\n    // Handle error case (if any specific handling is required)\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.77",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a LibRaw instance\\n    LibRaw rawProcessor;\\n\\n    // Feed the input data to the LibRaw instance\\n    int openResult = rawProcessor.open_buffer(data, size);\\n    if (openResult != LIBRAW_SUCCESS) {\\n        return 0; // If opening the buffer fails, return early\\n    }\\n\\n    // Call the function under test\\n    int result = rawProcessor.sraw_midpoint();\\n\\n    // Optionally, use the result in some way to prevent compiler optimizations\\n    (void)result;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}