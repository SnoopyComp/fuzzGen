{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.96",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct path for the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize the LibRaw instance\\n    LibRaw rawProcessor;\\n\\n    // Feed the data into a buffer\\n    std::vector<uint8_t> buffer(data, data + size);\\n\\n    // Open the buffer as a raw image\\n    int open_result = rawProcessor.open_buffer(buffer.data(), buffer.size());\\n    if (open_result != LIBRAW_SUCCESS) {\\n        return 0;  // Early exit if the buffer is not a valid raw image\\n    }\\n\\n    // Unpack the raw image\\n    int unpack_result = rawProcessor.unpack();\\n    if (unpack_result != LIBRAW_SUCCESS) {\\n        return 0;  // Early exit if unpacking fails\\n    }\\n\\n    // Process the image (e.g., get the midpoint)\\n    int result = rawProcessor.sraw_midpoint();\\n\\n    // Return the result (though it's not used by the fuzzer)\\n    return result;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.06",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Corrected the header file path\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create an instance of FuzzedDataProvider to consume the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw raw_processor;\\n\\n    // Feed the input data to the raw_processor\\n    int load_result = raw_processor.open_buffer(data, size);\\n    if (load_result != LIBRAW_SUCCESS) {\\n        return 0; // If loading fails, return immediately\\n    }\\n\\n    // Call the function-under-test\\n    int result = raw_processor.sraw_midpoint();\\n\\n    // Return 0 to indicate the fuzzer has finished processing this input\\n    return 0;\\n}",
        "model": ""
    }

    ]
}