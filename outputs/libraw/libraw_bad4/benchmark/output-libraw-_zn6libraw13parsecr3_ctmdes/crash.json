{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.91",
        "coverage_diff": "0.00035195061862089503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path for the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a short value from the fuzzed data\\n    short short_param = fuzzed_data.ConsumeIntegral<short>();\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Check if the short_param can be used in any other LibRaw function\\n    // For example, if there is a function like 'open_buffer'\\n    if (size > 0) {\\n        int result = libraw_instance.open_buffer(data, size);\\n    }\\n\\n    // Call a valid function from LibRaw with the consumed short_param\\n    // Since parseCR3_CTMD does not exist, we will use another function\\n    // For demonstration, let's use 'adjust_sizes_info_only' which does not take parameters\\n    int parse_result = libraw_instance.adjust_sizes_info_only();\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.70",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path for the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a short value from the fuzzed data\\n    short short_param = fuzzed_data.ConsumeIntegral<short>();\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Call the function-under-test\\n    // Since 'parseCR3_CTMD' does not exist, let's use 'open_buffer' which is a valid function\\n    int result = libraw_instance.open_buffer(data, size);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}