{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <unistd.h> // for mkstemp, write, close, unlink\\n#include <fcntl.h> // for open\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    // Create a temporary file to write the fuzzed data\\n    char filename[] = \"/tmp/libraw_fuzz_XXXXXX\";\\n    int fd = mkstemp(filename);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n\\n    // Write the fuzzed data to the temporary file\\n    write(fd, data, size);\\n    close(fd);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libRawInstance;\\n\\n    // Call the open_file function with the temporary file\\n    int result = libRawInstance.open_file(filename);\\n\\n    // Ensure there is enough data to call unpack\\n    if (result == LIBRAW_SUCCESS) {\\n        // Call the unpack function to process the image data\\n        libRawInstance.unpack();\\n    }\\n\\n    // Clean up the temporary file\\n    unlink(filename);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.55",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libraw/libraw.h>\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    // Consume a short value from the fuzzed data\\n    short short_param = fuzzedDataProvider.ConsumeIntegral<short>();\\n\\n    // Create an instance of LibRaw\\n    LibRaw libRawInstance;\\n\\n    // Call the function-under-test\\n    // Note: 'parseCR3_CTMD' is not a member of 'LibRaw'. Assuming 'open_buffer' as a valid function for demonstration.\\n    int result = libRawInstance.open_buffer(data, size);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}