{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Derived class to expose the protected method\\nclass PublicLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the given data\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Generate a uint32_t value for the second parameter\\n    uint32_t param2 = provider.ConsumeIntegral<uint32_t>();\\n\\n    // Generate a vector of bytes for the first parameter\\n    std::vector<uint8_t> buffer = provider.ConsumeRemainingBytes<uint8_t>();\\n\\n    // Ensure the buffer is large enough to avoid passing invalid pointers\\n    if (buffer.size() < sizeof(uint32_t)) {\\n        return 0;\\n    }\\n\\n    // Call the function-under-test using the derived class\\n    PublicLibRaw libraw;\\n    try {\\n        // Ensure the buffer is properly aligned and has enough size\\n        if (buffer.size() >= param2) {\\n            libraw.crxDecodePlane(buffer.data(), param2);\\n        }\\n    } catch (...) {\\n        // Catch any exceptions to prevent the fuzzer from crashing\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.12",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane; // Expose the protected member function\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Consume a uint32_t value for the second parameter\\n  uint32_t plane_size = stream.ConsumeIntegral<uint32_t>();\\n\\n  // Consume the remaining bytes for the first parameter\\n  std::vector<uint8_t> plane_data = stream.ConsumeRemainingBytes<uint8_t>();\\n\\n  // Ensure the plane_data is not empty and plane_size is reasonable\\n  if (plane_data.empty() || plane_size == 0 || plane_size > plane_data.size()) {\\n    return 0;\\n  }\\n\\n  LibRawFuzzer libraw_processor;\\n  libraw_processor.crxDecodePlane(plane_data.data(), plane_size);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}