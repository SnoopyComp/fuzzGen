{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "5.57",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Instantiate FuzzedDataProvider with the input data\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of LibRaw to call the member function on\\n    LibRaw libraw_instance;\\n\\n    // Call the function we want to fuzz with the input data\\n    int result = libraw_instance.open_buffer(data, size);\\n\\n    // Optionally, handle the result or perform additional operations\\n    if (result == LIBRAW_SUCCESS) {\\n        // Process the image if it was successfully opened\\n        libraw_instance.unpack();\\n        libraw_instance.dcraw_process();\\n        \\n        // The function selectCRXTrack does not exist, let's remove it\\n        // libraw_instance.selectCRXTrack();\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Include the header file for LibRaw library\\n\\n// LLVMFuzzerTestOneInput fuzzing function\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create a LibRaw instance\\n    LibRaw raw_processor;\\n\\n    // Feed the data to the open_buffer function of LibRaw\\n    int result = raw_processor.open_buffer(data, size);\\n\\n    // Check if the buffer was opened successfully\\n    if (result == LIBRAW_SUCCESS) {\\n        // Select CRX track\\n        raw_processor.selectCRXTrack();\\n        \\n        // Process the image\\n        raw_processor.unpack();\\n    }\\n\\n    // Always return 0 as the fuzzing function should not terminate early\\n    return 0;\\n}",
        "model": ""
    }

    ]
}