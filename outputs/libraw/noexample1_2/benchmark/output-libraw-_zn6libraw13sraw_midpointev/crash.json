{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "5.10",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct path for libraw.h\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data.\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a LibRaw object\\n    LibRaw libraw_instance;\\n\\n    // Feed the input data to the function-under-test\\n    int result = libraw_instance.open_buffer(data, size);\\n    \\n    // To avoid unused variable warning\\n    (void)result;\\n\\n    // Call the required function sraw_midpoint\\n    int midpoint_result = libraw_instance.sraw_midpoint();\\n    \\n    // To avoid unused variable warning\\n    (void)midpoint_result;\\n\\n    return 0;  // Indicate that the fuzzer executed successfully\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.22",
        "coverage_diff": "0.0017597530931044753",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct path to the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create an instance of FuzzedDataProvider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Use FuzzedDataProvider to create a temporary file with the input data\\n    const std::string temp_filename = \"/tmp/fuzzed_input.raw\";\\n    std::ofstream temp_file(temp_filename, std::ios::binary);\\n    temp_file.write(reinterpret_cast<const char*>(data), size);\\n    temp_file.close();\\n\\n    // Open the temporary file with LibRaw\\n    int open_result = libraw_instance.open_file(temp_filename.c_str());\\n\\n    // Check if the file was successfully opened\\n    if (open_result == LIBRAW_SUCCESS) {\\n        // Call the function-under-test\\n        int result = libraw_instance.sraw_midpoint();\\n    }\\n\\n    // Cleanup: remove the temporary file\\n    std::remove(temp_filename.c_str());\\n\\n    // Return 0 indicating no errors\\n    return 0;\\n}",
        "model": ""
    }

    ]
}