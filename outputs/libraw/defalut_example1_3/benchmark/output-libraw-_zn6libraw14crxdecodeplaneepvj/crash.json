{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.31",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size == 0) {\\n    return 0; // Early exit if size is zero\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Consume data for the buffer and ensure it is not null\\n  size_t buffer_size = stream.ConsumeIntegralInRange<size_t>(1, size);\\n  std::vector<uint8_t> buffer = stream.ConsumeBytes<uint8_t>(buffer_size);\\n\\n  // Ensure the buffer is not empty and has at least the minimum required size\\n  if (buffer.empty() || buffer.size() < sizeof(uint32_t)) {\\n    return 0; // Early exit if buffer is empty or too small\\n  }\\n\\n  // Consume data for the uint32_t parameter\\n  uint32_t param = stream.ConsumeIntegral<uint32_t>();\\n\\n  // Create an instance of LibRaw\\n  LibRaw libraw_instance;\\n\\n  // Access the protected member function via a derived class\\n  struct LibRawDerived : public LibRaw {\\n    using LibRaw::crxDecodePlane;\\n  } libraw_derived_instance;\\n\\n  // Ensure the buffer is large enough to avoid out-of-bounds access\\n  if (buffer.size() < param) {\\n    return 0; // Early exit if buffer size is smaller than param\\n  }\\n\\n  // Call the function under test\\n  int result = libraw_derived_instance.crxDecodePlane(buffer.data(), param);\\n\\n  // Return the result\\n  return result;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "3.83",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate a random size for the buffer\\n    uint32_t buffer_size = stream.ConsumeIntegral<uint32_t>();\\n\\n    // Create a buffer of the generated size\\n    std::vector<uint8_t> buffer(buffer_size);\\n\\n    // Fill the buffer with fuzzed data\\n    stream.ConsumeData(buffer.data(), buffer.size());\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Since crxDecodePlane is a protected member, we cannot call it directly.\\n    // Instead, we can call a public method that internally uses crxDecodePlane.\\n    // For example, we can use the open_buffer method which is public and processes raw data.\\n\\n    // Call the function-under-test\\n    int result = libraw_instance.open_buffer(buffer.data(), buffer_size);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}