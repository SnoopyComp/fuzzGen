{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "22.81",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <vector>\\n\\n// Derived class to expose the protected crxLoadDecodeLoop method\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop;\\n};\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n\\n    // Consume a vector of bytes to use as the void* parameter\\n    std::vector<uint8_t> buffer = fuzzedDataProvider.ConsumeBytes<uint8_t>(fuzzedDataProvider.remaining_bytes());\\n    void* buffer_ptr = buffer.data();\\n\\n    // Consume an integer value for the second parameter\\n    int int_param = fuzzedDataProvider.ConsumeIntegral<int>();\\n\\n    // Ensure the buffer is not empty and the integer parameter is within a valid range\\n    if (!buffer.empty() && int_param > 0) {\\n        // Call the function-under-test\\n        LibRawFuzzer libRawInstance;\\n        libRawInstance.crxLoadDecodeLoop(buffer_ptr, int_param);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "22.81",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <vector>\\n\\n// Derived class to expose the protected crxLoadDecodeLoop method\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop;\\n};\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n\\n    // Consume a vector of bytes to use as the void* parameter\\n    std::vector<uint8_t> buffer = fuzzedDataProvider.ConsumeBytes<uint8_t>(fuzzedDataProvider.remaining_bytes());\\n    void* buffer_ptr = buffer.data();\\n\\n    // Consume an integer value for the second parameter\\n    int int_param = fuzzedDataProvider.ConsumeIntegral<int>();\\n\\n    // Ensure the buffer is not empty and the integer parameter is within a valid range\\n    if (!buffer.empty() && int_param > 0) {\\n        // Call the function-under-test\\n        LibRawFuzzer libRawInstance;\\n        libRawInstance.crxLoadDecodeLoop(buffer_ptr, int_param);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}