{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.28",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path to the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the given data and size\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Set up the necessary fields in libraw_instance to ensure sraw_midpoint() is meaningfully invoked\\n    // For example, we can set up the rawdata.sizes structure\\n    libraw_instance.imgdata.sizes.raw_width = fuzzed_data.ConsumeIntegral<uint16_t>();\\n    libraw_instance.imgdata.sizes.raw_height = fuzzed_data.ConsumeIntegral<uint16_t>();\\n\\n    // Ensure the rawdata.raw_image is allocated and populated with some data\\n    int raw_image_size = libraw_instance.imgdata.sizes.raw_width * libraw_instance.imgdata.sizes.raw_height;\\n    if (raw_image_size > 0 && raw_image_size < size) {\\n        libraw_instance.imgdata.rawdata.raw_image = new ushort[raw_image_size];\\n        for (int i = 0; i < raw_image_size; ++i) {\\n            libraw_instance.imgdata.rawdata.raw_image[i] = fuzzed_data.ConsumeIntegral<ushort>();\\n        }\\n    } else {\\n        // If the size is invalid, clean up and return\\n        return 0;\\n    }\\n\\n    // Call the function-under-test\\n    int result = libraw_instance.sraw_midpoint();\\n\\n    // Clean up allocated memory\\n    delete[] libraw_instance.imgdata.rawdata.raw_image;\\n\\n    // Return 0 to indicate successful execution\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.28",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path to the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the given data and size\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Set up the necessary fields in libraw_instance to ensure sraw_midpoint() is meaningfully invoked\\n    // For example, we can set up the rawdata.sizes structure\\n    libraw_instance.imgdata.sizes.raw_width = fuzzed_data.ConsumeIntegral<uint16_t>();\\n    libraw_instance.imgdata.sizes.raw_height = fuzzed_data.ConsumeIntegral<uint16_t>();\\n\\n    // Ensure the rawdata.raw_image is allocated and populated with some data\\n    int raw_image_size = libraw_instance.imgdata.sizes.raw_width * libraw_instance.imgdata.sizes.raw_height;\\n    if (raw_image_size > 0 && raw_image_size < size) {\\n        libraw_instance.imgdata.rawdata.raw_image = new ushort[raw_image_size];\\n        for (int i = 0; i < raw_image_size; ++i) {\\n            libraw_instance.imgdata.rawdata.raw_image[i] = fuzzed_data.ConsumeIntegral<ushort>();\\n        }\\n    } else {\\n        // If the size is invalid, clean up and return\\n        return 0;\\n    }\\n\\n    // Call the function-under-test\\n    int result = libraw_instance.sraw_midpoint();\\n\\n    // Clean up allocated memory\\n    delete[] libraw_instance.imgdata.rawdata.raw_image;\\n\\n    // Return the result of the function call\\n    return result;\\n}",
        "model": ""
    }

    ]
}