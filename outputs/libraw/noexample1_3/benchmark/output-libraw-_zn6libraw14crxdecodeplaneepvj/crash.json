{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\" // Corrected include path\\n\\n// Create a derived class to access the protected member function\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consuming a random length of bytes for the void* parameter\\n    size_t bytes_length = fuzzed_data.ConsumeIntegralInRange<size_t>(1, size);\\n    std::vector<uint8_t> bytes = fuzzed_data.ConsumeBytes<uint8_t>(bytes_length);\\n\\n    // Ensure the vector is not empty and has enough data\\n    if (bytes.empty() || bytes.size() < sizeof(void*)) {\\n        return 0;\\n    }\\n\\n    void *ptr = bytes.data();\\n\\n    // Consuming a uint32_t value\\n    uint32_t uint32_val = fuzzed_data.ConsumeIntegral<uint32_t>();\\n\\n    // Make sure the function is actually called\\n    LibRawFuzzer obj; // Using the derived class to instantiate an object of LibRaw\\n    int result = obj.crxDecodePlane(ptr, uint32_val);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <vector>\\n\\n// Derived class to expose the protected method\\nclass LibRawDerived : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Construct the size of the data to be passed into crxDecodePlane\\n    uint32_t data_size = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1, size);\\n\\n    // Ensure there is enough data left to consume\\n    if (fuzzed_data_provider.remaining_bytes() < data_size) {\\n        return 0;\\n    }\\n\\n    // Consume remaining data \\n    std::vector<uint8_t> input_data = fuzzed_data_provider.ConsumeBytes<uint8_t>(data_size);\\n\\n    // Ensure no null pointers are passed\\n    void *data_ptr = input_data.data();\\n\\n    // Call the function-under-test using the derived class\\n    LibRawDerived libraw_instance;\\n    int result = libraw_instance.crxDecodePlane(data_ptr, data_size);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}