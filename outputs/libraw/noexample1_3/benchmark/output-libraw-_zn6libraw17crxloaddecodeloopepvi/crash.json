{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "22.81",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <vector>\\n\\n// Derived class to expose the protected crxLoadDecodeLoop method\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop;\\n};\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n\\n    // Consume a vector of bytes to use as the void* parameter\\n    std::vector<uint8_t> buffer = fuzzedDataProvider.ConsumeBytes<uint8_t>(fuzzedDataProvider.remaining_bytes());\\n    void* buffer_ptr = buffer.data();\\n\\n    // Consume an integer value for the second parameter\\n    int int_param = fuzzedDataProvider.ConsumeIntegral<int>();\\n\\n    // Ensure the buffer is not empty and the integer parameter is within a valid range\\n    if (!buffer.empty() && int_param > 0) {\\n        // Call the function-under-test\\n        LibRawFuzzer libRawInstance;\\n        libRawInstance.crxLoadDecodeLoop(buffer_ptr, int_param);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.14",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n\\n// Include the necessary headers for LibRaw (assuming it's provided in your build environment)\\n// #include \"libraw/libraw.h\"\\n\\nnamespace LibRaw {\\n    void crxLoadDecodeLoop(void *, int);\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Construct the FuzzedDataProvider from the input data\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n    \\n    // Determine the size of the vector to be passed as the first argument\\n    size_t vector_size = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, size);\\n    \\n    // Consume part of the input data as the vector\\n    std::vector<uint8_t> arg1_data = fuzzed_data_provider.ConsumeBytes<uint8_t>(vector_size);\\n    \\n    // Ensure the vector has enough data and isn't empty\\n    if (arg1_data.empty()) {\\n        return 0;\\n    }\\n    \\n    // Cast the vector data pointer to void*\\n    void *arg1 = static_cast<void*>(arg1_data.data());\\n    \\n    // Consume an integer value for the second argument\\n    int arg2 = fuzzed_data_provider.ConsumeIntegral<int>();\\n    \\n    // Call the function-under-test\\n    LibRaw::crxLoadDecodeLoop(arg1, arg2);\\n    \\n    return 0;\\n}",
        "model": ""
    }

    ]
}