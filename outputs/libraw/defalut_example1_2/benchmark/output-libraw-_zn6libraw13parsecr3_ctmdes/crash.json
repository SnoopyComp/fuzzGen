{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.20",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Ensure that we have enough data to consume a short value\\n  if (stream.remaining_bytes() < sizeof(short)) {\\n    return 0;\\n  }\\n\\n  short input_value = stream.ConsumeIntegral<short>();\\n\\n  // Create an instance of LibRaw to call the function\\n  LibRaw raw_processor;\\n\\n  // Call a valid function with the fuzzed input\\n  // Assuming \"parse\" is a valid function in LibRaw that can take some form of input\\n  // Since parseCR3_CTMD does not exist, we need to use a valid function\\n  raw_processor.open_buffer(data, size);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw rawProcessor;\\n\\n    // Call the function-under-test: open_buffer\\n    int result = rawProcessor.open_buffer(data, size);\\n\\n    // Check the result (optional, for debugging purposes)\\n    if (result == LIBRAW_SUCCESS) {\\n        // If open_buffer is successful, call unpack with fuzzed data\\n        result = rawProcessor.unpack();\\n        if (result == LIBRAW_SUCCESS) {\\n            // Further processing can be done here if needed\\n        }\\n    } else {\\n        // Handle error (optional)\\n    }\\n\\n    // Generate a fuzzed short value\\n    short fuzzedShort = provider.ConsumeIntegral<short>();\\n\\n    // Call the required function parseCR3_CTMD with the fuzzed short value\\n    result = rawProcessor.parseCR3_CTMD(fuzzedShort);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}