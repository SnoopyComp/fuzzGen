{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.65",
        "coverage_diff": "0.0021658499607439693",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path to the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create a FuzzedDataProvider instance\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Instantiate the LibRaw class\\n    LibRaw libraw_instance;\\n\\n    // Feed the data to the LibRaw instance\\n    int result = libraw_instance.open_buffer(data, size);\\n    if (result != LIBRAW_SUCCESS) {\\n        return 0;\\n    }\\n\\n    // Process the image\\n    result = libraw_instance.unpack();\\n    if (result != LIBRAW_SUCCESS) {\\n        return 0;\\n    }\\n\\n    // Perform additional processing if needed\\n    result = libraw_instance.dcraw_process();\\n    if (result != LIBRAW_SUCCESS) {\\n        return 0;\\n    }\\n\\n    // Call the sraw_midpoint function\\n    result = libraw_instance.sraw_midpoint();\\n    if (result != LIBRAW_SUCCESS) {\\n        return 0;\\n    }\\n\\n    // Get the processed image\\n    libraw_processed_image_t *image = libraw_instance.dcraw_make_mem_image(&result);\\n    if (image) {\\n        // Free the image memory\\n        libraw_instance.dcraw_clear_mem(image);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.45",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct path for the LibRaw header\\n#include <vector>\\n#include <cstring>\\n\\n// Fuzzing harness for LibRaw::sraw_midpoint\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create an instance of LibRaw\\n    LibRaw rawProcessor;\\n\\n    // Use FuzzedDataProvider to provide data to the function-under-test\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Simulate realistic input for the function\\n    int midpoint = fuzzed_data.ConsumeIntegralInRange<int>(0, 10000);\\n\\n    // Set the midpoint value using the fuzzed input\\n    rawProcessor.imgdata.sizes.raw_pitch = midpoint;\\n\\n    // Ensure the rawProcessor is in a valid state by simulating a load\\n    // Create a dummy image buffer with random data\\n    const size_t dummy_image_size = 1024;\\n    std::vector<uint8_t> dummy_image = fuzzed_data.ConsumeBytes<uint8_t>(dummy_image_size);\\n\\n    // Check if we have enough data to proceed\\n    if (dummy_image.size() < dummy_image_size) {\\n        return 0;  // Not enough data to proceed\\n    }\\n\\n    // Load the dummy image buffer\\n    if (rawProcessor.open_buffer(dummy_image.data(), dummy_image.size()) != LIBRAW_SUCCESS) {\\n        return 0;  // Failed to load the buffer\\n    }\\n\\n    // Call the function-under-test\\n    int result = rawProcessor.sraw_midpoint();\\n\\n    // Return 0 to indicate successful execution\\n    return 0;\\n}",
        "model": ""
    }

    ]
}