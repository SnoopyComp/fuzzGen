{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.12",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <vector>\\n#include <cstring> // For std::memcpy\\n\\n// Assuming the LibRaw class and crxDecodePlane function are declared somewhere\\nnamespace LibRaw {\\n    int crxDecodePlane(void *data, uint32_t size);\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a uint32_t value for the second parameter\\n    uint32_t param2 = fuzzed_data.ConsumeIntegral<uint32_t>();\\n\\n    // Consume the remaining bytes for the first parameter\\n    std::vector<uint8_t> remaining_bytes = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n\\n    // Ensure we have valid data to pass to crxDecodePlane\\n    if (remaining_bytes.empty() || param2 == 0 || remaining_bytes.size() < param2) {\\n        return 0; // Early exit if there's no data, size is zero, or not enough data for param2\\n    }\\n\\n    // Allocate memory for param1 and copy the data\\n    void *param1 = malloc(param2);\\n    if (param1 == nullptr) {\\n        return 0; // Early exit if memory allocation fails\\n    }\\n    std::memcpy(param1, remaining_bytes.data(), param2);\\n\\n    // Call the function-under-test\\n    int result = LibRaw::crxDecodePlane(param1, param2);\\n\\n    // Free the allocated memory\\n    free(param1);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <vector>\\n#include <cstring> // For std::memset\\n#include <exception> // For std::exception\\n\\nnamespace LibRaw {\\n    int crxDecodePlane(void *, uint32_t);\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a uint32_t value for the second parameter\\n    uint32_t param2 = fuzzed_data.ConsumeIntegral<uint32_t>();\\n\\n    // Consume remaining bytes for the first parameter\\n    std::vector<uint8_t> bytes = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n\\n    // Ensure the data pointer is not NULL and points to a valid memory buffer\\n    void *param1;\\n    if (bytes.empty()) {\\n        // If bytes vector is empty, use a dummy buffer\\n        static uint8_t dummy_buffer[1];\\n        std::memset(dummy_buffer, 0, sizeof(dummy_buffer));\\n        param1 = static_cast<void *>(dummy_buffer);\\n    } else {\\n        param1 = static_cast<void *>(bytes.data());\\n    }\\n\\n    // Call the function-under-test within a try-catch block to handle potential exceptions\\n    try {\\n        // Ensure the param1 pointer is not null and points to a valid memory buffer\\n        if (param1 != nullptr) {\\n            LibRaw::crxDecodePlane(param1, param2);\\n        }\\n    } catch (const std::exception &e) {\\n        // Handle known exceptions to prevent the fuzzer from crashing\\n    } catch (...) {\\n        // Catch all other exceptions\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}