{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Create a derived class to access the protected member function.\\nclass LibRawDerived : public LibRaw {\\npublic:\\n  using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Consume a uint32_t value for the second parameter.\\n  uint32_t param2 = provider.ConsumeIntegral<uint32_t>();\\n\\n  // Consume remaining bytes for the first parameter.\\n  std::vector<uint8_t> buffer = provider.ConsumeRemainingBytes<uint8_t>();\\n\\n  // Ensure the buffer is non-empty and has a reasonable size.\\n  if (buffer.empty() || buffer.size() < sizeof(uint32_t)) {\\n    buffer.resize(sizeof(uint32_t), 0);\\n  }\\n\\n  // Create a LibRawDerived object.\\n  LibRawDerived rawProcessor;\\n\\n  // Ensure the buffer is large enough to avoid heap-buffer-overflow.\\n  // This size can be adjusted based on the expected behavior of crxDecodePlane.\\n  const size_t minBufferSize = 1024; // Example size, adjust as needed.\\n  if (buffer.size() < minBufferSize) {\\n    buffer.resize(minBufferSize, 0);\\n  }\\n\\n  // Ensure param2 is within a valid range.\\n  // This range can be adjusted based on the expected behavior of crxDecodePlane.\\n  const uint32_t maxParam2 = 10000; // Example max value, adjust as needed.\\n  if (param2 > maxParam2) {\\n    param2 = maxParam2;\\n  }\\n\\n  // Call the function-under-test.\\n  rawProcessor.crxDecodePlane(buffer.data(), param2);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.29",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Subclass to expose the protected method\\nclass LibRawExposed : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // LibRaw instance\\n  LibRawExposed raw_processor;\\n\\n  // Consume a uint32_t value for the second parameter\\n  uint32_t plane_size = stream.ConsumeIntegral<uint32_t>();\\n\\n  // Consume remaining bytes for the first parameter\\n  std::vector<uint8_t> plane_data = stream.ConsumeRemainingBytes<uint8_t>();\\n\\n  // Ensure the data pointer is not null and plane_size is within a reasonable range\\n  if (plane_data.empty() || plane_size > plane_data.size()) {\\n    return 0;\\n  }\\n\\n  void* plane_ptr = plane_data.data();\\n\\n  // Call the function-under-test\\n  raw_processor.crxDecodePlane(plane_ptr, plane_size);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}