{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.79",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize FuzzedDataProvider with the input data\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Create a LibRaw instance\\n  LibRaw rawProcessor;\\n\\n  // Load the data into the LibRaw instance\\n  int load_result = rawProcessor.open_buffer(data, size);\\n  if (load_result != LIBRAW_SUCCESS) {\\n    return 0;  // If loading fails, return immediately\\n  }\\n\\n  // Unpack the raw image\\n  int unpack_result = rawProcessor.unpack();\\n  if (unpack_result != LIBRAW_SUCCESS) {\\n    return 0;  // If unpacking fails, return immediately\\n  }\\n\\n  // Call the function-under-test\\n  int result = rawProcessor.sraw_midpoint();\\n\\n  // Return the result (though it's not used by the fuzzer)\\n  return result;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.28",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Initialize LibRaw object\\n  LibRaw rawProcessor;\\n\\n  // Feed the input data to the LibRaw object\\n  int open_ret = rawProcessor.open_buffer(data, size);\\n  if (open_ret != LIBRAW_SUCCESS) {\\n    return 0; // If the buffer cannot be opened, return early\\n  }\\n\\n  // Call the function-under-test\\n  int result = rawProcessor.sraw_midpoint();\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}