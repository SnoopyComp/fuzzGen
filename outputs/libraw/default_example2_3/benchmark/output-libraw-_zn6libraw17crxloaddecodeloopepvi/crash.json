{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.29",
        "coverage_diff": "0.00010829249803719848",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass FuzzLibRaw : public LibRaw {\\npublic:\\n  using LibRaw::crxLoadDecodeLoop; // Expose the protected method for testing\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Consume a portion of the input data for the void* parameter\\n  std::vector<uint8_t> buffer = provider.ConsumeBytes<uint8_t>(provider.remaining_bytes());\\n\\n  // Consume an integer value for the int parameter\\n  int int_param = provider.ConsumeIntegralInRange<int>(0, 100); // Assuming a valid range for the int parameter\\n\\n  // Ensure the buffer is not empty and has a reasonable size\\n  if (buffer.size() < 10) { // Assuming a minimum size for meaningful input\\n    return 0;\\n  }\\n\\n  // Call the function-under-test\\n  FuzzLibRaw libraw;\\n  libraw.crxLoadDecodeLoop(buffer.data(), int_param);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.29",
        "coverage_diff": "0.00010829249803719848",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include \"libraw/libraw.h\"\\n\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop; // Expose the protected member function\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Consume a portion of the input for the integer parameter\\n    int int_param = stream.ConsumeIntegral<int>();\\n\\n    // Consume the remaining bytes for the void* parameter\\n    std::vector<uint8_t> buffer = stream.ConsumeRemainingBytes<uint8_t>();\\n    void* void_param = buffer.data();\\n\\n    // Create an instance of LibRawFuzzer to call the member function\\n    LibRawFuzzer libraw_instance;\\n    libraw_instance.crxLoadDecodeLoop(void_param, int_param);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}