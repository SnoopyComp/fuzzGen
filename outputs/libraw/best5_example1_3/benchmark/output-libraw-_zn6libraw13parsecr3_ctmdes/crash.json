{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.71",
        "coverage_diff": "0.0013265831009556812",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to consume a short value\\n    if (fuzzedDataProvider.remaining_bytes() < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    // Consume a short value from the fuzzed data\\n    short short_param = fuzzedDataProvider.ConsumeIntegral<short>();\\n\\n    // Create an instance of LibRaw\\n    LibRaw libRawInstance;\\n\\n    // Instead of parseCR3_CTMD, call a valid function from LibRaw\\n    // For example, we can call open_file with a fuzzed string (filename)\\n    std::string filename = fuzzedDataProvider.ConsumeRandomLengthString(100);\\n    int result = libRawInstance.open_file(filename.c_str());\\n\\n    // Return the result of the function call\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Call the function-under-test with the fuzzed data\\n    int result = libraw_instance.open_buffer(data, size);\\n\\n    // Ensure the buffer was opened successfully before proceeding\\n    if (result == LIBRAW_SUCCESS) {\\n        // Call the required function\\n        int unpack_result = libraw_instance.unpack();\\n\\n        // Process the image if unpacking was successful\\n        if (unpack_result == LIBRAW_SUCCESS) {\\n            // Call the dcraw_process function\\n            int process_result = libraw_instance.dcraw_process();\\n        }\\n    }\\n\\n    // Return the result\\n    return 0;\\n}",
        "model": ""
    }

    ]
}