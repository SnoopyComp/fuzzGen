{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.77",
        "coverage_diff": "2.707312450929962e-05",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Call the function-under-test with the fuzzed data\\n    int result = libraw_instance.open_buffer(data, size);\\n\\n    // Generate a short value from the fuzzed data\\n    if (size >= sizeof(short)) {\\n        short fuzzed_short = fuzzed_data.ConsumeIntegral<short>();\\n\\n        // Since parseCR3_CTMD does not exist, we can call another function from LibRaw\\n        // For example, we can call unpack() which is a valid function in LibRaw\\n        int unpack_result = libraw_instance.unpack();\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct header file path for LibRaw\\n#include <cstdio> // For FILE, fopen, fwrite, fclose, remove\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the provided data and size\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a temporary file to store the fuzzed data\\n    const char* temp_filename = \"/tmp/fuzzed_image.raw\";\\n    FILE* temp_file = fopen(temp_filename, \"wb\");\\n    if (!temp_file) {\\n        return 0; // If the file cannot be created, return immediately\\n    }\\n    fwrite(data, 1, size, temp_file);\\n    fclose(temp_file);\\n\\n    // Call the function-under-test\\n    LibRaw libraw_instance;\\n    int result = libraw_instance.open_file(temp_filename);\\n\\n    // Check if the file was opened successfully\\n    if (result != LIBRAW_SUCCESS) {\\n        remove(temp_filename);\\n        return 0;\\n    }\\n\\n    // Call the required function with the fuzzed short value\\n    int unpack_result = libraw_instance.unpack();\\n\\n    // Generate a fuzzed short value for parseCR3_CTMD\\n    short fuzzed_short = fuzzed_data.ConsumeIntegral<short>();\\n\\n    // Call the parseCR3_CTMD function with the fuzzed short value\\n    int parse_result = libraw_instance.parseCR3_CTMD(fuzzed_short);\\n\\n    // Clean up the temporary file\\n    remove(temp_filename);\\n\\n    // Return the result of parseCR3_CTMD (though the return value is typically ignored by the fuzzer)\\n    return parse_result;\\n}",
        "model": ""
    }

    ]
}