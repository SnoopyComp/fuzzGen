{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Ensure the correct path to the LibRaw header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the fuzzed data provider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a LibRaw object\\n    LibRaw rawProcessor;\\n\\n    // Feed the data to the LibRaw processor\\n    int result = rawProcessor.open_buffer(data, size);\\n    if (result != LIBRAW_SUCCESS) {\\n        return 0;\\n    }\\n\\n    // Call the function-under-test\\n    result = rawProcessor.unpack();\\n    if (result != LIBRAW_SUCCESS) {\\n        return 0;\\n    }\\n\\n    // Call the selectCRXTrack function as required\\n    rawProcessor.selectCRXTrack();\\n\\n    // Process the image\\n    rawProcessor.imgdata.params.output_bps = 16;\\n    rawProcessor.dcraw_process();\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct path to the LibRaw header\\n#include <cstdio>  // For file operations\\n#include <string>  // For std::string\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of the LibRaw class\\n    LibRaw rawProcessor;\\n\\n    // Feed the fuzzed data to the LibRaw instance\\n    if (size > 0) {\\n        // Create a temporary file to write the fuzzed data\\n        std::string temp_filename = \"/tmp/fuzzed_image.raw\";\\n        FILE *temp_file = fopen(temp_filename.c_str(), \"wb\");\\n        if (temp_file != nullptr) {\\n            fwrite(data, 1, size, temp_file);\\n            fclose(temp_file);\\n\\n            // Open the temporary file with LibRaw\\n            rawProcessor.open_file(temp_filename.c_str());\\n\\n            // Call the required function\\n            rawProcessor.selectCRXTrack();\\n\\n            // Process the file\\n            rawProcessor.unpack();\\n            rawProcessor.dcraw_process();\\n\\n            // Clean up the temporary file\\n            remove(temp_filename.c_str());\\n        }\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}