{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.31",
        "coverage_diff": "0.00010829249803719848",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"libraw.h\"\\n\\n// Derived class to expose the protected member function for testing\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Ensure there is enough data to consume\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n\\n    // Consume bytes to create a non-null pointer\\n    std::vector<uint8_t> buffer = fuzzed_data.ConsumeBytes<uint8_t>(size - sizeof(int));\\n    void* ptr = buffer.empty() ? nullptr : buffer.data();\\n\\n    // Consume an integer for the second parameter\\n    int int_param = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Create an instance of the derived class to call the protected member function\\n    LibRawFuzzer libraw_instance;\\n\\n    // Call the function-under-test only if the pointer is not null\\n    if (ptr) {\\n        libraw_instance.crxLoadDecodeLoop(ptr, int_param);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.29",
        "coverage_diff": "0.00010829249803719848",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path to the LibRaw header\\n#include <vector>\\n\\n// Subclass LibRaw to access the protected member function\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop; // Make the protected function accessible\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a portion of the data to use as the void* parameter\\n    std::vector<uint8_t> buffer = fuzzed_data.ConsumeBytes<uint8_t>(fuzzed_data.remaining_bytes() / 2);\\n    void *buffer_ptr = buffer.data();\\n\\n    // Consume an integer value for the second parameter\\n    int int_param = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Create an instance of the subclass to call the protected function\\n    LibRawFuzzer libraw_fuzzer;\\n\\n    // Call the function-under-test\\n    libraw_fuzzer.crxLoadDecodeLoop(buffer_ptr, int_param);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}