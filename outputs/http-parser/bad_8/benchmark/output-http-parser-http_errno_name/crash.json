{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "19.76",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  // Initialize the parser\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  http_parser_init(&parser, HTTP_BOTH); // HTTP_BOTH to handle both requests and responses\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Define callback functions (these can be empty for now)\\n  settings.on_message_begin = NULL;\\n  settings.on_url = NULL;\\n  settings.on_status = NULL;\\n  settings.on_header_field = NULL;\\n  settings.on_header_value = NULL;\\n  settings.on_headers_complete = NULL;\\n  settings.on_body = NULL;\\n  settings.on_message_complete = NULL;\\n  settings.on_chunk_header = NULL;\\n  settings.on_chunk_complete = NULL;\\n\\n  // Execute the parser\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check for errors\\n  if (parser.http_errno != HPE_OK) {\\n    const char *err_name = http_errno_name((enum http_errno)parser.http_errno);\\n    const char *err_desc = http_errno_description((enum http_errno)parser.http_errno);\\n    // You can log the error name and description if needed\\n  }\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h> // Include for memcpy\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  // Initialize the HTTP parser\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Initialize the settings\\n  http_parser_settings settings;\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Define a callback function for the parser\\n  settings.on_message_begin = [](http_parser* p) -> int {\\n    return 0;\\n  };\\n\\n  // Parse the input data\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n  // Ensure we have a valid value for the enum http_errno\\n  enum http_errno err_no = HTTP_PARSER_ERRNO(&parser);\\n\\n  // Call the function under test\\n  const char *name = http_errno_name(err_no);\\n\\n  // Ensure the name is utilized to prevent optimization from removing the call\\n  if (name != NULL) {\\n    volatile char first_char = name[0];\\n  }\\n\\n  return 0;\\n}\\n\\n// Remove the main function to avoid multiple definition error",
        "model": ""
    }

    ]
}