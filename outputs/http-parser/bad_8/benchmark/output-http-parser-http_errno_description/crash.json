{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "27.20",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  // Fixing the C++ style cast to C style cast\\n  enum http_errno err_no = (enum http_errno)(data[0] % 21); // 21 is the number of error codes in http_errno\\n  const char *description = http_errno_description(err_no);\\n\\n  // Use the description to avoid compiler optimizations\\n  if (description) {\\n    volatile char dummy;\\n    dummy = description[0];\\n  }\\n\\n  // Additional code to increase code coverage\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_REQUEST);\\n\\n  http_parser_settings settings;\\n  memset(&settings, 0, sizeof(settings));\\n\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Use the parsed value to avoid compiler optimizations\\n  if (parsed) {\\n    volatile size_t dummy_parsed;\\n    dummy_parsed = parsed;\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.66",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stddef.h>\\n#include <stdint.h>\\n#include <http_parser.h> // Include the necessary library for http_errno_description\\n\\n// Remove the extern \"C\" linkage specification for C++\\n// This is a C code, so extern \"C\" is not needed\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Ensure the input data size is sufficient for an http_errno value\\n    if (size < sizeof(enum http_errno)) {\\n        return 0;\\n    }\\n\\n    // Cast the input data to an http_errno\\n    enum http_errno err = *(const enum http_errno *)data;\\n\\n    // Ensure the err value is within the valid range of http_errno\\n    if (err < 0 || err >= HPE_INVALID_HEADER_TOKEN) { // HPE_INVALID_HEADER_TOKEN is the last enum value in http_errno\\n        return 0;\\n    }\\n\\n    // Call the target function with the casted http_errno\\n    const char *description = http_errno_description(err);\\n\\n    // Optionally, do something with the description to avoid compiler optimizations\\n    if (description) {\\n        // For example, print the description (this is optional and can be removed)\\n        // printf(\"%s\\\n\", description);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}