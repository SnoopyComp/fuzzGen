{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "27.59",
        "coverage_diff": "0.0037735849056603774",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  if (size == 0) return 0;\\n\\n  // Initialize the parser with a valid type\\n  http_parser_init(&parser, HTTP_REQUEST);\\n\\n  // Initialize parser settings to default values\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Call the function under test\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check for errors\\n  if (parser.http_errno != HPE_OK) {\\n    return 0;\\n  }\\n\\n  // Determine if the connection should be kept alive\\n  int keep_alive = http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "3.16",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n\\n  if (size == 0) return 0;\\n\\n  int type = data[0] % 3;\\n  http_parser_init(&parser, (enum http_parser_type)type);\\n\\n  size_t rest_size = size - 1;\\n  const uint8_t *rest = data + 1;\\n  parser.http_major = rest_size > 0 ? rest[0] : 1;\\n  parser.http_minor = rest_size > 1 ? rest[1] : 1;\\n  parser.flags = rest_size > 2 ? rest[2] : 0;\\n  parser.content_length = rest_size > 3 ? rest[3] : 0;\\n  parser.http_errno = rest_size > 4 ? (enum http_errno)(rest[4] % 48) : HPE_OK;\\n  parser.upgrade = rest_size > 5 ? rest[5] : 0;\\n  parser.method = rest_size > 6 ? (enum http_method)(rest[6] % 40) : HTTP_GET;\\n\\n  int should_keep_alive = http_should_keep_alive(&parser);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}