{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "7.07",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  // Use the first byte of data to determine the http_errno value\\n  enum http_errno err_no = (enum http_errno)(data[0] % (HPE_INVALID_EOF_STATE + 1));\\n\\n  // Call the function-under-test\\n  const char *description = http_errno_description(err_no);\\n\\n  // Ensure description is not NULL to avoid any potential issues\\n  if (description != NULL) {\\n    // Optionally, you can do something with the description here\\n    // For example, you can print the description or use it in some way\\n  }\\n\\n  // Additionally, we can test other functions in the http_parser library\\n  // to ensure more code coverage and effective fuzzing\\n\\n  // Initialize a parser\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_REQUEST);\\n\\n  // Set up a settings structure\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  // Parse the input data\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n  // Check if there was an error during parsing\\n  if (parser.http_errno != HPE_OK) {\\n    // Handle the error if needed\\n  }\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "6.39",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <stdio.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  // Initialize the parser\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_REQUEST);\\n\\n  // Initialize the settings\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  // Parse the input data\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check for errors\\n  if (parser.http_errno != HPE_OK) {\\n    // Get the description of the error\\n    const char *description = http_errno_description((enum http_errno)parser.http_errno);\\n\\n    // Print the description to ensure it's being used\\n    if (description != NULL) {\\n      printf(\"Error description: %s\\\n\", description);\\n    }\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}