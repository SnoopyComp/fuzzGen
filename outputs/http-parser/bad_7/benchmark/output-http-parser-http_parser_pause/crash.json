{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "19.43",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" {\\n  int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) return 0;\\n\\n    http_parser parser;\\n    http_parser_init(&parser, HTTP_BOTH);\\n\\n    int pause = data[0] % 2; // Use the first byte to decide the pause value (0 or 1)\\n    http_parser_pause(&parser, pause);\\n\\n    // Create a settings object and initialize it\\n    http_parser_settings settings;\\n    memset(&settings, 0, sizeof(settings));\\n\\n    // Use the remaining data as input to the parser\\n    if (size > 1) {\\n      http_parser_execute(&parser, &settings, (const char *)(data + 1), size - 1);\\n    }\\n\\n    return 0;\\n  }\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "32.15",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n  memset(&settings, 0, sizeof(settings)); // Initialize settings to zero\\n\\n  // Initialize parser\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Use the first byte to decide the value of pause (0 or 1)\\n  int pause = data[0] % 2;\\n  http_parser_pause(&parser, pause);\\n\\n  // Feed the data into the parser\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check if the entire input was parsed\\n  if (parsed != size) {\\n    // Handle parse error\\n    http_errno err = HTTP_PARSER_ERRNO(&parser);\\n    // You can log or handle the error as needed\\n  }\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    }

    ]
}