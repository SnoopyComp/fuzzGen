{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.77",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  // Use the first byte of data to determine the http_errno value\\n  enum http_errno err_no = (enum http_errno)(data[0] % 20); // Assuming 20 is the max value for http_errno\\n\\n  // Call the function under test\\n  const char *name = http_errno_name(err_no);\\n\\n  // Ensure name is not NULL\\n  if (name == NULL) return 0;\\n\\n  // Use the remaining data to simulate further processing if needed\\n  if (size > 1) {\\n    const char *description = http_errno_description(err_no);\\n    if (description == NULL) return 0;\\n  }\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.55",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h> // For size_t\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  // Iterate over the input data and use each byte to determine the http_errno value.\\n  for (size_t i = 0; i < size; ++i) {\\n    enum http_errno err_no = (enum http_errno)(data[i] % 20); // Assuming 20 is the maximum value for http_errno\\n\\n    // Call the function-under-test\\n    const char *name = http_errno_name(err_no);\\n\\n    // Ensure name is not NULL\\n    if (name != NULL) {\\n      // Optionally, you can do something with the name, like printing or logging.\\n      // For now, we will just use it to avoid compiler warnings.\\n      (void)name;\\n    }\\n  }\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    }

    ]
}