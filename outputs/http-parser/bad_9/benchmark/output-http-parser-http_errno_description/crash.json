{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "21.97",
        "coverage_diff": "0.0037735849056603774",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h>\\n\\n// Callback functions for http_parser, no-op implementations\\nint on_message_begin(http_parser *parser) { return 0; }\\nint on_headers_complete(http_parser *parser) { return 0; }\\nint on_message_complete(http_parser *parser) { return 0; }\\nint on_url(http_parser *parser, const char *at, size_t length) { return 0; }\\nint on_status(http_parser *parser, const char *at, size_t length) { return 0; }\\nint on_header_field(http_parser *parser, const char *at, size_t length) { return 0; }\\nint on_header_value(http_parser *parser, const char *at, size_t length) { return 0; }\\nint on_body(http_parser *parser, const char *at, size_t length) { return 0; }\\n\\nextern \"C\" {\\n    int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n        if (size == 0) return 0;\\n\\n        // Initialize the parser\\n        http_parser parser;\\n        http_parser_init(&parser, HTTP_BOTH);\\n\\n        // Set up the settings with the callback functions\\n        http_parser_settings settings;\\n        memset(&settings, 0, sizeof(settings));\\n        settings.on_message_begin = on_message_begin;\\n        settings.on_headers_complete = on_headers_complete;\\n        settings.on_message_complete = on_message_complete;\\n        settings.on_url = on_url;\\n        settings.on_status = on_status;\\n        settings.on_header_field = on_header_field;\\n        settings.on_header_value = on_header_value;\\n        settings.on_body = on_body;\\n\\n        // Execute the parser\\n        size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n        // Check for errors\\n        if (parser.http_errno != HPE_OK) {\\n            const char *description = http_errno_description((enum http_errno)parser.http_errno);\\n            // Use the description in some way to avoid compiler optimizations removing the call\\n            if (description) {\\n                volatile char first_char = description[0];\\n                (void)first_char;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "32.01",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h>\\n\\nextern \"C\" {\\n    int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n        if (size == 0) return 0;\\n\\n        // Initialize the parser\\n        http_parser parser;\\n        http_parser_init(&parser, HTTP_BOTH); // HTTP_BOTH to handle both requests and responses\\n\\n        // Set up settings with no-op callbacks\\n        http_parser_settings settings;\\n        memset(&settings, 0, sizeof(settings));\\n\\n        // Parse the input data\\n        size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n        // Check for errors\\n        if (parser.http_errno != HPE_OK) {\\n            const char *description = http_errno_description((enum http_errno)parser.http_errno);\\n        }\\n\\n        return 0;\\n    }\\n}",
        "model": ""
    }

    ]
}