{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "22.21",
        "coverage_diff": "0.0037735849056603774",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h>\\n\\nextern \"C\" {\\n  int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) return 0;\\n\\n    http_parser parser;\\n    http_parser_settings settings;\\n    memset(&parser, 0, sizeof(parser));\\n    memset(&settings, 0, sizeof(settings));\\n\\n    http_parser_init(&parser, HTTP_BOTH); // Initialize the parser for both requests and responses\\n\\n    // Define minimal callback functions to ensure the parser works\\n    settings.on_message_begin = [](http_parser* p) { return 0; };\\n    settings.on_url = [](http_parser* p, const char* at, size_t length) { return 0; };\\n    settings.on_status = [](http_parser* p, const char* at, size_t length) { return 0; };\\n    settings.on_header_field = [](http_parser* p, const char* at, size_t length) { return 0; };\\n    settings.on_header_value = [](http_parser* p, const char* at, size_t length) { return 0; };\\n    settings.on_headers_complete = [](http_parser* p) { return 0; };\\n    settings.on_body = [](http_parser* p, const char* at, size_t length) { return 0; };\\n    settings.on_message_complete = [](http_parser* p) { return 0; };\\n\\n    size_t nparsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n    // Check for parsing errors\\n    if (parser.http_errno != HPE_OK) {\\n      const char *description = http_errno_description((enum http_errno)parser.http_errno);\\n    }\\n\\n    return 0;\\n  }\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "33.15",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" {\\n  int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) return 0;\\n\\n    http_parser parser;\\n    http_parser_settings settings;\\n\\n    http_parser_init(&parser, HTTP_BOTH);\\n    memset(&settings, 0, sizeof(settings));\\n\\n    http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n    // Call the required function to get the error description\\n    const char *error_desc = http_errno_description((enum http_errno)parser.http_errno);\\n\\n    // Optionally, you can use the error description in some way\\n    // For example, print it (though in fuzzing, this might not be necessary)\\n    // printf(\"Error description: %s\\\n\", error_desc);\\n\\n    return 0;\\n  }\\n}",
        "model": ""
    }

    ]
}