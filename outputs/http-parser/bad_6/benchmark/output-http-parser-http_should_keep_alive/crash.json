{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "3.16",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  parser.http_major = data[0] % 256;\\n  parser.http_minor = size > 1 ? data[1] % 256 : 1;\\n  parser.status_code = size > 2 ? data[2] % 600 : 200;\\n  parser.method = size > 3 ? (enum http_method)(data[3] % 40) : HTTP_GET;\\n  parser.flags = size > 4 ? data[4] : 0;\\n  parser.content_length = size > 5 ? data[5] : 0;\\n  parser.http_errno = size > 6 ? (enum http_errno)(data[6] % 48) : HPE_OK;\\n  parser.upgrade = size > 7 ? data[7] : 0;\\n\\n  int keep_alive = http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "21.88",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n// Define a simple callback structure for the parser\\nstatic int on_message_begin(http_parser* _) { return 0; }\\nstatic int on_headers_complete(http_parser* _) { return 0; }\\nstatic int on_message_complete(http_parser* _) { return 0; }\\nstatic int on_url(http_parser* _, const char* at, size_t length) { return 0; }\\nstatic int on_status(http_parser* _, const char* at, size_t length) { return 0; }\\nstatic int on_header_field(http_parser* _, const char* at, size_t length) { return 0; }\\nstatic int on_header_value(http_parser* _, const char* at, size_t length) { return 0; }\\nstatic int on_body(http_parser* _, const char* at, size_t length) { return 0; }\\n\\nhttp_parser_settings settings = {\\n  .on_message_begin = on_message_begin,\\n  .on_headers_complete = on_headers_complete,\\n  .on_message_complete = on_message_complete,\\n  .on_url = on_url,\\n  .on_status = on_status,\\n  .on_header_field = on_header_field,\\n  .on_header_value = on_header_value,\\n  .on_body = on_body\\n};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Initialize parser fields with some data\\n  parser.http_major = 1;\\n  parser.http_minor = 1;\\n  parser.status_code = 200;\\n  parser.method = HTTP_GET;\\n  parser.flags = 0;\\n  parser.content_length = 0;\\n  parser.http_errno = HPE_OK;\\n  parser.upgrade = 0;\\n\\n  // Parse the input data\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n  // Check for errors\\n  if (parser.http_errno != HPE_OK) {\\n    return 0;\\n  }\\n\\n  // Call the function under test\\n  int keep_alive = http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}