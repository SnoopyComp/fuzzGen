{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.99",
        "coverage_diff": "0.0037735849056603774",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Ensure the function is correctly linked for fuzzing\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n\\n  if(size == 0)\\n    return 0;\\n\\n  // Initialize the parser with a valid type\\n  int type = data[0] % 3;\\n  http_parser_init(&parser, (http_parser_type)type);\\n\\n  // Set some fields in the parser to non-null values\\n  parser.http_major = 1;\\n  parser.http_minor = 1;\\n  parser.flags = 0;\\n  parser.content_length = 0;\\n  parser.http_errno = HPE_OK;\\n  parser.upgrade = 0;\\n  parser.method = HTTP_GET;\\n\\n  // Call the function-under-test\\n  int keep_alive = http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "20.86",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Initialize parser settings\\n  http_parser_settings settings;\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Call the function under test\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n  // Check if the parsing was successful\\n  if (parser.http_errno != HPE_OK) {\\n    return 0;\\n  }\\n\\n  // Determine if the connection should be kept alive\\n  int result = http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}