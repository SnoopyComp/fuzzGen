{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "29.14",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  // Use the first byte of data to determine the http_errno value\\n  enum http_errno err_no = (enum http_errno)(data[0] % 20); // HTTP_ERRNO_MAX is 20\\n\\n  // Call the function under test\\n  const char *description = http_errno_description(err_no);\\n\\n  // Ensure the description is not NULL\\n  if (description == NULL) return 0;\\n\\n  // Use more of the input data to simulate a more complex scenario\\n  // For example, we can parse a HTTP message using http_parser\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  http_parser_settings settings;\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Parse the input data\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check for errors during parsing\\n  if (parser.http_errno != HPE_OK) {\\n    return 0;\\n  }\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "20.86",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h>\\n\\nextern \"C\" {\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  // Initialize the HTTP parser\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Create settings with callbacks\\n  http_parser_settings settings;\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Use the parser to parse the input data\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check for parsing errors\\n  if (parser.http_errno != HPE_OK) {\\n    const char *description = http_errno_description((enum http_errno)parser.http_errno);\\n  }\\n\\n  return 0;\\n}\\n}",
        "model": ""
    }

    ]
}