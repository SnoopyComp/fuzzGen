{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "20.09",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  // Initialize the parser\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Set up the parser settings\\n  http_parser_settings settings;\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Parse the input data\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check for errors\\n  if (parser.http_errno != HPE_OK) {\\n    // Call the function under test\\n    const char *name = http_errno_name(parser.http_errno);\\n\\n    // Ensure the name is not null\\n    if (name == NULL) return 0;\\n  }\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "20.46",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h>\\n\\nextern \"C\" {\\n  int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) return 0;\\n\\n    // Initialize http_parser\\n    http_parser parser;\\n    http_parser_init(&parser, HTTP_BOTH);\\n\\n    // Define callbacks (dummy callbacks for now)\\n    http_parser_settings settings;\\n    memset(&settings, 0, sizeof(settings));\\n\\n    // Set up a dummy data structure to avoid unused variable warnings\\n    struct {\\n      const char *name;\\n      const char *value;\\n    } headers[100];\\n    size_t num_headers = 0;\\n\\n    settings.on_header_field = [](http_parser *p, const char *at, size_t length) -> int {\\n      return 0;\\n    };\\n    settings.on_header_value = [](http_parser *p, const char *at, size_t length) -> int {\\n      return 0;\\n    };\\n    settings.on_body = [](http_parser *p, const char *at, size_t length) -> int {\\n      return 0;\\n    };\\n\\n    // Parse the input data\\n    size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n    // Check for errors\\n    if (parser.http_errno != HPE_OK) {\\n      const char *error_name = http_errno_name((enum http_errno)parser.http_errno);\\n      (void)error_name; // To avoid unused variable warning\\n    }\\n\\n    return 0;\\n  }\\n}",
        "model": ""
    }

    ]
}