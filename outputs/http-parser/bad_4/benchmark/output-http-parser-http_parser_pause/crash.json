{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "22.30",
        "coverage_diff": "0.005660377358490566",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  // Initialize the parser and settings\\n  http_parser_init(&parser, HTTP_BOTH);\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Define dummy callbacks for the parser settings\\n  settings.on_message_begin = [](http_parser* p) { return 0; };\\n  settings.on_url = [](http_parser* p, const char* at, size_t length) { return 0; };\\n  settings.on_status = [](http_parser* p, const char* at, size_t length) { return 0; };\\n  settings.on_header_field = [](http_parser* p, const char* at, size_t length) { return 0; };\\n  settings.on_header_value = [](http_parser* p, const char* at, size_t length) { return 0; };\\n  settings.on_headers_complete = [](http_parser* p) { return 0; };\\n  settings.on_body = [](http_parser* p, const char* at, size_t length) { return 0; };\\n  settings.on_message_complete = [](http_parser* p) { return 0; };\\n  settings.on_chunk_header = [](http_parser* p) { return 0; };\\n  settings.on_chunk_complete = [](http_parser* p) { return 0; };\\n\\n  // Parse the input data\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n  // Check for parsing errors\\n  if (parsed != size) {\\n    // Handle error\\n    return 0;\\n  }\\n\\n  // Call http_parser_pause to satisfy the requirement\\n  http_parser_pause(&parser, 1);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "21.18",
        "coverage_diff": "0.005660377358490566",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <assert.h>\\n\\n// Define dummy callback functions to avoid null pointer dereference\\nint on_message_begin(http_parser* p) { return 0; }\\nint on_url(http_parser* p, const char* at, size_t length) { return 0; }\\nint on_status(http_parser* p, const char* at, size_t length) { return 0; }\\nint on_header_field(http_parser* p, const char* at, size_t length) { return 0; }\\nint on_header_value(http_parser* p, const char* at, size_t length) { return 0; }\\nint on_headers_complete(http_parser* p) { return 0; }\\nint on_body(http_parser* p, const char* at, size_t length) { return 0; }\\nint on_message_complete(http_parser* p) { return 0; }\\nint on_chunk_header(http_parser* p) { return 0; }\\nint on_chunk_complete(http_parser* p) { return 0; }\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  // Initialize the parser and settings\\n  http_parser_init(&parser, HTTP_BOTH);\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Assign the dummy callback functions\\n  settings.on_message_begin = on_message_begin;\\n  settings.on_url = on_url;\\n  settings.on_status = on_status;\\n  settings.on_header_field = on_header_field;\\n  settings.on_header_value = on_header_value;\\n  settings.on_headers_complete = on_headers_complete;\\n  settings.on_body = on_body;\\n  settings.on_message_complete = on_message_complete;\\n  settings.on_chunk_header = on_chunk_header;\\n  settings.on_chunk_complete = on_chunk_complete;\\n\\n  // Use the first byte of data to determine the pause value\\n  int pause = data[0] % 2;\\n\\n  // Feed the parser with the remaining data\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)data + 1, size - 1);\\n\\n  // Ensure the parser is not paused before attempting to pause it\\n  if (parser.http_errno == HPE_OK) {\\n    http_parser_pause(&parser, pause);\\n  }\\n\\n  // Check for errors\\n  if (parser.http_errno != HPE_OK && parser.http_errno != HPE_PAUSED) {\\n    return 0;\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}