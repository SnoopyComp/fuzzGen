{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "7.17",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>  // Include for size_t\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  // Initialize the HTTP parser\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  // Set up the parser settings with default callbacks\\n  http_parser_settings_init(&settings);\\n\\n  // Initialize the parser with HTTP_REQUEST type\\n  http_parser_init(&parser, HTTP_REQUEST);\\n\\n  // Execute the parser with the provided data\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check for parsing errors\\n  if (parser.http_errno != HPE_OK) {\\n    const char *error_description = http_errno_description((enum http_errno)parser.http_errno);\\n    // Ensure the error description is not null and use it in some way to avoid compiler optimizations\\n    if (error_description != NULL) {\\n      volatile char first_char = error_description[0];\\n      (void)first_char;\\n    }\\n  }\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "20.20",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n  \\n  http_parser_init(&parser, HTTP_BOTH); // Initialize the parser for both requests and responses\\n  memset(&settings, 0, sizeof(settings)); // Zero out the settings structure\\n\\n  // Set up some basic callbacks (these can be expanded as needed)\\n  settings.on_message_begin = NULL;\\n  settings.on_url = NULL;\\n  settings.on_status = NULL;\\n  settings.on_header_field = NULL;\\n  settings.on_header_value = NULL;\\n  settings.on_headers_complete = NULL;\\n  settings.on_body = NULL;\\n  settings.on_message_complete = NULL;\\n\\n  // Parse the input data\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check for errors\\n  if (parser.http_errno != HPE_OK) {\\n    const char *error_description = http_errno_description(HTTP_PARSER_ERRNO(&parser));\\n  }\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    }

    ]
}