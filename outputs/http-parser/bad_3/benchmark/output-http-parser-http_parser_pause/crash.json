{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "21.52",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  // Initialize the parser and settings\\n  http_parser_init(&parser, HTTP_BOTH);\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Use the first byte of data to decide the value of the pause argument\\n  int pause = data[0] % 2;\\n\\n  // Feed the parser with the input data\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check if there was an error during parsing\\n  if (parser.http_errno != HPE_OK) {\\n    return 0;\\n  }\\n\\n  // Call the function-under-test\\n  http_parser_pause(&parser, pause);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "24.28",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Initialize settings with default values\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Use the first byte of data to determine the pause value\\n  int pause_value = data[0] % 2;\\n\\n  // Call the function under test\\n  http_parser_pause(&parser, pause_value);\\n\\n  // Feed the remaining data to the parser\\n  if (size > 1) {\\n    http_parser_execute(&parser, &settings, (const char *)(data + 1), size - 1);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}