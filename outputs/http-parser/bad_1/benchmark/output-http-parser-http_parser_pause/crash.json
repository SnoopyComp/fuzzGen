{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "30.96",
        "coverage_diff": "0.005660377358490566",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" {\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (data == NULL || size == 0) {\\n    return 0;  // Ensure that the input data is not null and size is greater than 0\\n  }\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  // Initialize the parser and settings\\n  http_parser_init(&parser, HTTP_BOTH);\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Define some basic callbacks\\n  settings.on_message_begin = [](http_parser* p) -> int { return 0; };\\n  settings.on_url = [](http_parser* p, const char *at, size_t length) -> int { return 0; };\\n  settings.on_header_field = [](http_parser* p, const char *at, size_t length) -> int { return 0; };\\n  settings.on_header_value = [](http_parser* p, const char *at, size_t length) -> int { return 0; };\\n  settings.on_headers_complete = [](http_parser* p) -> int { return 0; };\\n  settings.on_body = [](http_parser* p, const char *at, size_t length) -> int { return 0; };\\n  settings.on_message_complete = [](http_parser* p) -> int { return 0; };\\n\\n  // Use the first byte to decide the value of pause\\n  int pause = data[0] % 2;\\n\\n  // Parse the input data\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n  // Check for errors\\n  if (parsed != size) {\\n    return 0;  // Error in parsing\\n  }\\n\\n  // Call the function under test\\n  http_parser_pause(&parser, pause);\\n\\n  return 0;\\n}\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "19.45",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) return 0; // Ensure there's enough data to parse\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n  \\n  // Initialize parser and settings\\n  http_parser_init(&parser, HTTP_BOTH);\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Use the first byte to decide the value of pause (0 or 1)\\n  int pause = data[0] % 2;\\n  http_parser_pause(&parser, pause);\\n\\n  // Parse the remaining data\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)(data + 1), size - 1);\\n  \\n  // Check for errors\\n  if (parser.http_errno != HPE_OK) {\\n    // Handle error if needed\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}