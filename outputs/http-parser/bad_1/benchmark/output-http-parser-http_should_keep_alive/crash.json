{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern \"C\" {\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Initialize parser fields with fuzz data if available\\n  parser.http_major = size > 0 ? data[0] : 1;\\n  parser.http_minor = size > 1 ? data[1] : 1;\\n  parser.flags = size > 2 ? data[2] : 0;\\n  parser.content_length = size > 3 ? data[3] : 0;\\n  parser.http_errno = size > 4 ? static_cast<http_errno>(data[4] % 48) : HPE_OK;\\n  parser.upgrade = size > 5 ? data[5] : 0;\\n  parser.method = size > 6 ? static_cast<http_method>(data[6] % 40) : HTTP_GET;\\n\\n  // Call the function under test\\n  int keep_alive = http_should_keep_alive(&parser);\\n\\n  return 0;\\n}\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  \\n  // Initialize the parser with a valid type\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  if (size >= 1) {\\n    // Use the first byte to set the HTTP major version\\n    parser.http_major = data[0];\\n  }\\n  \\n  if (size >= 2) {\\n    // Use the second byte to set the HTTP minor version\\n    parser.http_minor = data[1];\\n  }\\n  \\n  if (size >= 3) {\\n    // Use the third byte to set the flags\\n    parser.flags = data[2];\\n  }\\n  \\n  if (size >= 4) {\\n    // Use the fourth byte to set the content length\\n    parser.content_length = data[3];\\n  }\\n  \\n  if (size >= 5) {\\n    // Use the fifth byte to set the HTTP error code\\n    parser.http_errno = (enum http_errno)(data[4] % 48); // Ensure it's within valid range\\n  }\\n  \\n  if (size >= 6) {\\n    // Use the sixth byte to set the upgrade flag\\n    parser.upgrade = data[5];\\n  }\\n  \\n  if (size >= 7) {\\n    // Use the seventh byte to set the HTTP method\\n    parser.method = (enum http_method)(data[6] % 40); // Ensure it's within valid range\\n  }\\n  \\n  // Call the function under test\\n  int keep_alive = http_should_keep_alive(&parser);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}