{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "23.44",
        "coverage_diff": "0.005660377358490566",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n// Callback functions for http_parser\\nint on_message_begin(http_parser* _) { return 0; }\\nint on_headers_complete(http_parser* _) { return 0; }\\nint on_message_complete(http_parser* _) { return 0; }\\nint on_url(http_parser* _, const char* at, size_t length) { return 0; }\\nint on_header_field(http_parser* _, const char* at, size_t length) { return 0; }\\nint on_header_value(http_parser* _, const char* at, size_t length) { return 0; }\\nint on_body(http_parser* _, const char* at, size_t length) { return 0; }\\n\\nhttp_parser_settings settings = {\\n  .on_message_begin = on_message_begin,\\n  .on_headers_complete = on_headers_complete,\\n  .on_message_complete = on_message_complete,\\n  .on_url = on_url,\\n  .on_header_field = on_header_field,\\n  .on_header_value = on_header_value,\\n  .on_body = on_body\\n};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Parse the input data as an HTTP message\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n  if (parsed != size) {\\n    // If parsing did not consume all input, return early\\n    return 0;\\n  }\\n\\n  // Use the first byte to determine the value of pause\\n  int pause = data[0] % 2;\\n\\n  // Call the function under test\\n  http_parser_pause(&parser, pause);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "1.64",
        "coverage_diff": "0.0018867924528301887",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern \"C\" {\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  // Initialize the parser with a valid type\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Initialize the settings\\n  http_parser_settings_init(&settings);\\n\\n  // Define some dummy callbacks to increase code coverage\\n  settings.on_message_begin = [](http_parser* p) { return 0; };\\n  settings.on_url = [](http_parser* p, const char* at, size_t length) { return 0; };\\n  settings.on_status = [](http_parser* p, const char* at, size_t length) { return 0; };\\n  settings.on_header_field = [](http_parser* p, const char* at, size_t length) { return 0; };\\n  settings.on_header_value = [](http_parser* p, const char* at, size_t length) { return 0; };\\n  settings.on_headers_complete = [](http_parser* p) { return 0; };\\n  settings.on_body = [](http_parser* p, const char* at, size_t length) { return 0; };\\n  settings.on_message_complete = [](http_parser* p) { return 0; };\\n  settings.on_chunk_header = [](http_parser* p) { return 0; };\\n  settings.on_chunk_complete = [](http_parser* p) { return 0; };\\n\\n  // Execute the parser with the provided data\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n  // Check if the parser is in a state that allows pausing before calling http_parser_pause\\n  if (parsed < size && HTTP_PARSER_ERRNO(&parser) != HPE_OK) {\\n    http_parser_pause(&parser, 1);\\n  }\\n\\n  return 0;\\n}\\n}",
        "model": ""
    }

    ]
}