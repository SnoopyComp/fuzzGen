{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "7.84",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h>\\n#include <stdio.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  // Initialize parser and settings\\n  http_parser parser;\\n  http_parser_settings settings;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Parse the input data\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Call the required function to get error description if there was an error\\n  if (parser.http_errno != HPE_OK) {\\n    const char *error_description = http_errno_description((enum http_errno)parser.http_errno);\\n    // Print the error description for debugging purposes\\n    printf(\"Error: %s\\\n\", error_description);\\n  }\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "29.55",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" {\\n  int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) return 0;\\n\\n    // Initialize the parser\\n    http_parser parser;\\n    http_parser_settings settings;\\n\\n    // Set up the parser settings with default callbacks\\n    http_parser_settings_init(&settings);\\n    http_parser_init(&parser, HTTP_BOTH);\\n\\n    // Execute the parser with the provided data\\n    size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n    // Check if the parsing was successful or if there was an error\\n    if (parsed != size) {\\n      enum http_errno err_no = HTTP_PARSER_ERRNO(&parser);\\n      const char *description = http_errno_description(err_no);\\n\\n      // Use the description in some way to ensure it's not optimized out\\n      if (description) {\\n        volatile size_t desc_len = strlen(description);\\n      }\\n    }\\n\\n    return 0;\\n  }\\n}",
        "model": ""
    }

    ]
}