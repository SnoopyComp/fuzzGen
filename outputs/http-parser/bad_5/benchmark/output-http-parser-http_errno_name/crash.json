{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "25.06",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h>\\n\\nextern \"C\" {\\n  int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) return 0;\\n\\n    // Initialize the HTTP parser\\n    http_parser parser;\\n    http_parser_init(&parser, HTTP_BOTH);\\n\\n    // Initialize the settings\\n    http_parser_settings settings;\\n    memset(&settings, 0, sizeof(settings));\\n\\n    // Execute the parser with the provided data\\n    size_t nparsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n    // Check for errors\\n    if (parser.http_errno != HPE_OK) {\\n      const char *error_name = http_errno_name((enum http_errno)parser.http_errno);\\n      // Ensure the error_name is not NULL to avoid unused variable warning\\n      if (error_name != NULL) {\\n        // Do something with the error_name if needed\\n      }\\n    }\\n\\n    return 0;\\n  }\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "26.71",
        "coverage_diff": "0.006918238993710692",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  // Initialize parser settings\\n  http_parser_settings_init(&settings);\\n\\n  // Initialize the parser with HTTP_REQUEST type\\n  http_parser_init(&parser, HTTP_REQUEST);\\n\\n  // Parse the input data\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check for errors\\n  if (parser.http_errno != HPE_OK) {\\n    const char *error_name = http_errno_name(parser.http_errno);\\n    const char *error_description = http_errno_description(parser.http_errno);\\n    // Optional: Log the error name and description\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}