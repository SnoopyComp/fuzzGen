{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "33.33",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Initialize parser fields with non-NULL values\\n  parser.http_major = 1;\\n  parser.http_minor = 1;\\n  parser.status_code = 200;\\n  parser.method = HTTP_GET;\\n  parser.http_errno = HPE_OK;\\n  parser.upgrade = 0;\\n  parser.content_length = 0;\\n\\n  // Initialize settings with default values\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Call the function under test by parsing the input data\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check if the parsing was successful\\n  if (parser.http_errno != HPE_OK) {\\n    return 0;\\n  }\\n\\n  // Call the function under test\\n  int result = http_should_keep_alive(&parser);\\n\\n  (void)result; // Suppress unused variable warning\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.10",
        "coverage_diff": "0.0037735849056603774",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n\\n  if (size == 0) return 0;\\n\\n  // Initialize the parser with some default values\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Assign some values to the parser fields based on the input data\\n  parser.http_major = data[0] % 2;\\n  parser.http_minor = data[0] % 2;\\n  parser.status_code = data[0];\\n  parser.method = (enum http_method)(data[0] % 40); // Assuming there are 40 methods\\n  parser.http_errno = (enum http_errno)(data[0] % 20); // Assuming there are 20 error codes\\n\\n  // Call the function under test\\n  int keep_alive = http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}