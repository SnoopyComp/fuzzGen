{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "3.16",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" {\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n\\n  if(size == 0)\\n    return 0;\\n\\n  int type = data[0] % 3;\\n  http_parser_init(&parser, static_cast<http_parser_type>(type));\\n\\n  size_t rest_size = size - 1;\\n  const uint8_t *rest = data + 1;\\n  parser.http_major = rest_size > 0 ? rest[0] : 1;\\n  parser.http_minor = rest_size > 1 ? rest[1] : 1;\\n  parser.flags = rest_size > 2 ? rest[2] : 0;\\n  parser.content_length = rest_size > 3 ? rest[3] : 0;\\n  parser.http_errno = rest_size > 4 ? static_cast<http_errno>(rest[4] % 48) : HPE_OK;\\n  parser.upgrade = rest_size > 5 ? rest[5] : 0;\\n  parser.method = rest_size > 6 ? static_cast<http_method>(rest[6] % 40) : HTTP_GET;\\n\\n  int should_keep_alive = http_should_keep_alive(&parser);\\n  \\n  return 0;\\n}\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "20.66",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" {\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  // Initialize the parser and settings\\n  http_parser_init(&parser, HTTP_BOTH);\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Set up callback functions (if any, here we use default no-op callbacks)\\n  settings.on_message_begin = NULL;\\n  settings.on_url = NULL;\\n  settings.on_status = NULL;\\n  settings.on_header_field = NULL;\\n  settings.on_header_value = NULL;\\n  settings.on_headers_complete = NULL;\\n  settings.on_body = NULL;\\n  settings.on_message_complete = NULL;\\n  settings.on_chunk_header = NULL;\\n  settings.on_chunk_complete = NULL;\\n\\n  // Call the function under test\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Optionally check for errors\\n  if (parser.http_errno != HPE_OK) {\\n    // Handle error\\n  }\\n\\n  // Call the required function\\n  int keep_alive = http_should_keep_alive(&parser);\\n\\n  return 0;\\n}\\n}",
        "model": ""
    }

    ]
}