{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "21.47",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nstatic int on_message_begin(http_parser *parser) { return 0; }\\nstatic int on_headers_complete(http_parser *parser) { return 0; }\\nstatic int on_message_complete(http_parser *parser) { return 0; }\\nstatic int on_url(http_parser *parser, const char *at, size_t length) { return 0; }\\nstatic int on_status(http_parser *parser, const char *at, size_t length) { return 0; }\\nstatic int on_header_field(http_parser *parser, const char *at, size_t length) { return 0; }\\nstatic int on_header_value(http_parser *parser, const char *at, size_t length) { return 0; }\\nstatic int on_body(http_parser *parser, const char *at, size_t length) { return 0; }\\n\\nextern int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  memset(&settings, 0, sizeof(settings));\\n  settings.on_message_begin = on_message_begin;\\n  settings.on_headers_complete = on_headers_complete;\\n  settings.on_message_complete = on_message_complete;\\n  settings.on_url = on_url;\\n  settings.on_status = on_status;\\n  settings.on_header_field = on_header_field;\\n  settings.on_header_value = on_header_value;\\n  settings.on_body = on_body;\\n\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  int pause = data[0] % 2; // Use the first byte to determine the pause value (0 or 1)\\n  http_parser_pause(&parser, pause);\\n\\n  // Feed the remaining data to the parser\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)(data + 1), size - 1);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "21.36",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n// Define callback functions for the parser\\nint on_message_begin(http_parser *parser) { return 0; }\\nint on_headers_complete(http_parser *parser) { return 0; }\\nint on_message_complete(http_parser *parser) { return 0; }\\nint on_url(http_parser *parser, const char *at, size_t length) { return 0; }\\nint on_status(http_parser *parser, const char *at, size_t length) { return 0; }\\nint on_header_field(http_parser *parser, const char *at, size_t length) { return 0; }\\nint on_header_value(http_parser *parser, const char *at, size_t length) { return 0; }\\nint on_body(http_parser *parser, const char *at, size_t length) { return 0; }\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  // Initialize the parser with a valid type\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Initialize the settings with callback functions\\n  memset(&settings, 0, sizeof(settings));\\n  settings.on_message_begin = on_message_begin;\\n  settings.on_headers_complete = on_headers_complete;\\n  settings.on_message_complete = on_message_complete;\\n  settings.on_url = on_url;\\n  settings.on_status = on_status;\\n  settings.on_header_field = on_header_field;\\n  settings.on_header_value = on_header_value;\\n  settings.on_body = on_body;\\n\\n  if (size > 0) {\\n    // Use the first byte of data to determine the pause value\\n    int pause_value = data[0] % 2;\\n    // Call the function under test\\n    http_parser_pause(&parser, pause_value);\\n\\n    // Execute the parser on the input data\\n    http_parser_execute(&parser, &settings, (const char *)data, size);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}