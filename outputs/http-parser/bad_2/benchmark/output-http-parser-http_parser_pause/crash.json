{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <assert.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  // Initialize parser settings with default callbacks\\n  http_parser_settings_init(&settings);\\n\\n  // Initialize the parser\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Parse the input data\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check if there was a parsing error\\n  if (parser.http_errno != HPE_OK) {\\n    // Handle the error if necessary\\n  }\\n\\n  // Ensure that the parser is in a state where it can be paused\\n  assert(parser.http_errno == HPE_OK);\\n\\n  // Pause the parser to satisfy the requirement\\n  http_parser_pause(&parser, 1);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "21.07",
        "coverage_diff": "0.0012578616352201257",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" {\\n    int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n        http_parser parser;\\n        http_parser_settings settings;\\n\\n        // Initialize the parser and settings\\n        http_parser_init(&parser, HTTP_BOTH);\\n        memset(&settings, 0, sizeof(settings));\\n\\n        // Define dummy callback functions to avoid null dereference\\n        settings.on_message_begin = [](http_parser* p) { return 0; };\\n        settings.on_url = [](http_parser* p, const char* at, size_t length) { return 0; };\\n        settings.on_status = [](http_parser* p, const char* at, size_t length) { return 0; };\\n        settings.on_header_field = [](http_parser* p, const char* at, size_t length) { return 0; };\\n        settings.on_header_value = [](http_parser* p, const char* at, size_t length) { return 0; };\\n        settings.on_headers_complete = [](http_parser* p) { return 0; };\\n        settings.on_body = [](http_parser* p, const char* at, size_t length) { return 0; };\\n        settings.on_message_complete = [](http_parser* p) { return 0; };\\n        settings.on_chunk_header = [](http_parser* p) { return 0; };\\n        settings.on_chunk_complete = [](http_parser* p) { return 0; };\\n\\n        // Execute the parser with the provided data\\n        size_t parsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n        // Ensure the parser is in a valid state before calling http_parser_pause\\n        if (parsed < size && HTTP_PARSER_ERRNO(&parser) == HPE_OK) {\\n            http_parser_pause(&parser, 1);\\n        }\\n\\n        return 0;\\n    }\\n}",
        "model": ""
    }

    ]
}