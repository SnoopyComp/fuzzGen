{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "1.22",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Initialize the parser fields with some values from the input data\\n  parser.http_major = data[0] % 2 ? 1 : 2;\\n  parser.http_minor = data[0] % 2;\\n  parser.status_code = (data[0] % 100) + 100; // HTTP status codes range from 100 to 599\\n  parser.method = (enum http_method)(data[0] % 40); // There are 40 HTTP methods defined in http_parser.h\\n  parser.flags = data[0] % 256;\\n  parser.content_length = size - 1;\\n\\n  // Call the function under test\\n  int keep_alive = http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "21.22",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Initialize parser fields with non-NULL values\\n  parser.http_major = 1;\\n  parser.http_minor = 1;\\n  parser.status_code = 200;\\n  parser.method = HTTP_GET;\\n  parser.http_errno = HPE_OK;\\n  parser.content_length = 0;\\n  parser.upgrade = 0;\\n\\n  // Initialize settings with default values\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Call the function under test\\n  int result = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Check if the parsing was successful\\n  if (result != size) {\\n    // Handle the error if necessary\\n  }\\n\\n  // Call the required function to check if the connection should be kept alive\\n  int keep_alive = http_should_keep_alive(&parser);\\n\\n  // Optionally, handle the result of http_should_keep_alive if necessary\\n  if (keep_alive) {\\n    // Connection should be kept alive\\n  } else {\\n    // Connection should not be kept alive\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}