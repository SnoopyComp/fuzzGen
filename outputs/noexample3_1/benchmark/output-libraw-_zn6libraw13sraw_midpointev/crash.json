{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.79",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\" // Correct path to the libraw header\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create a LibRaw object\\n    LibRaw libraw_obj;\\n\\n    // Feed the data to the LibRaw object\\n    int ret = libraw_obj.open_buffer(data, size);\\n    if (ret != LIBRAW_SUCCESS) {\\n        // If there's an error, return 0 as required by the fuzzer\\n        return 0;\\n    }\\n\\n    // Call the sraw_midpoint method\\n    int result = libraw_obj.sraw_midpoint();\\n\\n    // Return 0 as required by the fuzzer\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.99",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"  // Corrected path for the header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Feed the data to the LibRaw instance using open_buffer\\n    int open_result = libraw_instance.open_buffer(data, size);\\n    if (open_result != LIBRAW_SUCCESS) {\\n        return 0;  // Return early if the buffer could not be opened\\n    }\\n\\n    // Call the function-under-test\\n    int result = libraw_instance.sraw_midpoint();\\n\\n    // Return the result (though it's not necessary for fuzzing purposes)\\n    return result;\\n}",
        "model": ""
    }

    ]
}