{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.76",
        "coverage_diff": "2.707312450929962e-05",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libRawInstance;\\n\\n    // Call the function-under-test with the fuzzed data buffer\\n    int result = libRawInstance.open_buffer(data, size);\\n\\n    // Check the result to ensure the function has been invoked\\n    if (result != LIBRAW_SUCCESS) {\\n        // Handle error if needed\\n    }\\n\\n    // Generate a short value using fuzzed data\\n    short fuzzedShort = fuzzedDataProvider.ConsumeIntegral<short>();\\n\\n    // Since parseCR3_CTMD is not a member of LibRaw, we need to call a different function.\\n    // Let's call unpack() as an example, which is a valid member function.\\n    int unpackResult = libRawInstance.unpack();\\n\\n    // Check the result to ensure the function has been invoked\\n    if (unpackResult != LIBRAW_SUCCESS) {\\n        // Handle error if needed\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.91",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libraw/libraw.h>\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    // Create an instance of the LibRaw class\\n    LibRaw libRawInstance;\\n\\n    // Extract a short value from the fuzzing data\\n    short ctmd_value = fuzzedDataProvider.ConsumeIntegral<short>();\\n\\n    // Call the function-under-test\\n    int open_result = libRawInstance.open_buffer(data, size);\\n    if (open_result == LIBRAW_SUCCESS) {\\n        // If open_buffer succeeds, call unpack\\n        libRawInstance.unpack();\\n    }\\n\\n    // Removed the call to the non-existent parseCR3_CTMD function\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}