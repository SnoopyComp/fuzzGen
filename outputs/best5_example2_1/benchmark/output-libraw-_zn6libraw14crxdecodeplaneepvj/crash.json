{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <vector>\\n#include <cstdint> // Include for uint32_t\\n\\n// Derived class to expose the protected crxDecodePlane method\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(uint32_t)) {\\n        return 0;\\n    }\\n\\n    // Consume a vector of bytes to use as the void* parameter\\n    std::vector<uint8_t> buffer = fuzzedDataProvider.ConsumeBytes<uint8_t>(fuzzedDataProvider.remaining_bytes());\\n    \\n    // Ensure the buffer is not empty and has a reasonable size\\n    if (buffer.size() < sizeof(uint32_t)) {\\n        return 0;\\n    }\\n\\n    void* buffer_ptr = buffer.data();\\n\\n    // Consume an integer value for the second parameter\\n    uint32_t uint32_param = fuzzedDataProvider.ConsumeIntegralInRange<uint32_t>(1, buffer.size());\\n\\n    // Validate buffer_ptr and uint32_param\\n    if (buffer_ptr == nullptr || uint32_param > buffer.size()) {\\n        return 0;\\n    }\\n\\n    // Call the function-under-test\\n    LibRawFuzzer libRawInstance;\\n\\n    // Ensure that the buffer is large enough for the function to process\\n    if (buffer.size() >= uint32_param) {\\n        // Allocate a dummy output buffer to avoid segmentation faults\\n        std::vector<uint8_t> output_buffer(uint32_param);\\n        void* output_buffer_ptr = output_buffer.data();\\n\\n        // Call the function with the dummy output buffer\\n        libRawInstance.crxDecodePlane(output_buffer_ptr, uint32_param);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <vector>\\n#include <cstdint>\\n#include <cstring>\\n#include <iostream>\\n\\n// Derived class to expose the protected crxDecodePlane method\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(uint32_t)) {\\n        return 0;\\n    }\\n\\n    // Consume a vector of bytes to use as the void* parameter\\n    std::vector<uint8_t> buffer = fuzzedDataProvider.ConsumeBytes<uint8_t>(fuzzedDataProvider.remaining_bytes());\\n    void* buffer_ptr = buffer.data();\\n\\n    // Consume an integer value for the second parameter\\n    uint32_t uint_param = fuzzedDataProvider.ConsumeIntegral<uint32_t>();\\n\\n    // Ensure the buffer is not empty and the buffer pointer is valid\\n    if (!buffer.empty() && buffer_ptr != nullptr) {\\n        // Align the buffer pointer to avoid misalignment issues\\n        void* aligned_buffer_ptr = reinterpret_cast<void*>(\\n            (reinterpret_cast<uintptr_t>(buffer_ptr) + alignof(uint32_t) - 1) & ~(alignof(uint32_t) - 1)\\n        );\\n\\n        // Ensure the aligned buffer pointer is within the bounds of the buffer\\n        if (reinterpret_cast<uint8_t*>(aligned_buffer_ptr) + sizeof(uint32_t) <= buffer.data() + buffer.size()) {\\n            // Call the function-under-test\\n            LibRawFuzzer libRawInstance;\\n            libRawInstance.crxDecodePlane(aligned_buffer_ptr, uint_param);\\n        }\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}