{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstring> // For memcpy\\n#include <cstdlib> // For malloc and free\\n\\nnamespace LibRaw {\\n    void crxLoadDecodeLoop(void *, int);\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0; // Avoid processing if there's no data\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Generate a vector of bytes for the void* parameter\\n    std::vector<uint8_t> byte_vector = fuzzed_data.ConsumeBytes<uint8_t>(fuzzed_data.remaining_bytes());\\n    if (byte_vector.empty()) {\\n        return 0; // Avoid passing an empty vector\\n    }\\n    \\n    // Ensure the byte_vector has enough data to be meaningful\\n    if (byte_vector.size() < sizeof(int)) {\\n        return 0; // Ensure there is enough data for a meaningful test\\n    }\\n\\n    // Allocate memory for the data to be passed to the function\\n    void *ptr = malloc(byte_vector.size());\\n    if (!ptr) {\\n        return 0; // Ensure allocation was successful\\n    }\\n\\n    // Copy the data into the allocated memory\\n    memcpy(ptr, byte_vector.data(), byte_vector.size());\\n\\n    // Generate an integer for the int parameter\\n    int int_param = fuzzed_data.ConsumeIntegralInRange<int>(0, byte_vector.size());\\n\\n    // Call the function-under-test\\n    LibRaw::crxLoadDecodeLoop(ptr, int_param);\\n\\n    // Free the allocated memory\\n    free(ptr);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstring>\\n\\nnamespace LibRaw {\\n    void crxLoadDecodeLoop(void *, int);\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Ensure there is enough data to create a buffer\\n    if (size < sizeof(int)) {\\n        return 0; // Not enough data to proceed\\n    }\\n\\n    // Consume a portion of the data for the void* parameter\\n    size_t buffer_size = fuzzed_data.remaining_bytes() / 2;\\n    std::vector<uint8_t> buffer = fuzzed_data.ConsumeBytes<uint8_t>(buffer_size);\\n\\n    // Ensure the buffer is not empty and has a reasonable size\\n    if (buffer.empty() || buffer.size() < sizeof(int)) {\\n        return 0; // Invalid buffer size\\n    }\\n\\n    void *ptr = buffer.data();\\n\\n    // Consume an integer from the remaining data\\n    int int_param = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Call the function-under-test with the fuzzed parameters\\n    try {\\n        // Check if the pointer is valid and points to a sufficiently large buffer\\n        if (ptr != nullptr && buffer_size >= sizeof(int)) {\\n            // Ensure the pointer is properly aligned for the target function\\n            if (reinterpret_cast<uintptr_t>(ptr) % alignof(std::max_align_t) == 0) {\\n                LibRaw::crxLoadDecodeLoop(ptr, int_param);\\n            }\\n        }\\n    } catch (...) {\\n        // Catch any exceptions to prevent the fuzzer from crashing\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}