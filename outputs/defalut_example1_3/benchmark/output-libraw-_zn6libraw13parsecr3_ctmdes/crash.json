{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw rawProcessor;\\n\\n  // Feed the data to the LibRaw instance\\n  int ret = rawProcessor.open_buffer(data, size);\\n  if (ret != LIBRAW_SUCCESS) {\\n    return 0;\\n  }\\n\\n  // Process the image\\n  rawProcessor.unpack();\\n\\n  // Call the dcraw_process function to process the image\\n  ret = rawProcessor.dcraw_process();\\n  if (ret != LIBRAW_SUCCESS) {\\n    return 0;\\n  }\\n\\n  // Call the parseCR3_CTMD function with a short value from the fuzzed data\\n  if (size >= sizeof(short)) {\\n    short cr3_ctmd_value = stream.ConsumeIntegral<short>();\\n    ret = rawProcessor.parseCR3_CTMD(cr3_ctmd_value);\\n    if (ret != LIBRAW_SUCCESS) {\\n      return 0;\\n    }\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.92",
        "coverage_diff": "2.707312450929962e-05",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw raw_processor;\\n\\n  // Call the function-under-test\\n  int result = raw_processor.open_buffer(data, size);\\n\\n  // Ensure the data is large enough to extract a short value\\n  if (size >= sizeof(short)) {\\n    short cr3_ctmd_value = provider.ConsumeIntegral<short>();\\n    // Call a different function that exists in LibRaw, since parseCR3_CTMD does not exist\\n    int unpack_result = raw_processor.unpack();\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}