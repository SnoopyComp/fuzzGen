{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.24",
        "coverage_diff": "0.0017597530931044753",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Initialize LibRaw object\\n  LibRaw raw_processor;\\n\\n  // Create a temporary file to store the fuzzed data\\n  const char* temp_filename = \"/tmp/fuzz_image.raw\";\\n  FILE* temp_file = fopen(temp_filename, \"wb\");\\n  if (temp_file == nullptr) {\\n    return 0; // Exit if the temporary file cannot be created\\n  }\\n\\n  // Write the fuzzed data to the temporary file\\n  fwrite(data, 1, size, temp_file);\\n  fclose(temp_file);\\n\\n  // Open the temporary file with LibRaw\\n  if (raw_processor.open_file(temp_filename) != LIBRAW_SUCCESS) {\\n    // If opening the file fails, clean up and exit\\n    remove(temp_filename);\\n    return 0;\\n  }\\n\\n  // Call the function-under-test\\n  int result = raw_processor.sraw_midpoint();\\n\\n  // Clean up\\n  raw_processor.recycle();\\n  remove(temp_filename);\\n\\n  // Use the result in some way to avoid compiler optimizations\\n  (void)result;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.83",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize the FuzzedDataProvider with the given data and size\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a LibRaw instance\\n  LibRaw rawProcessor;\\n\\n  // Attempt to open the buffer with the provided data\\n  int result = rawProcessor.open_buffer(data, size);\\n\\n  // If the buffer was successfully opened, attempt to unpack the data\\n  if (result == LIBRAW_SUCCESS) {\\n    rawProcessor.unpack();\\n\\n    // Call the sraw_midpoint function as required\\n    int midpoint_result = rawProcessor.sraw_midpoint();\\n\\n    // Optionally, process the image data further (e.g., raw2image, dcraw_process)\\n    // rawProcessor.raw2image();\\n    // rawProcessor.dcraw_process();\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}