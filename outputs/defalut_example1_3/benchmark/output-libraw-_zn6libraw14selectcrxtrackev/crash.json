{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize the FuzzedDataProvider with the input data\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw rawProcessor;\\n\\n  // Call the function-under-test\\n  int result = rawProcessor.open_buffer(data, size);\\n\\n  // Optionally, you can add more function calls to test other functionalities\\n  if (result == LIBRAW_SUCCESS) {\\n    rawProcessor.unpack();\\n    rawProcessor.dcraw_process();\\n    libraw_processed_image_t *image = rawProcessor.dcraw_make_mem_image();\\n    if (image) {\\n      LibRaw::dcraw_clear_mem(image);\\n    }\\n  }\\n\\n  // Call the required function\\n  rawProcessor.selectCRXTrack();\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Fuzzing harness for LibRaw::unpack\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw rawProcessor;\\n\\n    // Feed the input data to the function-under-test\\n    if (rawProcessor.open_buffer(data, size) == LIBRAW_SUCCESS) {\\n        rawProcessor.selectCRXTrack(); // Call the required function\\n        rawProcessor.unpack();\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}