{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <cstdio>\\n#include <string>\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    // Consume a short value from the fuzzed data\\n    short short_param = fuzzedDataProvider.ConsumeIntegral<short>();\\n\\n    // Create a temporary file with the fuzzed data\\n    std::string temp_filename = \"/tmp/fuzzed_image.raw\";\\n    FILE *temp_file = fopen(temp_filename.c_str(), \"wb\");\\n    if (temp_file == nullptr) {\\n        return 0;\\n    }\\n    fwrite(data, 1, size, temp_file);\\n    fclose(temp_file);\\n\\n    // Call the function-under-test\\n    LibRaw libRawInstance;\\n    int result_open = libRawInstance.open_file(temp_filename.c_str());\\n    if (result_open == LIBRAW_SUCCESS) {\\n        int result_unpack = libRawInstance.unpack();\\n        if (result_unpack == LIBRAW_SUCCESS) {\\n            // Call the required function `dcraw_process`\\n            int result_dcraw_process = libRawInstance.dcraw_process();\\n        }\\n    }\\n\\n    // Clean up the temporary file\\n    remove(temp_filename.c_str());\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <cstdio> // For FILE, fopen, fwrite, fclose, remove\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    // Consume a short value from the fuzzed data\\n    short short_param = fuzzedDataProvider.ConsumeIntegral<short>();\\n\\n    // Create an instance of the LibRaw class\\n    LibRaw libRawInstance;\\n\\n    // Create a temporary file to store the fuzzing data\\n    const char* temp_filename = \"/tmp/libraw_fuzz_input.raw\";\\n    FILE* temp_file = fopen(temp_filename, \"wb\");\\n    if (!temp_file) {\\n        return 0;\\n    }\\n    fwrite(data, 1, size, temp_file);\\n    fclose(temp_file);\\n\\n    // Open the temporary file with LibRaw\\n    int result_open = libRawInstance.open_file(temp_filename);\\n\\n    // If the file was successfully opened, unpack the image\\n    if (result_open == LIBRAW_SUCCESS) {\\n        libRawInstance.unpack();\\n    }\\n\\n    // Call the target function parseCR3_CTMD with the consumed short value\\n    libRawInstance.parseCR3_CTMD(short_param);\\n\\n    // Clean up the temporary file\\n    remove(temp_filename);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}