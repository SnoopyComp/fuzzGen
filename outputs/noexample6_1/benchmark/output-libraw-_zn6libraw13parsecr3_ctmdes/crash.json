{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"libraw.h\" // Assuming the header file for LibRaw is named libraw.h\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Creating an instance of LibRaw to call the member function\\n    LibRaw libraw_instance;\\n\\n    // Calling the function-under-test\\n    int result = libraw_instance.open_buffer(data, size);\\n\\n    // Ensure we have enough data to call parse_tiff\\n    if (size >= sizeof(short)) {\\n        short param = fuzzed_data.ConsumeIntegral<short>();\\n        // Assuming parse_tiff is a valid function in LibRaw\\n        int parse_result = libraw_instance.parse_tiff(param);\\n    }\\n\\n    // Ensure we have enough data to call parse_cr3\\n    if (size >= sizeof(short)) {\\n        short cr3_param = fuzzed_data.ConsumeIntegral<short>();\\n        // Calling the required function parse_cr3\\n        int cr3_result = libraw_instance.parse_cr3(cr3_param);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of LibRaw\\n    LibRaw libraw_instance;\\n\\n    // Call the function-under-test with the fuzzed data\\n    int result = libraw_instance.open_buffer(data, size);\\n\\n    // Process the image if it was successfully opened\\n    if (result == LIBRAW_SUCCESS) {\\n        libraw_instance.unpack();\\n    }\\n\\n    // Generate a short value from the fuzzed data\\n    if (size >= sizeof(short)) {\\n        short fuzzed_short = fuzzed_data.ConsumeIntegral<short>();\\n        libraw_instance.parseCR3_CTMD(fuzzed_short);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}