{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.30",
        "coverage_diff": "0.00010829249803719848",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"  // Correct header file path for LibRaw\\n\\n// Derived class to access protected member function\\nclass LibRawDerived : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop; // Expose the protected member function\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Ensure there is enough data to consume\\n    if (size < sizeof(int)) {\\n        return 0; // Not enough data to proceed\\n    }\\n\\n    // Consume data for the first parameter (void*)\\n    std::vector<uint8_t> buffer = fuzzed_data.ConsumeBytes<uint8_t>(fuzzed_data.remaining_bytes() - sizeof(int));\\n    void *ptr = buffer.data();\\n\\n    // Consume data for the second parameter (int)\\n    int integer_param = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Create an instance of the derived class\\n    LibRawDerived libraw;\\n\\n    try {\\n        // Call the function-under-test\\n        libraw.crxLoadDecodeLoop(ptr, integer_param);\\n    } catch (const std::exception &e) {\\n        // Catch any exceptions to prevent the fuzzer from crashing\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.31",
        "coverage_diff": "0.0002978043696022958",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"  // Corrected path for the LibRaw header file\\n\\n// Create a derived class to access the protected member function\\nclass LibRawDerived : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume a portion of the data for the void* parameter\\n    std::vector<uint8_t> buffer = fuzzed_data.ConsumeBytes<uint8_t>(fuzzed_data.remaining_bytes() / 2);\\n    void* ptr = static_cast<void*>(buffer.data());\\n\\n    // Consume an integer value for the second parameter\\n    int int_param = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Create an instance of the derived class to call the protected member function\\n    LibRawDerived libraw_instance;\\n\\n    // Call the function-under-test\\n    libraw_instance.crxLoadDecodeLoop(ptr, int_param);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}