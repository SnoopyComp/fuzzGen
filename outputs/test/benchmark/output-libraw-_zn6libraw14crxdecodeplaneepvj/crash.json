{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"  // Corrected include path\\n\\n// Derived class to expose the protected method\\nclass PublicLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Consume data to create the first parameter\\n    std::vector<uint8_t> buffer = fuzzed_data.ConsumeBytes<uint8_t>(fuzzed_data.remaining_bytes());\\n\\n    // Ensure the buffer is not empty before proceeding\\n    if (buffer.empty()) {\\n        return 0;\\n    }\\n\\n    void *buffer_ptr = buffer.data();\\n\\n    // Consume data to create the second parameter\\n    uint32_t param2 = fuzzed_data.ConsumeIntegral<uint32_t>();\\n\\n    // Create an instance of PublicLibRaw\\n    PublicLibRaw libraw;\\n\\n    // Call the function-under-test\\n    int result = libraw.crxDecodePlane(buffer_ptr, param2);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass FuzzLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane; // Expose the protected member function\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Extract a uint32_t value for the second parameter\\n    uint32_t param2 = fuzzed_data.ConsumeIntegral<uint32_t>();\\n\\n    // Extract remaining bytes for the first parameter\\n    std::vector<uint8_t> remaining_bytes = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n    void *param1 = static_cast<void*>(remaining_bytes.data());\\n\\n    // Ensure param1 is not NULL and has sufficient size by checking size\\n    if (remaining_bytes.size() < sizeof(uint32_t)) {\\n        return 0;\\n    }\\n\\n    // Create an instance of FuzzLibRaw to call the member function\\n    FuzzLibRaw libraw_instance;\\n\\n    // Call the function-under-test\\n    int result = libraw_instance.crxDecodePlane(param1, param2);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}