{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstdio>\\n#include <cstring>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize the fuzzed data provider\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw rawProcessor;\\n\\n  // Create a temporary file to store the fuzzed data\\n  const char* tempFileName = \"/tmp/fuzzed_input.raw\";\\n  FILE* tempFile = fopen(tempFileName, \"wb\");\\n  if (tempFile == nullptr) {\\n    return 0;\\n  }\\n  fwrite(data, 1, size, tempFile);\\n  fclose(tempFile);\\n\\n  // Open the temporary file with LibRaw\\n  if (rawProcessor.open_file(tempFileName) != LIBRAW_SUCCESS) {\\n    std::remove(tempFileName);\\n    return 0;\\n  }\\n\\n  // Call the function-under-test\\n  if (rawProcessor.unpack() != LIBRAW_SUCCESS) {\\n    std::remove(tempFileName);\\n    return 0;\\n  }\\n\\n  // Call the selectCRXTrack function as required\\n  rawProcessor.selectCRXTrack();\\n\\n  // Process the image\\n  if (rawProcessor.dcraw_process() != LIBRAW_SUCCESS) {\\n    std::remove(tempFileName);\\n    return 0;\\n  }\\n\\n  // Clean up the temporary file\\n  std::remove(tempFileName);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.46",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize the FuzzedDataProvider with the input data\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw rawProcessor;\\n\\n  // Call the function-under-test with non-null input\\n  int result = rawProcessor.open_buffer(data, size);\\n\\n  // Process the image if the buffer was successfully opened\\n  if (result == LIBRAW_SUCCESS) {\\n    rawProcessor.unpack();\\n    rawProcessor.dcraw_process();\\n    // rawProcessor.selectCRXTrack();  // This function does not exist, so it is removed\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}