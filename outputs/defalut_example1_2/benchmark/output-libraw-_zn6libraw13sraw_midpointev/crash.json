{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.89",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <vector>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a LibRaw instance\\n  LibRaw raw_processor;\\n\\n  // Allocate a buffer to hold the input data\\n  std::vector<uint8_t> buffer(data, data + size);\\n\\n  // Open the buffer as if it were a raw image\\n  int open_result = raw_processor.open_buffer(buffer.data(), buffer.size());\\n  if (open_result != LIBRAW_SUCCESS) {\\n    return 0; // If opening the buffer fails, exit early\\n  }\\n\\n  // Unpack the raw image data\\n  int unpack_result = raw_processor.unpack();\\n  if (unpack_result != LIBRAW_SUCCESS) {\\n    return 0; // If unpacking the data fails, exit early\\n  }\\n\\n  // Call the sraw_midpoint function\\n  int result = raw_processor.sraw_midpoint();\\n\\n  // The result is not used further, but in a real test, you might want to\\n  // validate it or use it in some way to ensure the function is working as expected.\\n  (void)result;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "5.18",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize FuzzedDataProvider with the input data\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create an instance of LibRaw\\n  LibRaw rawProcessor;\\n\\n  // Feed the input data to the LibRaw instance\\n  int result = rawProcessor.open_buffer(data, size);\\n\\n  // Process the image if it was successfully opened\\n  if (result == LIBRAW_SUCCESS) {\\n    rawProcessor.unpack();\\n    rawProcessor.dcraw_process();\\n    \\n    // Call the sraw_midpoint function as required\\n    int midpointResult = rawProcessor.sraw_midpoint();\\n  }\\n\\n  // Return the result (though the fuzzer does not care about the return value)\\n  return result;\\n}",
        "model": ""
    }

    ]
}