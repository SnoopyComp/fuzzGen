{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Derived class to expose the protected open_file and unpack methods\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::open_file;\\n    using LibRaw::unpack;\\n    using LibRaw::parseCR3_CTMD;  // Expose the parseCR3_CTMD method\\n};\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    // Consume a short value from the fuzzing data\\n    short short_param = fuzzedDataProvider.ConsumeIntegral<short>();\\n\\n    // Create an instance of the derived class to call the protected methods\\n    LibRawFuzzer libRawInstance;\\n\\n    // Call the function-under-test open_file\\n    int result_open_file = libRawInstance.open_file(reinterpret_cast<const char*>(data));\\n\\n    // Call the function-under-test unpack if open_file was successful\\n    if (result_open_file == LIBRAW_SUCCESS) {\\n        int result_unpack = libRawInstance.unpack();\\n    }\\n\\n    // Call the function-under-test parseCR3_CTMD\\n    int result_parseCR3_CTMD = libRawInstance.parseCR3_CTMD(short_param);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with fuzzing data\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n    // Ensure there is enough data to proceed\\n    if (size < sizeof(short)) {\\n        return 0;\\n    }\\n\\n    // Create an instance of the LibRaw class\\n    LibRaw libRawInstance;\\n\\n    // Call the function-under-test\\n    int ret = libRawInstance.open_buffer(data, size);\\n    if (ret != LIBRAW_SUCCESS) {\\n        return 0;\\n    }\\n\\n    // Call the unpack function to process the image data\\n    ret = libRawInstance.unpack();\\n    if (ret != LIBRAW_SUCCESS) {\\n        return 0;\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}