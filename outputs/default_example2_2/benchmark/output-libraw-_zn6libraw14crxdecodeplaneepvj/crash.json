{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.33",
        "coverage_diff": "0.00016243874705579772",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include \"libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Consume a uint32_t value for the second parameter\\n    uint32_t param2 = stream.ConsumeIntegral<uint32_t>();\\n\\n    // Consume the remaining bytes for the first parameter\\n    std::vector<uint8_t> buffer = stream.ConsumeRemainingBytes<uint8_t>();\\n\\n    // Ensure the buffer is not empty and param2 is within a reasonable range\\n    if (buffer.empty() || param2 > buffer.size()) {\\n        return 0;\\n    }\\n\\n    // Call the function-under-test\\n    LibRaw libraw;\\n    // Access the protected member function through a derived class\\n    struct DerivedLibRaw : public LibRaw {\\n        using LibRaw::crxDecodePlane;\\n    };\\n    DerivedLibRaw derivedLibRaw;\\n    derivedLibRaw.crxDecodePlane(buffer.data(), param2);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "DRIVER",
        "coverage": "0.10",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Derived class to expose the protected member function\\nclass LibRawFuzzer : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Consume a uint32_t value for the second parameter\\n    uint32_t plane_size = stream.ConsumeIntegral<uint32_t>();\\n\\n    // Consume the remaining bytes for the first parameter\\n    std::vector<uint8_t> buffer = stream.ConsumeRemainingBytes<uint8_t>();\\n\\n    // Ensure the buffer is not empty and plane_size is reasonable\\n    if (buffer.empty() || plane_size == 0 || plane_size > buffer.size()) {\\n        return 0;\\n    }\\n\\n    // Create an instance of the derived class\\n    LibRawFuzzer rawProcessor;\\n\\n    // Call the function-under-test\\n    rawProcessor.crxDecodePlane(buffer.data(), plane_size);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}