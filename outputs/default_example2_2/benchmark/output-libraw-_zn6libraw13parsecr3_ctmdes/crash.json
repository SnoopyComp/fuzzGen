{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "4.78",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstring>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < sizeof(short)) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  short input_value = stream.ConsumeIntegral<short>();\\n\\n  LibRaw raw_processor;\\n  // Instead of parseCR3_CTMD, use unpack() which is a valid function in LibRaw\\n  // First, we need to open a buffer with the raw data\\n  if (raw_processor.open_buffer(data, size) == LIBRAW_SUCCESS) {\\n    // Then we can call unpack() to process the raw image data\\n    raw_processor.unpack();\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a LibRaw processor instance\\n  LibRaw rawProcessor;\\n\\n  // Attempt to open the buffer with the provided data\\n  int result = rawProcessor.open_buffer(data, size);\\n\\n  // Process the image if the buffer was successfully opened\\n  if (result == LIBRAW_SUCCESS) {\\n    rawProcessor.unpack();\\n    rawProcessor.dcraw_process();\\n    libraw_processed_image_t *image = rawProcessor.dcraw_make_mem_image();\\n    if (image) {\\n      LibRaw::dcraw_clear_mem(image);\\n    }\\n  }\\n\\n  // Ensure the function parse_tiff_ifd is called with a non-null input\\n  short dummyInput = stream.ConsumeIntegral<short>();\\n  rawProcessor.parse_tiff_ifd(dummyInput);\\n\\n  // Ensure the function parseCR3_CTMD is called with a non-null input\\n  short cr3Input = stream.ConsumeIntegral<short>();\\n  rawProcessor.parseCR3_CTMD(cr3Input);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}